// This file has been generated by the SAPUI5 'AllInOne' Builder
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * @link   http://www.phpied.com/rgb-color-parser-in-javascript/
 * @license Use it if you like it
 */
function RGBColor(color_string)
{
    this.ok = false;

    // strip any leading #
    if (color_string.charAt(0) == '#') { // remove # if any
        color_string = color_string.substr(1,6);
    }

    color_string = color_string.replace(/ /g,'');
    color_string = color_string.toLowerCase();

    // before getting into regexps, try simple matches
    // and overwrite the input
    var simple_colors = {
        aliceblue: 'f0f8ff',
        antiquewhite: 'faebd7',
        aqua: '00ffff',
        aquamarine: '7fffd4',
        azure: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '000000',
        blanchedalmond: 'ffebcd',
        blue: '0000ff',
        blueviolet: '8a2be2',
        brown: 'a52a2a',
        burlywood: 'deb887',
        cadetblue: '5f9ea0',
        chartreuse: '7fff00',
        chocolate: 'd2691e',
        coral: 'ff7f50',
        cornflowerblue: '6495ed',
        cornsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: '00ffff',
        darkblue: '00008b',
        darkcyan: '008b8b',
        darkgoldenrod: 'b8860b',
        darkgray: 'a9a9a9',
        darkgreen: '006400',
        darkkhaki: 'bdb76b',
        darkmagenta: '8b008b',
        darkolivegreen: '556b2f',
        darkorange: 'ff8c00',
        darkorchid: '9932cc',
        darkred: '8b0000',
        darksalmon: 'e9967a',
        darkseagreen: '8fbc8f',
        darkslateblue: '483d8b',
        darkslategray: '2f4f4f',
        darkturquoise: '00ced1',
        darkviolet: '9400d3',
        deeppink: 'ff1493',
        deepskyblue: '00bfff',
        dimgray: '696969',
        dodgerblue: '1e90ff',
        feldspar: 'd19275',
        firebrick: 'b22222',
        floralwhite: 'fffaf0',
        forestgreen: '228b22',
        fuchsia: 'ff00ff',
        gainsboro: 'dcdcdc',
        ghostwhite: 'f8f8ff',
        gold: 'ffd700',
        goldenrod: 'daa520',
        gray: '808080',
        green: '008000',
        greenyellow: 'adff2f',
        honeydew: 'f0fff0',
        hotpink: 'ff69b4',
        indianred : 'cd5c5c',
        indigo : '4b0082',
        ivory: 'fffff0',
        khaki: 'f0e68c',
        lavender: 'e6e6fa',
        lavenderblush: 'fff0f5',
        lawngreen: '7cfc00',
        lemonchiffon: 'fffacd',
        lightblue: 'add8e6',
        lightcoral: 'f08080',
        lightcyan: 'e0ffff',
        lightgoldenrodyellow: 'fafad2',
        lightgrey: 'd3d3d3',
        lightgreen: '90ee90',
        lightpink: 'ffb6c1',
        lightsalmon: 'ffa07a',
        lightseagreen: '20b2aa',
        lightskyblue: '87cefa',
        lightslateblue: '8470ff',
        lightslategray: '778899',
        lightsteelblue: 'b0c4de',
        lightyellow: 'ffffe0',
        lime: '00ff00',
        limegreen: '32cd32',
        linen: 'faf0e6',
        magenta: 'ff00ff',
        maroon: '800000',
        mediumaquamarine: '66cdaa',
        mediumblue: '0000cd',
        mediumorchid: 'ba55d3',
        mediumpurple: '9370d8',
        mediumseagreen: '3cb371',
        mediumslateblue: '7b68ee',
        mediumspringgreen: '00fa9a',
        mediumturquoise: '48d1cc',
        mediumvioletred: 'c71585',
        midnightblue: '191970',
        mintcream: 'f5fffa',
        mistyrose: 'ffe4e1',
        moccasin: 'ffe4b5',
        navajowhite: 'ffdead',
        navy: '000080',
        oldlace: 'fdf5e6',
        olive: '808000',
        olivedrab: '6b8e23',
        orange: 'ffa500',
        orangered: 'ff4500',
        orchid: 'da70d6',
        palegoldenrod: 'eee8aa',
        palegreen: '98fb98',
        paleturquoise: 'afeeee',
        palevioletred: 'd87093',
        papayawhip: 'ffefd5',
        peachpuff: 'ffdab9',
        peru: 'cd853f',
        pink: 'ffc0cb',
        plum: 'dda0dd',
        powderblue: 'b0e0e6',
        purple: '800080',
        red: 'ff0000',
        rosybrown: 'bc8f8f',
        royalblue: '4169e1',
        saddlebrown: '8b4513',
        salmon: 'fa8072',
        sandybrown: 'f4a460',
        seagreen: '2e8b57',
        seashell: 'fff5ee',
        sienna: 'a0522d',
        silver: 'c0c0c0',
        skyblue: '87ceeb',
        slateblue: '6a5acd',
        slategray: '708090',
        snow: 'fffafa',
        springgreen: '00ff7f',
        steelblue: '4682b4',
        tan: 'd2b48c',
        teal: '008080',
        thistle: 'd8bfd8',
        tomato: 'ff6347',
        turquoise: '40e0d0',
        violet: 'ee82ee',
        violetred: 'd02090',
        wheat: 'f5deb3',
        white: 'ffffff',
        whitesmoke: 'f5f5f5',
        yellow: 'ffff00',
        yellowgreen: '9acd32'
    };
    for (var key in simple_colors) {
        if (color_string == key) {
            color_string = simple_colors[key];
        }
    }
    // emd of simple type-in colors

    // array of color definition objects
    var color_defs = [
        {
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
            process: function (bits){
                return [
                    parseInt(bits[1]),
                    parseInt(bits[2]),
                    parseInt(bits[3])
                ];
            }
        },
        {
            re: /^(\w{2})(\w{2})(\w{2})$/,
            example: ['#00ff00', '336699'],
            process: function (bits){
                return [
                    parseInt(bits[1], 16),
                    parseInt(bits[2], 16),
                    parseInt(bits[3], 16)
                ];
            }
        },
        {
            re: /^(\w{1})(\w{1})(\w{1})$/,
            example: ['#fb0', 'f0f'],
            process: function (bits){
                return [
                    parseInt(bits[1] + bits[1], 16),
                    parseInt(bits[2] + bits[2], 16),
                    parseInt(bits[3] + bits[3], 16)
                ];
            }
        }
    ];

    // search through the definitions to find a match
    for (var i = 0; i < color_defs.length; i++) {
        var re = color_defs[i].re;
        var processor = color_defs[i].process;
        var bits = re.exec(color_string);
        if (bits) {
            channels = processor(bits);
            this.r = channels[0];
            this.g = channels[1];
            this.b = channels[2];
            this.ok = true;
        }

    }

    // validate/cleanup values
    this.r = (this.r < 0 || isNaN(this.r)) ? 0 : ((this.r > 255) ? 255 : this.r);
    this.g = (this.g < 0 || isNaN(this.g)) ? 0 : ((this.g > 255) ? 255 : this.g);
    this.b = (this.b < 0 || isNaN(this.b)) ? 0 : ((this.b > 255) ? 255 : this.b);

    // some getters
    this.toRGB = function () {
        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
    }
    this.toHex = function () {
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);
        if (r.length == 1) r = '0' + r;
        if (g.length == 1) g = '0' + g;
        if (b.length == 1) b = '0' + b;
        return '#' + r + g + b;
    }

    // help
    this.getHelpXML = function () {

        var examples = new Array();
        // add regexps
        for (var i = 0; i < color_defs.length; i++) {
            var example = color_defs[i].example;
            for (var j = 0; j < example.length; j++) {
                examples[examples.length] = example[j];
            }
        }
        // add type-in colors
        for (var sc in simple_colors) {
            examples[examples.length] = sc;
        }

        var xml = document.createElement('ul');
        xml.setAttribute('id', 'rgbcolor-examples');
        for (var i = 0; i < examples.length; i++) {
            try {
                var list_item = document.createElement('li');
                var list_color = new RGBColor(examples[i]);
                var example_div = document.createElement('div');
                example_div.style.cssText =
                        'margin: 3px; '
                        + 'border: 1px solid black; '
                        + 'background:' + list_color.toHex() + '; '
                        + 'color:' + list_color.toHex()
                ;
                example_div.appendChild(document.createTextNode('test'));
                var list_item_value = document.createTextNode(
                    ' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex()
                );
                list_item.appendChild(example_div);
                list_item.appendChild(list_item_value);
                xml.appendChild(list_item);

            } catch(e){}
        }
        return xml;

    }

}

/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * @link   http://www.phpied.com/rgb-color-parser-in-javascript/
 * @license Use it if you like it
 */

(function() {

    RGBColorStatic = {};

    var SIMPLE_COLORS = {
        aliceblue : 'f0f8ff',
        antiquewhite : 'faebd7',
        aqua : '00ffff',
        aquamarine : '7fffd4',
        azure : 'f0ffff',
        beige : 'f5f5dc',
        bisque : 'ffe4c4',
        black : '000000',
        blanchedalmond : 'ffebcd',
        blue : '0000ff',
        blueviolet : '8a2be2',
        brown : 'a52a2a',
        burlywood : 'deb887',
        cadetblue : '5f9ea0',
        chartreuse : '7fff00',
        chocolate : 'd2691e',
        coral : 'ff7f50',
        cornflowerblue : '6495ed',
        cornsilk : 'fff8dc',
        crimson : 'dc143c',
        cyan : '00ffff',
        darkblue : '00008b',
        darkcyan : '008b8b',
        darkgoldenrod : 'b8860b',
        darkgray : 'a9a9a9',
        darkgreen : '006400',
        darkkhaki : 'bdb76b',
        darkmagenta : '8b008b',
        darkolivegreen : '556b2f',
        darkorange : 'ff8c00',
        darkorchid : '9932cc',
        darkred : '8b0000',
        darksalmon : 'e9967a',
        darkseagreen : '8fbc8f',
        darkslateblue : '483d8b',
        darkslategray : '2f4f4f',
        darkturquoise : '00ced1',
        darkviolet : '9400d3',
        deeppink : 'ff1493',
        deepskyblue : '00bfff',
        dimgray : '696969',
        dodgerblue : '1e90ff',
        feldspar : 'd19275',
        firebrick : 'b22222',
        floralwhite : 'fffaf0',
        forestgreen : '228b22',
        fuchsia : 'ff00ff',
        gainsboro : 'dcdcdc',
        ghostwhite : 'f8f8ff',
        gold : 'ffd700',
        goldenrod : 'daa520',
        gray : '808080',
        green : '008000',
        greenyellow : 'adff2f',
        honeydew : 'f0fff0',
        hotpink : 'ff69b4',
        indianred : 'cd5c5c',
        indigo : '4b0082',
        ivory : 'fffff0',
        khaki : 'f0e68c',
        lavender : 'e6e6fa',
        lavenderblush : 'fff0f5',
        lawngreen : '7cfc00',
        lemonchiffon : 'fffacd',
        lightblue : 'add8e6',
        lightcoral : 'f08080',
        lightcyan : 'e0ffff',
        lightgoldenrodyellow : 'fafad2',
        lightgrey : 'd3d3d3',
        lightgreen : '90ee90',
        lightpink : 'ffb6c1',
        lightsalmon : 'ffa07a',
        lightseagreen : '20b2aa',
        lightskyblue : '87cefa',
        lightslateblue : '8470ff',
        lightslategray : '778899',
        lightsteelblue : 'b0c4de',
        lightyellow : 'ffffe0',
        lime : '00ff00',
        limegreen : '32cd32',
        linen : 'faf0e6',
        magenta : 'ff00ff',
        maroon : '800000',
        mediumaquamarine : '66cdaa',
        mediumblue : '0000cd',
        mediumorchid : 'ba55d3',
        mediumpurple : '9370d8',
        mediumseagreen : '3cb371',
        mediumslateblue : '7b68ee',
        mediumspringgreen : '00fa9a',
        mediumturquoise : '48d1cc',
        mediumvioletred : 'c71585',
        midnightblue : '191970',
        mintcream : 'f5fffa',
        mistyrose : 'ffe4e1',
        moccasin : 'ffe4b5',
        navajowhite : 'ffdead',
        navy : '000080',
        oldlace : 'fdf5e6',
        olive : '808000',
        olivedrab : '6b8e23',
        orange : 'ffa500',
        orangered : 'ff4500',
        orchid : 'da70d6',
        palegoldenrod : 'eee8aa',
        palegreen : '98fb98',
        paleturquoise : 'afeeee',
        palevioletred : 'd87093',
        papayawhip : 'ffefd5',
        peachpuff : 'ffdab9',
        peru : 'cd853f',
        pink : 'ffc0cb',
        plum : 'dda0dd',
        powderblue : 'b0e0e6',
        purple : '800080',
        red : 'ff0000',
        rosybrown : 'bc8f8f',
        royalblue : '4169e1',
        saddlebrown : '8b4513',
        salmon : 'fa8072',
        sandybrown : 'f4a460',
        seagreen : '2e8b57',
        seashell : 'fff5ee',
        sienna : 'a0522d',
        silver : 'c0c0c0',
        skyblue : '87ceeb',
        slateblue : '6a5acd',
        slategray : '708090',
        snow : 'fffafa',
        springgreen : '00ff7f',
        steelblue : '4682b4',
        tan : 'd2b48c',
        teal : '008080',
        thistle : 'd8bfd8',
        tomato : 'ff6347',
        turquoise : '40e0d0',
        violet : 'ee82ee',
        violetred : 'd02090',
        wheat : 'f5deb3',
        white : 'ffffff',
        whitesmoke : 'f5f5f5',
        yellow : 'ffff00',
        yellowgreen : '9acd32'
    };

    // array of color definition objects
    var COLOR_DEFS = [{
        re : /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
        example : ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
        process : function(bits) {
            return [clean_color_number(parseInt(bits[1])), 
                    clean_color_number(parseInt(bits[2])), 
                    clean_color_number(parseInt(bits[3]))];
        }
    }, {
        re : /^(\w{2})(\w{2})(\w{2})$/,
        example : ['#00ff00', '336699'],
        process : function(bits) {
            return [clean_color_number(parseInt(bits[1], 16)), 
                    clean_color_number(parseInt(bits[2], 16)), 
                    clean_color_number(parseInt(bits[3], 16))];
        }
    }, {
        re : /^(\w{1})(\w{1})(\w{1})$/,
        example : ['#fb0', 'f0f'],
        process : function(bits) {
            return [clean_color_number(parseInt(bits[1] + bits[1], 16)), 
                    clean_color_number(parseInt(bits[2] + bits[2], 16)), 
                    clean_color_number(parseInt(bits[3] + bits[3], 16))];
        }
    }];

    var clean_color_number = function(value) {
        return (value < 0 || isNaN(value)) ? 0 : ((value > 255) ? 255 : value);
    };
    
    /**
     *
     * @param {String} color_string rgb(123, 234, 45) or #FF22CC or ff22cc or #f0c or F2C
     * @return {[r, g, b]}
     */
    RGBColorStatic.parse = function(color_string) {
        if(color_string === ""){
            return [];
        }
        color_string = String(color_string).toLowerCase();
        // strip any leading #
        var is_hex_string = false;
        if (color_string.charAt(0) == '#') {// remove # if any
            color_string = color_string.substr(1, 6);
            is_hex_string = true;
        } else {
            color_string = color_string.replace(/ /g, '');
        }

        // seperate check for performance consideration
        if (is_hex_string == false && color_string.indexOf("rgb(") == 0) {
            var re = COLOR_DEFS[0].re;
            var processor = COLOR_DEFS[0].process;
            var bits = re.exec(color_string);
            if (bits) {
                return processor(bits);
            }
        } else {
            if (is_hex_string == false) {
                // before getting into regexps, try simple matches and overwrite the input
                for (var key in SIMPLE_COLORS) {
                    if (color_string == key) {
                        color_string = simple_colors[key];
                    }
                }
            }
            // search through the definitions to find a match
            for (var i = 1; i < COLOR_DEFS.length; i++) {
                var re = COLOR_DEFS[i].re;
                var processor = COLOR_DEFS[i].process;
                var bits = re.exec(color_string);
                if (bits) {
                    return processor(bits);
                }
            }
        }
        return [];
    };

})();
/*
 * canvg.js - Javascript SVG parser and renderer on Canvas
 * MIT Licensed 
 * Gabe Lerner (gabelerner@gmail.com)
 * http://code.google.com/p/canvg/
 *
 * Requires: rgbcolor.js - http://www.phpied.com/rgb-color-parser-in-javascript/
 */
(function(){
	// canvg(target, s)
	// empty parameters: replace all 'svg' elements on page with 'canvas' elements
	// target: canvas element or the id of a canvas element
	// s: svg string, url to svg file, or xml document
	// opts: optional hash of options
	//		 ignoreMouse: true => ignore mouse events
	//		 ignoreAnimation: true => ignore animations
	//		 ignoreDimensions: true => does not try to resize canvas
	//		 ignoreClear: true => does not clear canvas
	//		 offsetX: int => draws at a x offset
	//		 offsetY: int => draws at a y offset
	//		 scaleWidth: int => scales horizontally to width
	//		 scaleHeight: int => scales vertically to height
	//		 renderCallback: function => will call the function after the first render is completed
	//		 forceRedraw: function => will call the function on every frame, if it returns true, will redraw
	this.canvg = function (target, s, opts) {
		// no parameters
		if (target == null && s == null && opts == null) {
			var svgTags = document.getElementsByTagName('svg');
			for (var i=0; i<svgTags.length; i++) {
				var svgTag = svgTags[i];
				var c = document.createElement('canvas');
				c.width = svgTag.clientWidth;
				c.height = svgTag.clientHeight;
				svgTag.parentNode.insertBefore(c, svgTag);
				svgTag.parentNode.removeChild(svgTag);
				var div = document.createElement('div');
				div.appendChild(svgTag);
				canvg(c, div.innerHTML);
			}
			return;
		}	
		opts = opts || {};
	
		if (typeof target == 'string') {
			target = document.getElementById(target);
		}
		
		// store class on canvas
		if (target.svg != null) target.svg.stop();
		target.svg = svg = build();
		svg.opts = opts;
		
		var ctx = target.getContext('2d');
		if (typeof(s.documentElement) != 'undefined') {
			// load from xml doc
			svg.loadXmlDoc(ctx, s);
		}
		else if (s.substr(0,1) == '<') {
			// load from xml string
			svg.loadXml(ctx, s);
		}
		else {
			// load from url
			svg.load(ctx, s);
		}
	}

	function build() {
		var svg = { };
		
		svg.FRAMERATE = 30;
		svg.MAX_VIRTUAL_PIXELS = 30000;
		
		// globals
		svg.init = function(ctx) {
			svg.Definitions = {};
			svg.Styles = {};
			svg.Animations = [];
			svg.Images = [];
			svg.ctx = ctx;
			svg.ViewPort = new (function () {
				this.viewPorts = [];
				this.Clear = function() { this.viewPorts = []; }
				this.SetCurrent = function(width, height) { this.viewPorts.push({ width: width, height: height }); }
				this.RemoveCurrent = function() { this.viewPorts.pop(); }
				this.Current = function() { return this.viewPorts[this.viewPorts.length - 1]; }
				this.width = function() { return this.Current().width; }
				this.height = function() { return this.Current().height; }
				this.ComputeSize = function(d) {
					if (d != null && typeof(d) == 'number') return d;
					if (d == 'x') return this.width();
					if (d == 'y') return this.height();
					return Math.sqrt(Math.pow(this.width(), 2) + Math.pow(this.height(), 2)) / Math.sqrt(2);			
				}
			});
		}
		svg.init();
		
		// images loaded
		svg.ImagesLoaded = function() { 
			for (var i=0; i<svg.Images.length; i++) {
				if (!svg.Images[i].loaded) return false;
			}
			return true;
		}

		// trim
		svg.trim = function(s) { return s.replace(/^\s+|\s+$/g, ''); }
		
		// compress spaces
		svg.compressSpaces = function(s) { return s.replace(/[\s\r\t\n]+/gm,' '); }
		
		// ajax
		svg.ajax = function(url) {
			var AJAX;
			if(window.XMLHttpRequest){AJAX=new XMLHttpRequest();}
			else{AJAX=new ActiveXObject('Microsoft.XMLHTTP');}
			if(AJAX){
			   AJAX.open('GET',url,false);
			   AJAX.send(null);
			   return AJAX.responseText;
			}
			return null;
		} 
		
		// parse xml
		svg.parseXml = function(xml) {
			if (window.DOMParser)
			{
				var parser = new DOMParser();
				return parser.parseFromString(xml, 'text/xml');
			}
			else 
			{
				xml = xml.replace(/<!DOCTYPE svg[^>]*>/, '');
				var xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
				xmlDoc.async = 'false';
				xmlDoc.loadXML(xml); 
				return xmlDoc;
			}		
		}
		
		svg.Property = function(name, value) {
			this.name = name;
			this.value = value;
		}	
			svg.Property.prototype.getValue = function() {
				return this.value;
			}
		
			svg.Property.prototype.hasValue = function() {
				return (this.value != null && this.value !== '');
			}
							
			// return the numerical value of the property
			svg.Property.prototype.numValue = function() {
				if (!this.hasValue()) return 0;
				
				var n = parseFloat(this.value);
				if ((this.value + '').match(/%$/)) {
					n = n / 100.0;
				}
				return n;
			}
			
			svg.Property.prototype.valueOrDefault = function(def) {
				if (this.hasValue()) return this.value;
				return def;
			}
			
			svg.Property.prototype.numValueOrDefault = function(def) {
				if (this.hasValue()) return this.numValue();
				return def;
			}
			
			// color extensions
				// augment the current color value with the opacity
				svg.Property.prototype.addOpacity = function(opacity) {
					var newValue = this.value;
					if (opacity != null && opacity != '' && typeof(this.value)=='string') { // can only add opacity to colors, not patterns
						var color = new RGBColor(this.value);
						if (color.ok) {
							newValue = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + opacity + ')';
						}
					}
					return new svg.Property(this.name, newValue);
				}
			
			// definition extensions
				// get the definition from the definitions table
				svg.Property.prototype.getDefinition = function() {
					var name = this.value.replace(/^(url\()?#([^\)]+)\)?$/, '$2');
					return svg.Definitions[name];
				}
				
				svg.Property.prototype.isUrlDefinition = function() {
					return this.value.indexOf('url(') == 0
				}
				
				svg.Property.prototype.getFillStyleDefinition = function(e) {
					var def = this.getDefinition();
					
					// gradient
					if (def != null && def.createGradient) {
						return def.createGradient(svg.ctx, e);
					}
					
					// pattern
					if (def != null && def.createPattern) {
						return def.createPattern(svg.ctx, e);
					}
					
					return null;
				}
			
			// length extensions
				svg.Property.prototype.getDPI = function(viewPort) {
					return 96.0; // TODO: compute?
				}
				
				svg.Property.prototype.getEM = function(viewPort) {
					var em = 12;
					
					var fontSize = new svg.Property('fontSize', svg.Font.Parse(svg.ctx.font).fontSize);
					if (fontSize.hasValue()) em = fontSize.toPixels(viewPort);
					
					return em;
				}
				
				svg.Property.prototype.getUnits = function() {
					var s = this.value+'';
					return s.replace(/[0-9\.\-]/g,'');
				}
			
				// get the length as pixels
				svg.Property.prototype.toPixels = function(viewPort) {
					if (!this.hasValue()) return 0;
					var s = this.value+'';
					if (s.match(/em$/)) return this.numValue() * this.getEM(viewPort);
					if (s.match(/ex$/)) return this.numValue() * this.getEM(viewPort) / 2.0;
					if (s.match(/px$/)) return this.numValue();
					if (s.match(/pt$/)) return this.numValue() * this.getDPI(viewPort) * (1.0 / 72.0);
					if (s.match(/pc$/)) return this.numValue() * 15;
					if (s.match(/cm$/)) return this.numValue() * this.getDPI(viewPort) / 2.54;
					if (s.match(/mm$/)) return this.numValue() * this.getDPI(viewPort) / 25.4;
					if (s.match(/in$/)) return this.numValue() * this.getDPI(viewPort);
					if (s.match(/%$/)) return this.numValue() * svg.ViewPort.ComputeSize(viewPort);
					return this.numValue();
				}

			// time extensions
				// get the time as milliseconds
				svg.Property.prototype.toMilliseconds = function() {
					if (!this.hasValue()) return 0;
					var s = this.value+'';
					if (s.match(/s$/)) return this.numValue() * 1000;
					if (s.match(/ms$/)) return this.numValue();
					return this.numValue();
				}
			
			// angle extensions
				// get the angle as radians
				svg.Property.prototype.toRadians = function() {
					if (!this.hasValue()) return 0;
					var s = this.value+'';
					if (s.match(/deg$/)) return this.numValue() * (Math.PI / 180.0);
					if (s.match(/grad$/)) return this.numValue() * (Math.PI / 200.0);
					if (s.match(/rad$/)) return this.numValue();
					return this.numValue() * (Math.PI / 180.0);
				}
		
		// fonts
		svg.Font = new (function() {
			this.Styles = 'normal|italic|oblique|inherit';
			this.Variants = 'normal|small-caps|inherit';
			this.Weights = 'normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit';
			
			this.CreateFont = function(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit) { 
				var f = inherit != null ? this.Parse(inherit) : this.CreateFont('', '', '', '', '', svg.ctx.font);
				return { 
					fontFamily: fontFamily || f.fontFamily, 
					fontSize: fontSize || f.fontSize, 
					fontStyle: fontStyle || f.fontStyle, 
					fontWeight: fontWeight || f.fontWeight, 
					fontVariant: fontVariant || f.fontVariant,
					toString: function () { return [this.fontStyle, this.fontVariant, this.fontWeight, this.fontSize, this.fontFamily].join(' ') } 
				} 
			}
			
			var that = this;
			this.Parse = function(s) {
				var f = {};
				var d = svg.trim(svg.compressSpaces(s || '')).split(' ');
				var set = { fontSize: false, fontStyle: false, fontWeight: false, fontVariant: false }
				var ff = '';
				for (var i=0; i<d.length; i++) {
					if (!set.fontStyle && that.Styles.indexOf(d[i]) != -1) { if (d[i] != 'inherit') f.fontStyle = d[i]; set.fontStyle = true; }
					else if (!set.fontVariant && that.Variants.indexOf(d[i]) != -1) { if (d[i] != 'inherit') f.fontVariant = d[i]; set.fontStyle = set.fontVariant = true;	}
					else if (!set.fontWeight && that.Weights.indexOf(d[i]) != -1) {	if (d[i] != 'inherit') f.fontWeight = d[i]; set.fontStyle = set.fontVariant = set.fontWeight = true; }
					else if (!set.fontSize) { if (d[i] != 'inherit') f.fontSize = d[i].split('/')[0]; set.fontStyle = set.fontVariant = set.fontWeight = set.fontSize = true; }
					else { if (d[i] != 'inherit') ff += d[i]; }
				} if (ff != '') f.fontFamily = ff;
				return f;
			}
		});
		
		// points and paths
		svg.ToNumberArray = function(s) {
			var a = svg.trim(svg.compressSpaces((s || '').replace(/,/g, ' '))).split(' ');
			for (var i=0; i<a.length; i++) {
				a[i] = parseFloat(a[i]);
			}
			return a;
		}		
		svg.Point = function(x, y) {
			this.x = x;
			this.y = y;
		}	
			svg.Point.prototype.angleTo = function(p) {
				return Math.atan2(p.y - this.y, p.x - this.x);
			}
			
			svg.Point.prototype.applyTransform = function(v) {
				var xp = this.x * v[0] + this.y * v[2] + v[4];
				var yp = this.x * v[1] + this.y * v[3] + v[5];
				this.x = xp;
				this.y = yp;
			}

		svg.CreatePoint = function(s) {
			var a = svg.ToNumberArray(s);
			return new svg.Point(a[0], a[1]);
		}
		svg.CreatePath = function(s) {
			var a = svg.ToNumberArray(s);
			var path = [];
			for (var i=0; i<a.length; i+=2) {
				path.push(new svg.Point(a[i], a[i+1]));
			}
			return path;
		}
		
		// bounding box
		svg.BoundingBox = function(x1, y1, x2, y2) { // pass in initial points if you want
			this.x1 = Number.NaN;
			this.y1 = Number.NaN;
			this.x2 = Number.NaN;
			this.y2 = Number.NaN;
			
			this.x = function() { return this.x1; }
			this.y = function() { return this.y1; }
			this.width = function() { return this.x2 - this.x1; }
			this.height = function() { return this.y2 - this.y1; }
			
			this.addPoint = function(x, y) {	
				if (x != null) {
					if (isNaN(this.x1) || isNaN(this.x2)) {
						this.x1 = x;
						this.x2 = x;
					}
					if (x < this.x1) this.x1 = x;
					if (x > this.x2) this.x2 = x;
				}
			
				if (y != null) {
					if (isNaN(this.y1) || isNaN(this.y2)) {
						this.y1 = y;
						this.y2 = y;
					}
					if (y < this.y1) this.y1 = y;
					if (y > this.y2) this.y2 = y;
				}
			}			
			this.addX = function(x) { this.addPoint(x, null); }
			this.addY = function(y) { this.addPoint(null, y); }
			
			this.addBoundingBox = function(bb) {
				this.addPoint(bb.x1, bb.y1);
				this.addPoint(bb.x2, bb.y2);
			}
			
			this.addQuadraticCurve = function(p0x, p0y, p1x, p1y, p2x, p2y) {
				var cp1x = p0x + 2/3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)
				var cp1y = p0y + 2/3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)
				var cp2x = cp1x + 1/3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)
				var cp2y = cp1y + 1/3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)
				this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y,	cp2y, p2x, p2y);
			}
			
			this.addBezierCurve = function(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {
				// from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
				var p0 = [p0x, p0y], p1 = [p1x, p1y], p2 = [p2x, p2y], p3 = [p3x, p3y];
				this.addPoint(p0[0], p0[1]);
				this.addPoint(p3[0], p3[1]);
				
				for (i=0; i<=1; i++) {
					var f = function(t) { 
						return Math.pow(1-t, 3) * p0[i]
						+ 3 * Math.pow(1-t, 2) * t * p1[i]
						+ 3 * (1-t) * Math.pow(t, 2) * p2[i]
						+ Math.pow(t, 3) * p3[i];
					}
					
					var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
					var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
					var c = 3 * p1[i] - 3 * p0[i];
					
					if (a == 0) {
						if (b == 0) continue;
						var t = -c / b;
						if (0 < t && t < 1) {
							if (i == 0) this.addX(f(t));
							if (i == 1) this.addY(f(t));
						}
						continue;
					}
					
					var b2ac = Math.pow(b, 2) - 4 * c * a;
					if (b2ac < 0) continue;
					var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
					if (0 < t1 && t1 < 1) {
						if (i == 0) this.addX(f(t1));
						if (i == 1) this.addY(f(t1));
					}
					var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
					if (0 < t2 && t2 < 1) {
						if (i == 0) this.addX(f(t2));
						if (i == 1) this.addY(f(t2));
					}
				}
			}
			
			this.isPointInBox = function(x, y) {
				return (this.x1 <= x && x <= this.x2 && this.y1 <= y && y <= this.y2);
			}
			
			this.addPoint(x1, y1);
			this.addPoint(x2, y2);
		}
		
		// transforms
		svg.Transform = function(v) {	
			var that = this;
			this.Type = {}
		
			// translate
			this.Type.translate = function(s) {
				this.p = svg.CreatePoint(s);			
				this.apply = function(ctx) {
					ctx.translate(this.p.x || 0.0, this.p.y || 0.0);
				}
				this.applyToPoint = function(p) {
					p.applyTransform([1, 0, 0, 1, this.p.x || 0.0, this.p.y || 0.0]);
				}
			}
			
			// rotate
			this.Type.rotate = function(s) {
				var a = svg.ToNumberArray(s);
				this.angle = new svg.Property('angle', a[0]);
				this.cx = a[1] || 0;
				this.cy = a[2] || 0;
				this.apply = function(ctx) {
					ctx.translate(this.cx, this.cy);
					ctx.rotate(this.angle.toRadians());
					ctx.translate(-this.cx, -this.cy);
				}
				this.applyToPoint = function(p) {
					var a = this.angle.toRadians();
					p.applyTransform([1, 0, 0, 1, this.p.x || 0.0, this.p.y || 0.0]);
					p.applyTransform([Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0]);
					p.applyTransform([1, 0, 0, 1, -this.p.x || 0.0, -this.p.y || 0.0]);
				}			
			}
			
			this.Type.scale = function(s) {
				this.p = svg.CreatePoint(s);
				this.apply = function(ctx) {
					ctx.scale(this.p.x || 1.0, this.p.y || this.p.x || 1.0);
				}
				this.applyToPoint = function(p) {
					p.applyTransform([this.p.x || 0.0, 0, 0, this.p.y || 0.0, 0, 0]);
				}				
			}
			
			this.Type.matrix = function(s) {
				this.m = svg.ToNumberArray(s);
				this.apply = function(ctx) {
					ctx.transform(this.m[0], this.m[1], this.m[2], this.m[3], this.m[4], this.m[5]);
				}
				this.applyToPoint = function(p) {
					p.applyTransform(this.m);
				}					
			}
			
			this.Type.SkewBase = function(s) {
				this.base = that.Type.matrix;
				this.base(s);
				this.angle = new svg.Property('angle', s);
			}
			this.Type.SkewBase.prototype = new this.Type.matrix;
			
			this.Type.skewX = function(s) {
				this.base = that.Type.SkewBase;
				this.base(s);
				this.m = [1, 0, Math.tan(this.angle.toRadians()), 1, 0, 0];
			}
			this.Type.skewX.prototype = new this.Type.SkewBase;
			
			this.Type.skewY = function(s) {
				this.base = that.Type.SkewBase;
				this.base(s);
				this.m = [1, Math.tan(this.angle.toRadians()), 0, 1, 0, 0];
			}
			this.Type.skewY.prototype = new this.Type.SkewBase;
		
			this.transforms = [];
			
			this.apply = function(ctx) {
				for (var i=0; i<this.transforms.length; i++) {
					this.transforms[i].apply(ctx);
				}
			}
			
			this.applyToPoint = function(p) {
				for (var i=0; i<this.transforms.length; i++) {
					this.transforms[i].applyToPoint(p);
				}
			}
			
			var data = svg.trim(svg.compressSpaces(v)).split(/\s(?=[a-z])/);
			for (var i=0; i<data.length; i++) {
				var type = data[i].split('(')[0];
				var s = data[i].split('(')[1].replace(')','');
				var transform = new this.Type[type](s);
				this.transforms.push(transform);
			}
		}
		
		// aspect ratio
		svg.AspectRatio = function(ctx, aspectRatio, width, desiredWidth, height, desiredHeight, minX, minY, refX, refY) {
			// aspect ratio - http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
			aspectRatio = svg.compressSpaces(aspectRatio);
			aspectRatio = aspectRatio.replace(/^defer\s/,''); // ignore defer
			var align = aspectRatio.split(' ')[0] || 'xMidYMid';
			var meetOrSlice = aspectRatio.split(' ')[1] || 'meet';					
	
			// calculate scale
			var scaleX = width / desiredWidth;
			var scaleY = height / desiredHeight;
			var scaleMin = Math.min(scaleX, scaleY);
			var scaleMax = Math.max(scaleX, scaleY);
			if (meetOrSlice == 'meet') { desiredWidth *= scaleMin; desiredHeight *= scaleMin; }
			if (meetOrSlice == 'slice') { desiredWidth *= scaleMax; desiredHeight *= scaleMax; }	
			
			refX = new svg.Property('refX', refX);
			refY = new svg.Property('refY', refY);
			if (refX.hasValue() && refY.hasValue()) {				
				ctx.translate(-scaleMin * refX.toPixels('x'), -scaleMin * refY.toPixels('y'));
			} 
			else {					
				// align
				if (align.match(/^xMid/) && ((meetOrSlice == 'meet' && scaleMin == scaleY) || (meetOrSlice == 'slice' && scaleMax == scaleY))) ctx.translate(width / 2.0 - desiredWidth / 2.0, 0); 
				if (align.match(/YMid$/) && ((meetOrSlice == 'meet' && scaleMin == scaleX) || (meetOrSlice == 'slice' && scaleMax == scaleX))) ctx.translate(0, height / 2.0 - desiredHeight / 2.0); 
				if (align.match(/^xMax/) && ((meetOrSlice == 'meet' && scaleMin == scaleY) || (meetOrSlice == 'slice' && scaleMax == scaleY))) ctx.translate(width - desiredWidth, 0); 
				if (align.match(/YMax$/) && ((meetOrSlice == 'meet' && scaleMin == scaleX) || (meetOrSlice == 'slice' && scaleMax == scaleX))) ctx.translate(0, height - desiredHeight); 
			}
			
			// scale
			if (align == 'none') ctx.scale(scaleX, scaleY);
			else if (meetOrSlice == 'meet') ctx.scale(scaleMin, scaleMin); 
			else if (meetOrSlice == 'slice') ctx.scale(scaleMax, scaleMax); 	
			
			// translate
			ctx.translate(minX == null ? 0 : -minX, minY == null ? 0 : -minY);			
		}
		
		// elements
		svg.Element = {}
		
		svg.EmptyProperty = new svg.Property('EMPTY', '');
		
		svg.Element.ElementBase = function(node) {	
			this.attributes = {};
			this.styles = {};
			this.children = [];
			
			// get or create attribute
			this.attribute = function(name, createIfNotExists) {
				var a = this.attributes[name];
				if (a != null) return a;
							
				if (createIfNotExists == true) { a = new svg.Property(name, ''); this.attributes[name] = a; }
				return a || svg.EmptyProperty;
			}
			
			// get or create style, crawls up node tree
			this.style = function(name, createIfNotExists) {
				var s = this.styles[name];
				if (s != null) return s;
				
				var a = this.attribute(name);
				if (a != null && a.hasValue()) {
					this.styles[name] = a; // move up to me to cache
					return a;
				}
				
				var p = this.parent;
				if (p != null) {
					var ps = p.style(name);
					if (ps != null && ps.hasValue()) {
						return ps;
					}
				}
					
				if (createIfNotExists == true) { s = new svg.Property(name, ''); this.styles[name] = s; }
				return s || svg.EmptyProperty;
			}
			
			// base render
			this.render = function(ctx) {
				// don't render display=none
				if (this.style('display').value == 'none') return;
				
				// don't render visibility=hidden
				if (this.attribute('visibility').value == 'hidden') return;
			
				ctx.save();
					this.setContext(ctx);
						// mask
						if (this.attribute('mask').hasValue()) {
							var mask = this.attribute('mask').getDefinition();
							if (mask != null) mask.apply(ctx, this);
						}
						else if (this.style('filter').hasValue()) {
							var filter = this.style('filter').getDefinition();
							if (filter != null) filter.apply(ctx, this);
						}
						else this.renderChildren(ctx);				
					this.clearContext(ctx);
				ctx.restore();
			}
			
			// base set context
			this.setContext = function(ctx) {
				// OVERRIDE ME!
			}
			
			// base clear context
			this.clearContext = function(ctx) {
				// OVERRIDE ME!
			}			
			
			// base render children
			this.renderChildren = function(ctx) {
				for (var i=0; i<this.children.length; i++) {
					this.children[i].render(ctx);
				}
			}
			
			this.addChild = function(childNode, create) {
				var child = childNode;
				if (create) child = svg.CreateElement(childNode);
				child.parent = this;
				this.children.push(child);			
			}
				
			if (node != null && node.nodeType == 1) { //ELEMENT_NODE
				// add children
				for (var i=0; i<node.childNodes.length; i++) {
					var childNode = node.childNodes[i];
					if (childNode.nodeType == 1) this.addChild(childNode, true); //ELEMENT_NODE
				}
				
				// add attributes
				for (var i=0; i<node.attributes.length; i++) {
					var attribute = node.attributes[i];
					this.attributes[attribute.nodeName] = new svg.Property(attribute.nodeName, attribute.nodeValue);
				}
										
				// add tag styles
				var styles = svg.Styles[node.nodeName];
				if (styles != null) {
					for (var name in styles) {
						this.styles[name] = styles[name];
					}
				}					
				
				// add class styles
				if (this.attribute('class').hasValue()) {
					var classes = svg.compressSpaces(this.attribute('class').value).split(' ');
					for (var j=0; j<classes.length; j++) {
						styles = svg.Styles['.'+classes[j]];
						if (styles != null) {
							for (var name in styles) {
								this.styles[name] = styles[name];
							}
						}
						styles = svg.Styles[node.nodeName+'.'+classes[j]];
						if (styles != null) {
							for (var name in styles) {
								this.styles[name] = styles[name];
							}
						}
					}
				}
				
				// add id styles
				if (this.attribute('id').hasValue()) {
					var styles = svg.Styles['#' + this.attribute('id').value];
					if (styles != null) {
						for (var name in styles) {
							this.styles[name] = styles[name];
						}
					}
				}
				
				// add inline styles
				if (this.attribute('style').hasValue()) {
					var styles = this.attribute('style').value.split(';');
					for (var i=0; i<styles.length; i++) {
						if (svg.trim(styles[i]) != '') {
							var style = styles[i].split(':');
							var name = svg.trim(style[0]);
							var value = svg.trim(style[1]);
							this.styles[name] = new svg.Property(name, value);
						}
					}
				}	

				// add id
				if (this.attribute('id').hasValue()) {
					if (svg.Definitions[this.attribute('id').value] == null) {
						svg.Definitions[this.attribute('id').value] = this;
					}
				}
			}
		}
		
		svg.Element.RenderedElementBase = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			this.setContext = function(ctx) {
				// fill
				if (this.style('fill').isUrlDefinition()) {
					var fs = this.style('fill').getFillStyleDefinition(this);
					if (fs != null) ctx.fillStyle = fs;
				}
				else if (this.style('fill').hasValue()) {
					var fillStyle = this.style('fill');
					if (fillStyle.value == 'currentColor') fillStyle.value = this.style('color').value;
					ctx.fillStyle = (fillStyle.value == 'none' ? 'rgba(0,0,0,0)' : fillStyle.value);
				}
				if (this.style('fill-opacity').hasValue()) {
					var fillStyle = new svg.Property('fill', ctx.fillStyle);
					fillStyle = fillStyle.addOpacity(this.style('fill-opacity').value);
					ctx.fillStyle = fillStyle.value;
				}
									
				// stroke
				if (this.style('stroke').isUrlDefinition()) {
					var fs = this.style('stroke').getFillStyleDefinition(this);
					if (fs != null) ctx.strokeStyle = fs;
				}
				else if (this.style('stroke').hasValue()) {
					var strokeStyle = this.style('stroke');
					if (strokeStyle.value == 'currentColor') strokeStyle.value = this.style('color').value;
					ctx.strokeStyle = (strokeStyle.value == 'none' ? 'rgba(0,0,0,0)' : strokeStyle.value);
				}
				if (this.style('stroke-opacity').hasValue()) {
					var strokeStyle = new svg.Property('stroke', ctx.strokeStyle);
					strokeStyle = strokeStyle.addOpacity(this.style('stroke-opacity').value);
					ctx.strokeStyle = strokeStyle.value;
				}
				if (this.style('stroke-width').hasValue()) ctx.lineWidth = this.style('stroke-width').toPixels();
				if (this.style('stroke-linecap').hasValue()) ctx.lineCap = this.style('stroke-linecap').value;
				if (this.style('stroke-linejoin').hasValue()) ctx.lineJoin = this.style('stroke-linejoin').value;
				if (this.style('stroke-miterlimit').hasValue()) ctx.miterLimit = this.style('stroke-miterlimit').value;

				// font
				if (typeof(ctx.font) != 'undefined') {
					ctx.font = svg.Font.CreateFont( 
						this.style('font-style').value, 
						this.style('font-variant').value, 
						this.style('font-weight').value, 
						this.style('font-size').hasValue() ? this.style('font-size').toPixels() + 'px' : '', 
						this.style('font-family').value).toString();
				}
				
				// transform
				if (this.attribute('transform').hasValue()) { 
					var transform = new svg.Transform(this.attribute('transform').value);
					transform.apply(ctx);
				}
				
				// clip
				if (this.attribute('clip-path').hasValue()) {
					var clip = this.attribute('clip-path').getDefinition();
					if (clip != null) clip.apply(ctx);
				}
				
				// opacity
				if (this.style('opacity').hasValue()) {
					ctx.globalAlpha = this.style('opacity').numValue();
				}
			}		
		}
		svg.Element.RenderedElementBase.prototype = new svg.Element.ElementBase;
		
		svg.Element.PathElementBase = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			this.path = function(ctx) {
				if (ctx != null) ctx.beginPath();
				return new svg.BoundingBox();
			}
			
			this.renderChildren = function(ctx) {
				this.path(ctx);
				svg.Mouse.checkPath(this, ctx);
				if (ctx.fillStyle != '') ctx.fill();
				if (ctx.strokeStyle != '') ctx.stroke();
				
				var markers = this.getMarkers();
				if (markers != null) {
					if (this.style('marker-start').isUrlDefinition()) {
						var marker = this.style('marker-start').getDefinition();
						marker.render(ctx, markers[0][0], markers[0][1]);
					}
					if (this.style('marker-mid').isUrlDefinition()) {
						var marker = this.style('marker-mid').getDefinition();
						for (var i=1;i<markers.length-1;i++) {
							marker.render(ctx, markers[i][0], markers[i][1]);
						}
					}
					if (this.style('marker-end').isUrlDefinition()) {
						var marker = this.style('marker-end').getDefinition();
						marker.render(ctx, markers[markers.length-1][0], markers[markers.length-1][1]);
					}
				}					
			}
			
			this.getBoundingBox = function() {
				return this.path();
			}
			
			this.getMarkers = function() {
				return null;
			}
		}
		svg.Element.PathElementBase.prototype = new svg.Element.RenderedElementBase;
		
		// svg element
		svg.Element.svg = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			this.baseClearContext = this.clearContext;
			this.clearContext = function(ctx) {
				this.baseClearContext(ctx);
				svg.ViewPort.RemoveCurrent();
			}
			
			this.baseSetContext = this.setContext;
			this.setContext = function(ctx) {
				// initial values
				ctx.strokeStyle = 'rgba(0,0,0,0)';
				ctx.lineCap = 'butt';
				ctx.lineJoin = 'miter';
				ctx.miterLimit = 4;			
			
				this.baseSetContext(ctx);
				
				// create new view port
				if (!this.attribute('x').hasValue()) this.attribute('x', true).value = 0;
				if (!this.attribute('y').hasValue()) this.attribute('y', true).value = 0;
				ctx.translate(this.attribute('x').toPixels('x'), this.attribute('y').toPixels('y'));
				
				var width = svg.ViewPort.width();
				var height = svg.ViewPort.height();
				
				if (!this.attribute('width').hasValue()) this.attribute('width', true).value = '100%';
				if (!this.attribute('height').hasValue()) this.attribute('height', true).value = '100%';
				if (typeof(this.root) == 'undefined') {
					width = this.attribute('width').toPixels('x');
					height = this.attribute('height').toPixels('y');
					
					var x = 0;
					var y = 0;
					if (this.attribute('refX').hasValue() && this.attribute('refY').hasValue()) {
						x = -this.attribute('refX').toPixels('x');
						y = -this.attribute('refY').toPixels('y');
					}
					
					ctx.beginPath();
					ctx.moveTo(x, y);
					ctx.lineTo(width, y);
					ctx.lineTo(width, height);
					ctx.lineTo(x, height);
					ctx.closePath();
					ctx.clip();
				}
				svg.ViewPort.SetCurrent(width, height);	
						
				// viewbox
				if (this.attribute('viewBox').hasValue()) {				
					var viewBox = svg.ToNumberArray(this.attribute('viewBox').value);
					var minX = viewBox[0];
					var minY = viewBox[1];
					width = viewBox[2];
					height = viewBox[3];
					
					svg.AspectRatio(ctx,
									this.attribute('preserveAspectRatio').value, 
									svg.ViewPort.width(), 
									width,
									svg.ViewPort.height(),
									height,
									minX,
									minY,
									this.attribute('refX').value,
									this.attribute('refY').value);
										
					svg.ViewPort.RemoveCurrent();	
					svg.ViewPort.SetCurrent(viewBox[2], viewBox[3]);						
				}				
			}
		}
		svg.Element.svg.prototype = new svg.Element.RenderedElementBase;

		// rect element
		svg.Element.rect = function(node) {
			this.base = svg.Element.PathElementBase;
			this.base(node);
			
			this.path = function(ctx) {
				var x = this.attribute('x').toPixels('x');
				var y = this.attribute('y').toPixels('y');
				var width = this.attribute('width').toPixels('x');
				var height = this.attribute('height').toPixels('y');
				var rx = this.attribute('rx').toPixels('x');
				var ry = this.attribute('ry').toPixels('y');
				if (this.attribute('rx').hasValue() && !this.attribute('ry').hasValue()) ry = rx;
				if (this.attribute('ry').hasValue() && !this.attribute('rx').hasValue()) rx = ry;
				
				if (ctx != null) {
					ctx.beginPath();
					ctx.moveTo(x + rx, y);
					ctx.lineTo(x + width - rx, y);
					ctx.quadraticCurveTo(x + width, y, x + width, y + ry)
					ctx.lineTo(x + width, y + height - ry);
					ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height)
					ctx.lineTo(x + rx, y + height);
					ctx.quadraticCurveTo(x, y + height, x, y + height - ry)
					ctx.lineTo(x, y + ry);
					ctx.quadraticCurveTo(x, y, x + rx, y)
					ctx.closePath();
				}
				
				return new svg.BoundingBox(x, y, x + width, y + height);
			}
		}
		svg.Element.rect.prototype = new svg.Element.PathElementBase;
		
		// circle element
		svg.Element.circle = function(node) {
			this.base = svg.Element.PathElementBase;
			this.base(node);
			
			this.path = function(ctx) {
				var cx = this.attribute('cx').toPixels('x');
				var cy = this.attribute('cy').toPixels('y');
				var r = this.attribute('r').toPixels();
			
				if (ctx != null) {
					ctx.beginPath();
					ctx.arc(cx, cy, r, 0, Math.PI * 2, true); 
					ctx.closePath();
				}
				
				return new svg.BoundingBox(cx - r, cy - r, cx + r, cy + r);
			}
		}
		svg.Element.circle.prototype = new svg.Element.PathElementBase;	

		// ellipse element
		svg.Element.ellipse = function(node) {
			this.base = svg.Element.PathElementBase;
			this.base(node);
			
			this.path = function(ctx) {
				var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
				var rx = this.attribute('rx').toPixels('x');
				var ry = this.attribute('ry').toPixels('y');
				var cx = this.attribute('cx').toPixels('x');
				var cy = this.attribute('cy').toPixels('y');
				
				if (ctx != null) {
					ctx.beginPath();
					ctx.moveTo(cx, cy - ry);
					ctx.bezierCurveTo(cx + (KAPPA * rx), cy - ry,  cx + rx, cy - (KAPPA * ry), cx + rx, cy);
					ctx.bezierCurveTo(cx + rx, cy + (KAPPA * ry), cx + (KAPPA * rx), cy + ry, cx, cy + ry);
					ctx.bezierCurveTo(cx - (KAPPA * rx), cy + ry, cx - rx, cy + (KAPPA * ry), cx - rx, cy);
					ctx.bezierCurveTo(cx - rx, cy - (KAPPA * ry), cx - (KAPPA * rx), cy - ry, cx, cy - ry);
					ctx.closePath();
				}
				
				return new svg.BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);
			}
		}
		svg.Element.ellipse.prototype = new svg.Element.PathElementBase;			
		
		// line element
		svg.Element.line = function(node) {
			this.base = svg.Element.PathElementBase;
			this.base(node);
			
			this.getPoints = function() {
				return [
					new svg.Point(this.attribute('x1').toPixels('x'), this.attribute('y1').toPixels('y')),
					new svg.Point(this.attribute('x2').toPixels('x'), this.attribute('y2').toPixels('y'))];
			}
								
			this.path = function(ctx) {
				var points = this.getPoints();
				
				if (ctx != null) {
					ctx.beginPath();
					ctx.moveTo(points[0].x, points[0].y);
					ctx.lineTo(points[1].x, points[1].y);
				}
				
				return new svg.BoundingBox(points[0].x, points[0].y, points[1].x, points[1].y);
			}
			
			this.getMarkers = function() {
				var points = this.getPoints();	
				var a = points[0].angleTo(points[1]);
				return [[points[0], a], [points[1], a]];
			}
		}
		svg.Element.line.prototype = new svg.Element.PathElementBase;		
				
		// polyline element
		svg.Element.polyline = function(node) {
			this.base = svg.Element.PathElementBase;
			this.base(node);
			
			this.points = svg.CreatePath(this.attribute('points').value);
			this.path = function(ctx) {
				var bb = new svg.BoundingBox(this.points[0].x, this.points[0].y);
				if (ctx != null) {
					ctx.beginPath();
					ctx.moveTo(this.points[0].x, this.points[0].y);
				}
				for (var i=1; i<this.points.length; i++) {
					bb.addPoint(this.points[i].x, this.points[i].y);
					if (ctx != null) ctx.lineTo(this.points[i].x, this.points[i].y);
				}
				return bb;
			}
			
			this.getMarkers = function() {
				var markers = [];
				for (var i=0; i<this.points.length - 1; i++) {
					markers.push([this.points[i], this.points[i].angleTo(this.points[i+1])]);
				}
				markers.push([this.points[this.points.length-1], markers[markers.length-1][1]]);
				return markers;
			}			
		}
		svg.Element.polyline.prototype = new svg.Element.PathElementBase;				
				
		// polygon element
		svg.Element.polygon = function(node) {
			this.base = svg.Element.polyline;
			this.base(node);
			
			this.basePath = this.path;
			this.path = function(ctx) {
				var bb = this.basePath(ctx);
				if (ctx != null) {
					ctx.lineTo(this.points[0].x, this.points[0].y);
					ctx.closePath();
				}
				return bb;
			}
		}
		svg.Element.polygon.prototype = new svg.Element.polyline;

		// path element
		svg.Element.path = function(node) {
			this.base = svg.Element.PathElementBase;
			this.base(node);
					
			var d = this.attribute('d').value;
			// TODO: convert to real lexer based on http://www.w3.org/TR/SVG11/paths.html#PathDataBNF
			d = d.replace(/,/gm,' '); // get rid of all commas
			d = d.replace(/([MmZzLlHhVvCcSsQqTtAa])([MmZzLlHhVvCcSsQqTtAa])/gm,'$1 $2'); // separate commands from commands
			d = d.replace(/([MmZzLlHhVvCcSsQqTtAa])([MmZzLlHhVvCcSsQqTtAa])/gm,'$1 $2'); // separate commands from commands
			d = d.replace(/([MmZzLlHhVvCcSsQqTtAa])([^\s])/gm,'$1 $2'); // separate commands from points
			d = d.replace(/([^\s])([MmZzLlHhVvCcSsQqTtAa])/gm,'$1 $2'); // separate commands from points
			d = d.replace(/([0-9])([+\-])/gm,'$1 $2'); // separate digits when no comma
			d = d.replace(/(\.[0-9]*)(\.)/gm,'$1 $2'); // separate digits when no comma
			d = d.replace(/([Aa](\s+[0-9]+){3})\s+([01])\s*([01])/gm,'$1 $3 $4 '); // shorthand elliptical arc path syntax
			d = svg.compressSpaces(d); // compress multiple spaces
			d = svg.trim(d);
			this.PathParser = new (function(d) {
				this.tokens = d.split(' ');
				
				this.reset = function() {
					this.i = -1;
					this.command = '';
					this.previousCommand = '';
					this.start = new svg.Point(0, 0);
					this.control = new svg.Point(0, 0);
					this.current = new svg.Point(0, 0);
					this.points = [];
					this.angles = [];
				}
								
				this.isEnd = function() {
					return this.i >= this.tokens.length - 1;
				}
				
				this.isCommandOrEnd = function() {
					if (this.isEnd()) return true;
					return this.tokens[this.i + 1].match(/^[A-Za-z]$/) != null;
				}
				
				this.isRelativeCommand = function() {
					switch(this.command)
					{
						case 'm':
						case 'l':
						case 'h':
						case 'v':
						case 'c':
						case 's':
						case 'q':
						case 't':
						case 'a':
						case 'z':
							return true;
							break;
					}
					return false;
				}
							
				this.getToken = function() {
					this.i++;
					return this.tokens[this.i];
				}
				
				this.getScalar = function() {
					return parseFloat(this.getToken());
				}
				
				this.nextCommand = function() {
					this.previousCommand = this.command;
					this.command = this.getToken();
				}				
				
				this.getPoint = function() {
					var p = new svg.Point(this.getScalar(), this.getScalar());
					return this.makeAbsolute(p);
				}
				
				this.getAsControlPoint = function() {
					var p = this.getPoint();
					this.control = p;
					return p;
				}
				
				this.getAsCurrentPoint = function() {
					var p = this.getPoint();
					this.current = p;
					return p;	
				}
				
				this.getReflectedControlPoint = function() {
					if (this.previousCommand.toLowerCase() != 'c' && this.previousCommand.toLowerCase() != 's') {
						return this.current;
					}
					
					// reflect point
					var p = new svg.Point(2 * this.current.x - this.control.x, 2 * this.current.y - this.control.y);					
					return p;
				}
				
				this.makeAbsolute = function(p) {
					if (this.isRelativeCommand()) {
						p.x += this.current.x;
						p.y += this.current.y;
					}
					return p;
				}
				
				this.addMarker = function(p, from, priorTo) {
					// if the last angle isn't filled in because we didn't have this point yet ...
					if (priorTo != null && this.angles.length > 0 && this.angles[this.angles.length-1] == null) {
						this.angles[this.angles.length-1] = this.points[this.points.length-1].angleTo(priorTo);
					}
					this.addMarkerAngle(p, from == null ? null : from.angleTo(p));
				}
				
				this.addMarkerAngle = function(p, a) {
					this.points.push(p);
					this.angles.push(a);
				}				
				
				this.getMarkerPoints = function() { return this.points; }
				this.getMarkerAngles = function() {
					for (var i=0; i<this.angles.length; i++) {
						if (this.angles[i] == null) {
							for (var j=i+1; j<this.angles.length; j++) {
								if (this.angles[j] != null) {
									this.angles[i] = this.angles[j];
									break;
								}
							}
						}
					}
					return this.angles;
				}
			})(d);

			this.path = function(ctx) {
				var pp = this.PathParser;
				pp.reset();

				var bb = new svg.BoundingBox();
				if (ctx != null) ctx.beginPath();
				while (!pp.isEnd()) {
					pp.nextCommand();
					switch (pp.command) {
					case 'M':
					case 'm':
						var p = pp.getAsCurrentPoint();
						pp.addMarker(p);
						bb.addPoint(p.x, p.y);
						if (ctx != null) ctx.moveTo(p.x, p.y);
						pp.start = pp.current;
						while (!pp.isCommandOrEnd()) {
							var p = pp.getAsCurrentPoint();
							pp.addMarker(p, pp.start);
							bb.addPoint(p.x, p.y);
							if (ctx != null) ctx.lineTo(p.x, p.y);
						}
						break;
					case 'L':
					case 'l':
						while (!pp.isCommandOrEnd()) {
							var c = pp.current;
							var p = pp.getAsCurrentPoint();
							pp.addMarker(p, c);
							bb.addPoint(p.x, p.y);
							if (ctx != null) ctx.lineTo(p.x, p.y);
						}
						break;
					case 'H':
					case 'h':
						while (!pp.isCommandOrEnd()) {
							var newP = new svg.Point((pp.isRelativeCommand() ? pp.current.x : 0) + pp.getScalar(), pp.current.y);
							pp.addMarker(newP, pp.current);
							pp.current = newP;
							bb.addPoint(pp.current.x, pp.current.y);
							if (ctx != null) ctx.lineTo(pp.current.x, pp.current.y);
						}
						break;
					case 'V':
					case 'v':
						while (!pp.isCommandOrEnd()) {
							var newP = new svg.Point(pp.current.x, (pp.isRelativeCommand() ? pp.current.y : 0) + pp.getScalar());
							pp.addMarker(newP, pp.current);
							pp.current = newP;
							bb.addPoint(pp.current.x, pp.current.y);
							if (ctx != null) ctx.lineTo(pp.current.x, pp.current.y);
						}
						break;
					case 'C':
					case 'c':
						while (!pp.isCommandOrEnd()) {
							var curr = pp.current;
							var p1 = pp.getPoint();
							var cntrl = pp.getAsControlPoint();
							var cp = pp.getAsCurrentPoint();
							pp.addMarker(cp, cntrl, p1);
							bb.addBezierCurve(curr.x, curr.y, p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
							if (ctx != null) ctx.bezierCurveTo(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
						}
						break;
					case 'S':
					case 's':
						while (!pp.isCommandOrEnd()) {
							var curr = pp.current;
							var p1 = pp.getReflectedControlPoint();
							var cntrl = pp.getAsControlPoint();
							var cp = pp.getAsCurrentPoint();
							pp.addMarker(cp, cntrl, p1);
							bb.addBezierCurve(curr.x, curr.y, p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
							if (ctx != null) ctx.bezierCurveTo(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
						}
						break;
					case 'Q':
					case 'q':
						while (!pp.isCommandOrEnd()) {
							var curr = pp.current;
							var cntrl = pp.getAsControlPoint();
							var cp = pp.getAsCurrentPoint();
							pp.addMarker(cp, cntrl, cntrl);
							bb.addQuadraticCurve(curr.x, curr.y, cntrl.x, cntrl.y, cp.x, cp.y);
							if (ctx != null) ctx.quadraticCurveTo(cntrl.x, cntrl.y, cp.x, cp.y);
						}
						break;
					case 'T':
					case 't':
						while (!pp.isCommandOrEnd()) {
							var curr = pp.current;
							var cntrl = pp.getReflectedControlPoint();
							pp.control = cntrl;
							var cp = pp.getAsCurrentPoint();
							pp.addMarker(cp, cntrl, cntrl);
							bb.addQuadraticCurve(curr.x, curr.y, cntrl.x, cntrl.y, cp.x, cp.y);
							if (ctx != null) ctx.quadraticCurveTo(cntrl.x, cntrl.y, cp.x, cp.y);
						}
						break;
					case 'A':
					case 'a':
						while (!pp.isCommandOrEnd()) {
						    var curr = pp.current;
							var rx = pp.getScalar();
							var ry = pp.getScalar();
							var xAxisRotation = pp.getScalar() * (Math.PI / 180.0);
							var largeArcFlag = pp.getScalar();
							var sweepFlag = pp.getScalar();
							var cp = pp.getAsCurrentPoint();

							// Conversion from endpoint to center parameterization
							// http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
							// x1', y1'
							var currp = new svg.Point(
								Math.cos(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.sin(xAxisRotation) * (curr.y - cp.y) / 2.0,
								-Math.sin(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.cos(xAxisRotation) * (curr.y - cp.y) / 2.0
							);
							// adjust radii
							var l = Math.pow(currp.x,2)/Math.pow(rx,2)+Math.pow(currp.y,2)/Math.pow(ry,2);
							if (l > 1) {
								rx *= Math.sqrt(l);
								ry *= Math.sqrt(l);
							}
							// cx', cy'
							var s = (largeArcFlag == sweepFlag ? -1 : 1) * Math.sqrt(
								((Math.pow(rx,2)*Math.pow(ry,2))-(Math.pow(rx,2)*Math.pow(currp.y,2))-(Math.pow(ry,2)*Math.pow(currp.x,2))) /
								(Math.pow(rx,2)*Math.pow(currp.y,2)+Math.pow(ry,2)*Math.pow(currp.x,2))
							);
							if (isNaN(s)) s = 0;
							var cpp = new svg.Point(s * rx * currp.y / ry, s * -ry * currp.x / rx);
							// cx, cy
							var centp = new svg.Point(
								(curr.x + cp.x) / 2.0 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y,
								(curr.y + cp.y) / 2.0 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y
							);
							// vector magnitude
							var m = function(v) { return Math.sqrt(Math.pow(v[0],2) + Math.pow(v[1],2)); }
							// ratio between two vectors
							var r = function(u, v) { return (u[0]*v[0]+u[1]*v[1]) / (m(u)*m(v)) }
							// angle between two vectors
							var a = function(u, v) { return (u[0]*v[1] < u[1]*v[0] ? -1 : 1) * Math.acos(r(u,v)); }
							// initial angle
							var a1 = a([1,0], [(currp.x-cpp.x)/rx,(currp.y-cpp.y)/ry]);
							// angle delta
							var u = [(currp.x-cpp.x)/rx,(currp.y-cpp.y)/ry];
							var v = [(-currp.x-cpp.x)/rx,(-currp.y-cpp.y)/ry];
							var ad = a(u, v);
							if (r(u,v) <= -1) ad = Math.PI;
							if (r(u,v) >= 1) ad = 0;

							if (sweepFlag == 0 && ad > 0) ad = ad - 2 * Math.PI;
							if (sweepFlag == 1 && ad < 0) ad = ad + 2 * Math.PI;

							// for markers
							var halfWay = new svg.Point(
								centp.x + rx * Math.cos((a1 + (a1 + ad)) / 2),
								centp.y + ry * Math.sin((a1 + (a1 + ad)) / 2)
							);
							pp.addMarkerAngle(halfWay, (a1 + (a1 + ad)) / 2 + (sweepFlag == 0 ? -1 : 1) * Math.PI / 2);
							pp.addMarkerAngle(cp, (a1 + ad) + (sweepFlag == 0 ? -1 : 1) * Math.PI / 2);

							bb.addPoint(cp.x, cp.y); // TODO: this is too naive, make it better
							if (ctx != null) {
								var r = rx > ry ? rx : ry;
								var sx = rx > ry ? 1 : rx / ry;
								var sy = rx > ry ? ry / rx : 1;

								ctx.translate(centp.x, centp.y);
								ctx.rotate(xAxisRotation);
								ctx.scale(sx, sy);
								ctx.arc(0, 0, r, a1, a1 + ad, 1 - sweepFlag);
								ctx.scale(1/sx, 1/sy);
								ctx.rotate(-xAxisRotation);
								ctx.translate(-centp.x, -centp.y);
							}
						}
						break;
					case 'Z':
					case 'z':
						if (ctx != null) ctx.closePath();
						pp.current = pp.start;
					}
				}

				return bb;
			}

			this.getMarkers = function() {
				var points = this.PathParser.getMarkerPoints();
				var angles = this.PathParser.getMarkerAngles();
				
				var markers = [];
				for (var i=0; i<points.length; i++) {
					markers.push([points[i], angles[i]]);
				}
				return markers;
			}
		}
		svg.Element.path.prototype = new svg.Element.PathElementBase;
		
		// pattern element
		svg.Element.pattern = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			this.createPattern = function(ctx, element) {
				// render me using a temporary svg element
				var tempSvg = new svg.Element.svg();
				tempSvg.attributes['viewBox'] = new svg.Property('viewBox', this.attribute('viewBox').value);
				tempSvg.attributes['x'] = new svg.Property('x', this.attribute('x').value);
				tempSvg.attributes['y'] = new svg.Property('y', this.attribute('y').value);
				tempSvg.attributes['width'] = new svg.Property('width', this.attribute('width').value);
				tempSvg.attributes['height'] = new svg.Property('height', this.attribute('height').value);
				tempSvg.children = this.children;
				
				var c = document.createElement('canvas');
				document.body.appendChild(c);
				c.width = this.attribute('width').toPixels('x') + this.attribute('x').toPixels('x');
				c.height = this.attribute('height').toPixels('y')  + this.attribute('y').toPixels('y');
				tempSvg.render(c.getContext('2d'));		
				return ctx.createPattern(c, 'repeat');
			}
		}
		svg.Element.pattern.prototype = new svg.Element.ElementBase;
		
		// marker element
		svg.Element.marker = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			this.baseRender = this.render;
			this.render = function(ctx, point, angle) {
				ctx.translate(point.x, point.y);
				if (this.attribute('orient').valueOrDefault('auto') == 'auto') ctx.rotate(angle);
				if (this.attribute('markerUnits').valueOrDefault('strokeWidth') == 'strokeWidth') ctx.scale(ctx.lineWidth, ctx.lineWidth);
				ctx.save();
							
				// render me using a temporary svg element
				var tempSvg = new svg.Element.svg();
				tempSvg.attributes['viewBox'] = new svg.Property('viewBox', this.attribute('viewBox').value);
				tempSvg.attributes['refX'] = new svg.Property('refX', this.attribute('refX').value);
				tempSvg.attributes['refY'] = new svg.Property('refY', this.attribute('refY').value);
				tempSvg.attributes['width'] = new svg.Property('width', this.attribute('markerWidth').value);
				tempSvg.attributes['height'] = new svg.Property('height', this.attribute('markerHeight').value);
				tempSvg.attributes['fill'] = new svg.Property('fill', this.attribute('fill').valueOrDefault('black'));
				tempSvg.attributes['stroke'] = new svg.Property('stroke', this.attribute('stroke').valueOrDefault('none'));
				tempSvg.children = this.children;
				tempSvg.render(ctx);
				
				ctx.restore();
				if (this.attribute('markerUnits').valueOrDefault('strokeWidth') == 'strokeWidth') ctx.scale(1/ctx.lineWidth, 1/ctx.lineWidth);
				if (this.attribute('orient').valueOrDefault('auto') == 'auto') ctx.rotate(-angle);
				ctx.translate(-point.x, -point.y);
			}
		}
		svg.Element.marker.prototype = new svg.Element.ElementBase;
		
		// definitions element
		svg.Element.defs = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);	
			
			this.render = function(ctx) {
				// NOOP
			}
		}
		svg.Element.defs.prototype = new svg.Element.ElementBase;
		
		// base for gradients
		svg.Element.GradientBase = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			this.gradientUnits = this.attribute('gradientUnits').valueOrDefault('objectBoundingBox');
			
			this.stops = [];			
			for (var i=0; i<this.children.length; i++) {
				var child = this.children[i];
				this.stops.push(child);
			}	
			
			this.getGradient = function() {
				// OVERRIDE ME!
			}			

			this.createGradient = function(ctx, element) {
				var stopsContainer = this;
				if (this.attribute('xlink:href').hasValue()) {
					stopsContainer = this.attribute('xlink:href').getDefinition();
				}
			
				var g = this.getGradient(ctx, element);
				if (g == null) return stopsContainer.stops[stopsContainer.stops.length - 1].color;
				for (var i=0; i<stopsContainer.stops.length; i++) {
					g.addColorStop(stopsContainer.stops[i].offset, stopsContainer.stops[i].color);
				}
				
				if (this.attribute('gradientTransform').hasValue()) {
					// render as transformed pattern on temporary canvas
					var rootView = svg.ViewPort.viewPorts[0];
					
					var rect = new svg.Element.rect();
					rect.attributes['x'] = new svg.Property('x', -svg.MAX_VIRTUAL_PIXELS/3.0);
					rect.attributes['y'] = new svg.Property('y', -svg.MAX_VIRTUAL_PIXELS/3.0);
					rect.attributes['width'] = new svg.Property('width', svg.MAX_VIRTUAL_PIXELS);
					rect.attributes['height'] = new svg.Property('height', svg.MAX_VIRTUAL_PIXELS);
					
					var group = new svg.Element.g();
					group.attributes['transform'] = new svg.Property('transform', this.attribute('gradientTransform').value);
					group.children = [ rect ];
					
					var tempSvg = new svg.Element.svg();
					tempSvg.attributes['x'] = new svg.Property('x', 0);
					tempSvg.attributes['y'] = new svg.Property('y', 0);
					tempSvg.attributes['width'] = new svg.Property('width', rootView.width);
					tempSvg.attributes['height'] = new svg.Property('height', rootView.height);
					tempSvg.children = [ group ];
					
					var c = document.createElement('canvas');
					c.width = rootView.width;
					c.height = rootView.height;
					var tempCtx = c.getContext('2d');
					tempCtx.fillStyle = g;
					tempSvg.render(tempCtx);		
					return tempCtx.createPattern(c, 'no-repeat');
				}
				
				return g;				
			}
		}
		svg.Element.GradientBase.prototype = new svg.Element.ElementBase;
		
		// linear gradient element
		svg.Element.linearGradient = function(node) {
			this.base = svg.Element.GradientBase;
			this.base(node);
			
			this.getGradient = function(ctx, element) {
				var bb = element.getBoundingBox();
				
				var x1 = (this.gradientUnits == 'objectBoundingBox' 
					? bb.x() + bb.width() * this.attribute('x1').numValue() 
					: this.attribute('x1').toPixels('x'));
				var y1 = (this.gradientUnits == 'objectBoundingBox' 
					? bb.y() + bb.height() * this.attribute('y1').numValue()
					: this.attribute('y1').toPixels('y'));
				var x2 = (this.gradientUnits == 'objectBoundingBox' 
					? bb.x() + bb.width() * this.attribute('x2').numValue()
					: this.attribute('x2').toPixels('x'));
				var y2 = (this.gradientUnits == 'objectBoundingBox' 
					? bb.y() + bb.height() * this.attribute('y2').numValue()
					: this.attribute('y2').toPixels('y'));

				if (x1 == x2 && y1 == y2) return null;
				return ctx.createLinearGradient(x1, y1, x2, y2);
			}
		}
		svg.Element.linearGradient.prototype = new svg.Element.GradientBase;
		
		// radial gradient element
		svg.Element.radialGradient = function(node) {
			this.base = svg.Element.GradientBase;
			this.base(node);
			
			this.getGradient = function(ctx, element) {
				var bb = element.getBoundingBox();
				
				if (!this.attribute('cx').hasValue()) this.attribute('cx', true).value = '50%';
				if (!this.attribute('cy').hasValue()) this.attribute('cy', true).value = '50%';
				if (!this.attribute('r').hasValue()) this.attribute('r', true).value = '50%';
				
				var cx = (this.gradientUnits == 'objectBoundingBox' 
					? bb.x() + bb.width() * this.attribute('cx').numValue() 
					: this.attribute('cx').toPixels('x'));
				var cy = (this.gradientUnits == 'objectBoundingBox' 
					? bb.y() + bb.height() * this.attribute('cy').numValue() 
					: this.attribute('cy').toPixels('y'));
				
				var fx = cx;
				var fy = cy;
				if (this.attribute('fx').hasValue()) {
					fx = (this.gradientUnits == 'objectBoundingBox' 
					? bb.x() + bb.width() * this.attribute('fx').numValue() 
					: this.attribute('fx').toPixels('x'));
				}
				if (this.attribute('fy').hasValue()) {
					fy = (this.gradientUnits == 'objectBoundingBox' 
					? bb.y() + bb.height() * this.attribute('fy').numValue() 
					: this.attribute('fy').toPixels('y'));
				}
				
				var r = (this.gradientUnits == 'objectBoundingBox' 
					? (bb.width() + bb.height()) / 2.0 * this.attribute('r').numValue()
					: this.attribute('r').toPixels());
				
				return ctx.createRadialGradient(fx, fy, 0, cx, cy, r);
			}
		}
		svg.Element.radialGradient.prototype = new svg.Element.GradientBase;
		
		// gradient stop element
		svg.Element.stop = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			this.offset = this.attribute('offset').numValue();
			
			var stopColor = this.style('stop-color');
			if (this.style('stop-opacity').hasValue()) stopColor = stopColor.addOpacity(this.style('stop-opacity').value);
			this.color = stopColor.value;
		}
		svg.Element.stop.prototype = new svg.Element.ElementBase;
		
		// animation base element
		svg.Element.AnimateBase = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			svg.Animations.push(this);
			
			this.duration = 0.0;
			this.begin = this.attribute('begin').toMilliseconds();
			this.maxDuration = this.begin + this.attribute('dur').toMilliseconds();
			
			this.getProperty = function() {
				var attributeType = this.attribute('attributeType').value;
				var attributeName = this.attribute('attributeName').value;
				
				if (attributeType == 'CSS') {
					return this.parent.style(attributeName, true);
				}
				return this.parent.attribute(attributeName, true);			
			};
			
			this.initialValue = null;
			this.initialUnits = '';
			this.removed = false;			

			this.calcValue = function() {
				// OVERRIDE ME!
				return '';
			}
					
			this.update = function(delta) {	
				// set initial value
				if (this.initialValue == null) {
					this.initialValue = this.getProperty().value;
					this.initialUnits = this.getProperty().getUnits();
				}
			
				// if we're past the end time
				if (this.duration > this.maxDuration) {
					// loop for indefinitely repeating animations
					if (this.attribute('repeatCount').value == 'indefinite') {
						this.duration = 0.0
					}
					else if (this.attribute('fill').valueOrDefault('remove') == 'remove' && !this.removed) {
						this.removed = true;
						this.getProperty().value = this.initialValue;
						return true;
					}
					else {
						return false; // no updates made
					}
				}			
				this.duration = this.duration + delta;
			
				// if we're past the begin time
				var updated = false;
				if (this.begin < this.duration) {
					var newValue = this.calcValue(); // tween
					
					if (this.attribute('type').hasValue()) {
						// for transform, etc.
						var type = this.attribute('type').value;
						newValue = type + '(' + newValue + ')';
					}
					
					this.getProperty().value = newValue;
					updated = true;
				}
				
				return updated;
			}
			
			this.from = this.attribute('from');
			this.to = this.attribute('to');
			this.values = this.attribute('values');
			if (this.values.hasValue()) this.values.value = this.values.value.split(';');
			
			// fraction of duration we've covered
			this.progress = function() {
				var ret = { progress: (this.duration - this.begin) / (this.maxDuration - this.begin) };
				if (this.values.hasValue()) {
					var p = ret.progress * (this.values.value.length - 1);
					var lb = Math.floor(p), ub = Math.ceil(p);
					ret.from = new svg.Property('from', parseFloat(this.values.value[lb]));
					ret.to = new svg.Property('to', parseFloat(this.values.value[ub]));
					ret.progress = (p - lb) / (ub - lb);
				}
				else {
					ret.from = this.from;
					ret.to = this.to;
				}
				return ret;
			}			
		}
		svg.Element.AnimateBase.prototype = new svg.Element.ElementBase;
		
		// animate element
		svg.Element.animate = function(node) {
			this.base = svg.Element.AnimateBase;
			this.base(node);
			
			this.calcValue = function() {
				var p = this.progress();
				
				// tween value linearly
				var newValue = p.from.numValue() + (p.to.numValue() - p.from.numValue()) * p.progress; 
				return newValue + this.initialUnits;
			};
		}
		svg.Element.animate.prototype = new svg.Element.AnimateBase;
			
		// animate color element
		svg.Element.animateColor = function(node) {
			this.base = svg.Element.AnimateBase;
			this.base(node);

			this.calcValue = function() {
				var p = this.progress();
				var from = new RGBColor(p.from.value);
				var to = new RGBColor(p.to.value);
				
				if (from.ok && to.ok) {
					// tween color linearly
					var r = from.r + (to.r - from.r) * p.progress;
					var g = from.g + (to.g - from.g) * p.progress;
					var b = from.b + (to.b - from.b) * p.progress;
					return 'rgb('+parseInt(r,10)+','+parseInt(g,10)+','+parseInt(b,10)+')';
				}
				return this.attribute('from').value;
			};
		}
		svg.Element.animateColor.prototype = new svg.Element.AnimateBase;
		
		// animate transform element
		svg.Element.animateTransform = function(node) {
			this.base = svg.Element.animate;
			this.base(node);
		}
		svg.Element.animateTransform.prototype = new svg.Element.animate;
		
		// font element
		svg.Element.font = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);

			this.horizAdvX = this.attribute('horiz-adv-x').numValue();			
			
			this.isRTL = false;
			this.isArabic = false;
			this.fontFace = null;
			this.missingGlyph = null;
			this.glyphs = [];			
			for (var i=0; i<this.children.length; i++) {
				var child = this.children[i];
				if (child.type == 'font-face') {
					this.fontFace = child;
					if (child.style('font-family').hasValue()) {
						svg.Definitions[child.style('font-family').value] = this;
					}
				}
				else if (child.type == 'missing-glyph') this.missingGlyph = child;
				else if (child.type == 'glyph') {
					if (child.arabicForm != '') {
						this.isRTL = true;
						this.isArabic = true;
						if (typeof(this.glyphs[child.unicode]) == 'undefined') this.glyphs[child.unicode] = [];
						this.glyphs[child.unicode][child.arabicForm] = child;
					}
					else {
						this.glyphs[child.unicode] = child;
					}
				}
			}	
		}
		svg.Element.font.prototype = new svg.Element.ElementBase;
		
		// font-face element
		svg.Element.fontface = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);	
			
			this.ascent = this.attribute('ascent').value;
			this.descent = this.attribute('descent').value;
			this.unitsPerEm = this.attribute('units-per-em').numValue();				
		}
		svg.Element.fontface.prototype = new svg.Element.ElementBase;
		
		// missing-glyph element
		svg.Element.missingglyph = function(node) {
			this.base = svg.Element.path;
			this.base(node);	
			
			this.horizAdvX = 0;
		}
		svg.Element.missingglyph.prototype = new svg.Element.path;
		
		// glyph element
		svg.Element.glyph = function(node) {
			this.base = svg.Element.path;
			this.base(node);	
			
			this.horizAdvX = this.attribute('horiz-adv-x').numValue();
			this.unicode = this.attribute('unicode').value;
			this.arabicForm = this.attribute('arabic-form').value;
		}
		svg.Element.glyph.prototype = new svg.Element.path;
		
		// text element
		svg.Element.text = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			if (node != null) {
				// add children
				this.children = [];
				for (var i=0; i<node.childNodes.length; i++) {
					var childNode = node.childNodes[i];
					if (childNode.nodeType == 1) { // capture tspan and tref nodes
						this.addChild(childNode, true);
					}
					else if (childNode.nodeType == 3) { // capture text
						this.addChild(new svg.Element.tspan(childNode), false);
					}
				}
			}
			
			this.baseSetContext = this.setContext;
			this.setContext = function(ctx) {
				this.baseSetContext(ctx);
				if (this.style('dominant-baseline').hasValue()) ctx.textBaseline = this.style('dominant-baseline').value;
				if (this.style('alignment-baseline').hasValue()) ctx.textBaseline = this.style('alignment-baseline').value;
			}
			
			this.renderChildren = function(ctx) {
				var textAnchor = this.style('text-anchor').valueOrDefault('start');
				var x = this.attribute('x').toPixels('x');
				var y = this.attribute('y').toPixels('y');
				for (var i=0; i<this.children.length; i++) {
					var child = this.children[i];
				
					if (child.attribute('x').hasValue()) {
						child.x = child.attribute('x').toPixels('x');
					}
					else {
						if (this.attribute('dx').hasValue()) y += this.attribute('dx').toPixels('x');
						if (child.attribute('dx').hasValue()) x += child.attribute('dx').toPixels('x');
						child.x = x;
					}
					
					var childLength = child.measureText(ctx);
					if (textAnchor != 'start' && (i==0 || child.attribute('x').hasValue())) { // new group?
						// loop through rest of children
						var groupLength = childLength;
						for (var j=i+1; j<this.children.length; j++) {
							var childInGroup = this.children[j];
							if (childInGroup.attribute('x').hasValue()) break; // new group
							groupLength += childInGroup.measureText(ctx);
						}
						child.x -= (textAnchor == 'end' ? groupLength : groupLength / 2.0);
					}
					x = child.x + childLength;
					
					if (child.attribute('y').hasValue()) {
						child.y = child.attribute('y').toPixels('y');
					}
					else {
						if (this.attribute('dy').hasValue()) y += this.attribute('dy').toPixels('y');
						if (child.attribute('dy').hasValue()) y += child.attribute('dy').toPixels('y');
						child.y = y;
					}	
					y = child.y;
					
					child.render(ctx);
				}
			}
		}
		svg.Element.text.prototype = new svg.Element.RenderedElementBase;
		
		// text base
		svg.Element.TextElementBase = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			this.getGlyph = function(font, text, i) {
				var c = text[i];
				var glyph = null;
				if (font.isArabic) {
					var arabicForm = 'isolated';
					if ((i==0 || text[i-1]==' ') && i<text.length-2 && text[i+1]!=' ') arabicForm = 'terminal'; 
					if (i>0 && text[i-1]!=' ' && i<text.length-2 && text[i+1]!=' ') arabicForm = 'medial';
					if (i>0 && text[i-1]!=' ' && (i == text.length-1 || text[i+1]==' ')) arabicForm = 'initial';
					if (typeof(font.glyphs[c]) != 'undefined') {
						glyph = font.glyphs[c][arabicForm];
						if (glyph == null && font.glyphs[c].type == 'glyph') glyph = font.glyphs[c];
					}
				}
				else {
					glyph = font.glyphs[c];
				}
				if (glyph == null) glyph = font.missingGlyph;
				return glyph;
			}
			
			this.renderChildren = function(ctx) {
				var customFont = this.parent.style('font-family').getDefinition();
				if (customFont != null) {
					var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);
					var fontStyle = this.parent.style('font-style').valueOrDefault(svg.Font.Parse(svg.ctx.font).fontStyle);
					var text = this.getText();
					if (customFont.isRTL) text = text.split("").reverse().join("");
					
					var dx = svg.ToNumberArray(this.parent.attribute('dx').value);
					for (var i=0; i<text.length; i++) {
						var glyph = this.getGlyph(customFont, text, i);
						var scale = fontSize / customFont.fontFace.unitsPerEm;
						ctx.translate(this.x, this.y);
						ctx.scale(scale, -scale);
						var lw = ctx.lineWidth;
						ctx.lineWidth = ctx.lineWidth * customFont.fontFace.unitsPerEm / fontSize;
						if (fontStyle == 'italic') ctx.transform(1, 0, .4, 1, 0, 0);
						glyph.render(ctx);
						if (fontStyle == 'italic') ctx.transform(1, 0, -.4, 1, 0, 0);
						ctx.lineWidth = lw;
						ctx.scale(1/scale, -1/scale);
						ctx.translate(-this.x, -this.y);	
						
						this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / customFont.fontFace.unitsPerEm;
						if (typeof(dx[i]) != 'undefined' && !isNaN(dx[i])) {
							this.x += dx[i];
						}
					}
					return;
				}
			
				if (ctx.strokeStyle != '') ctx.strokeText(svg.compressSpaces(this.getText()), this.x, this.y);
				if (ctx.fillStyle != '') ctx.fillText(svg.compressSpaces(this.getText()), this.x, this.y);
			}
			
			this.getText = function() {
				// OVERRIDE ME
			}
			
			this.measureText = function(ctx) {
				var customFont = this.parent.style('font-family').getDefinition();
				if (customFont != null) {
					var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);
					var measure = 0;
					var text = this.getText();
					if (customFont.isRTL) text = text.split("").reverse().join("");
					var dx = svg.ToNumberArray(this.parent.attribute('dx').value);
					for (var i=0; i<text.length; i++) {
						var glyph = this.getGlyph(customFont, text, i);
						measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;
						if (typeof(dx[i]) != 'undefined' && !isNaN(dx[i])) {
							measure += dx[i];
						}
					}
					return measure;
				}
			
				var textToMeasure = svg.compressSpaces(this.getText());
				if (!ctx.measureText) return textToMeasure.length * 10;
				
				ctx.save();
				this.setContext(ctx);
				var width = ctx.measureText(textToMeasure).width;
				ctx.restore();
				return width;
			}
		}
		svg.Element.TextElementBase.prototype = new svg.Element.RenderedElementBase;
		
		// tspan 
		svg.Element.tspan = function(node) {
			this.base = svg.Element.TextElementBase;
			this.base(node);
			
			this.text = node.nodeType == 3 ? node.nodeValue : // text
						node.childNodes.length > 0 ? node.childNodes[0].nodeValue : // element
						node.text;
			this.getText = function() {
				return this.text;
			}
		}
		svg.Element.tspan.prototype = new svg.Element.TextElementBase;
		
		// tref
		svg.Element.tref = function(node) {
			this.base = svg.Element.TextElementBase;
			this.base(node);
			
			this.getText = function() {
				var element = this.attribute('xlink:href').getDefinition();
				if (element != null) return element.children[0].getText();
			}
		}
		svg.Element.tref.prototype = new svg.Element.TextElementBase;		
		
		// a element
		svg.Element.a = function(node) {
			this.base = svg.Element.TextElementBase;
			this.base(node);
			
			this.hasText = true;
			for (var i=0; i<node.childNodes.length; i++) {
				if (node.childNodes[i].nodeType != 3) this.hasText = false;
			}
			
			// this might contain text
			this.text = this.hasText ? node.childNodes[0].nodeValue : '';
			this.getText = function() {
				return this.text;
			}		

			this.baseRenderChildren = this.renderChildren;
			this.renderChildren = function(ctx) {
				if (this.hasText) {
					// render as text element
					this.baseRenderChildren(ctx);
					var fontSize = new svg.Property('fontSize', svg.Font.Parse(svg.ctx.font).fontSize);
					svg.Mouse.checkBoundingBox(this, new svg.BoundingBox(this.x, this.y - fontSize.toPixels('y'), this.x + this.measureText(ctx), this.y));					
				}
				else {
					// render as temporary group
					var g = new svg.Element.g();
					g.children = this.children;
					g.parent = this;
					g.render(ctx);
				}
			}
			
			this.onclick = function() {
				window.open(this.attribute('xlink:href').value);
			}
			
			this.onmousemove = function() {
				svg.ctx.canvas.style.cursor = 'pointer';
			}
		}
		svg.Element.a.prototype = new svg.Element.TextElementBase;		
		
		// image element
		svg.Element.image = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			var href = this.attribute('xlink:href').value;
			var isSvg = href.match(/\.svg$/)
			
			svg.Images.push(this);
			this.loaded = false;
			if (!isSvg) {
				this.img = document.createElement('img');
				var self = this;
				this.img.onload = function() { self.loaded = true; }
				this.img.onerror = function() { if (console) console.log('ERROR: image "' + href + '" not found'); self.loaded = true; }
				this.img.src = href;
			}
			else {
				this.img = svg.ajax(href);
				this.loaded = true;
			}
			
			this.renderChildren = function(ctx) {
				var x = this.attribute('x').toPixels('x');
				var y = this.attribute('y').toPixels('y');
				
				var width = this.attribute('width').toPixels('x');
				var height = this.attribute('height').toPixels('y');			
				if (width == 0 || height == 0) return;
			
				ctx.save();
				if (isSvg) {
					ctx.drawSvg(this.img, x, y, width, height);
				}
				else {
					ctx.translate(x, y);
					svg.AspectRatio(ctx,
									this.attribute('preserveAspectRatio').value,
									width,
									this.img.width,
									height,
									this.img.height,
									0,
									0);	
					ctx.drawImage(this.img, 0, 0);		
				}
				ctx.restore();
			}
		}
		svg.Element.image.prototype = new svg.Element.RenderedElementBase;
		
		// group element
		svg.Element.g = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			this.getBoundingBox = function() {
				var bb = new svg.BoundingBox();
				for (var i=0; i<this.children.length; i++) {
					bb.addBoundingBox(this.children[i].getBoundingBox());
				}
				return bb;
			};
		}
		svg.Element.g.prototype = new svg.Element.RenderedElementBase;

		// symbol element
		svg.Element.symbol = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			this.baseSetContext = this.setContext;
			this.setContext = function(ctx) {		
				this.baseSetContext(ctx);
				
				// viewbox
				if (this.attribute('viewBox').hasValue()) {				
					var viewBox = svg.ToNumberArray(this.attribute('viewBox').value);
					var minX = viewBox[0];
					var minY = viewBox[1];
					width = viewBox[2];
					height = viewBox[3];
					
					svg.AspectRatio(ctx,
									this.attribute('preserveAspectRatio').value, 
									this.attribute('width').toPixels('x'),
									width,
									this.attribute('height').toPixels('y'),
									height,
									minX,
									minY);

					svg.ViewPort.SetCurrent(viewBox[2], viewBox[3]);						
				}
			}			
		}
		svg.Element.symbol.prototype = new svg.Element.RenderedElementBase;		
			
		// style element
		svg.Element.style = function(node) { 
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			// text, or spaces then CDATA
			var css = node.childNodes[0].nodeValue + (node.childNodes.length > 1 ? node.childNodes[1].nodeValue : '');
			css = css.replace(/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm, ''); // remove comments
			css = svg.compressSpaces(css); // replace whitespace
			var cssDefs = css.split('}');
			for (var i=0; i<cssDefs.length; i++) {
				if (svg.trim(cssDefs[i]) != '') {
					var cssDef = cssDefs[i].split('{');
					var cssClasses = cssDef[0].split(',');
					var cssProps = cssDef[1].split(';');
					for (var j=0; j<cssClasses.length; j++) {
						var cssClass = svg.trim(cssClasses[j]);
						if (cssClass != '') {
							var props = {};
							for (var k=0; k<cssProps.length; k++) {
								var prop = cssProps[k].indexOf(':');
								var name = cssProps[k].substr(0, prop);
								var value = cssProps[k].substr(prop + 1, cssProps[k].length - prop);
								if (name != null && value != null) {
									props[svg.trim(name)] = new svg.Property(svg.trim(name), svg.trim(value));
								}
							}
							svg.Styles[cssClass] = props;
							if (cssClass == '@font-face') {
								var fontFamily = props['font-family'].value.replace(/"/g,'');
								var srcs = props['src'].value.split(',');
								for (var s=0; s<srcs.length; s++) {
									if (srcs[s].indexOf('format("svg")') > 0) {
										var urlStart = srcs[s].indexOf('url');
										var urlEnd = srcs[s].indexOf(')', urlStart);
										var url = srcs[s].substr(urlStart + 5, urlEnd - urlStart - 6);
										var doc = svg.parseXml(svg.ajax(url));
										var fonts = doc.getElementsByTagName('font');
										for (var f=0; f<fonts.length; f++) {
											var font = svg.CreateElement(fonts[f]);
											svg.Definitions[fontFamily] = font;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		svg.Element.style.prototype = new svg.Element.ElementBase;
		
		// use element 
		svg.Element.use = function(node) {
			this.base = svg.Element.RenderedElementBase;
			this.base(node);
			
			this.baseSetContext = this.setContext;
			this.setContext = function(ctx) {
				this.baseSetContext(ctx);
				if (this.attribute('x').hasValue()) ctx.translate(this.attribute('x').toPixels('x'), 0);
				if (this.attribute('y').hasValue()) ctx.translate(0, this.attribute('y').toPixels('y'));
			}
			
			this.getDefinition = function() {
				var element = this.attribute('xlink:href').getDefinition();
				if (this.attribute('width').hasValue()) element.attribute('width', true).value = this.attribute('width').value;
				if (this.attribute('height').hasValue()) element.attribute('height', true).value = this.attribute('height').value;
				return element;
			}
			
			this.path = function(ctx) {
				var element = this.getDefinition();
				if (element != null) element.path(ctx);
			}
			
			this.renderChildren = function(ctx) {
				var element = this.getDefinition();
				if (element != null) {
					// temporarily detach from parent and render
					var oldParent = element.parent;
					element.parent = null;
					element.render(ctx);
					element.parent = oldParent;
				}
			}
		}
		svg.Element.use.prototype = new svg.Element.RenderedElementBase;
		
		// mask element
		svg.Element.mask = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
						
			this.apply = function(ctx, element) {
				// render as temp svg	
				var x = this.attribute('x').toPixels('x');
				var y = this.attribute('y').toPixels('y');
				var width = this.attribute('width').toPixels('x');
				var height = this.attribute('height').toPixels('y');
				
				// temporarily remove mask to avoid recursion
				var mask = element.attribute('mask').value;
				element.attribute('mask').value = '';
				
					var cMask = document.createElement('canvas');
					cMask.width = x + width;
					cMask.height = y + height;
					var maskCtx = cMask.getContext('2d');
					this.renderChildren(maskCtx);
				
					var c = document.createElement('canvas');
					c.width = x + width;
					c.height = y + height;
					var tempCtx = c.getContext('2d');
					element.render(tempCtx);
					tempCtx.globalCompositeOperation = 'destination-in';
					tempCtx.fillStyle = maskCtx.createPattern(cMask, 'no-repeat');
					tempCtx.fillRect(0, 0, x + width, y + height);
					
					ctx.fillStyle = tempCtx.createPattern(c, 'no-repeat');
					ctx.fillRect(0, 0, x + width, y + height);
					
				// reassign mask
				element.attribute('mask').value = mask;	
			}
			
			this.render = function(ctx) {
				// NO RENDER
			}
		}
		svg.Element.mask.prototype = new svg.Element.ElementBase;
		
		// clip element
		svg.Element.clipPath = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
			
			this.apply = function(ctx) {
				for (var i=0; i<this.children.length; i++) {
					if (this.children[i].path) {
						this.children[i].path(ctx);
						ctx.clip();
					}
				}
			}
			
			this.render = function(ctx) {
				// NO RENDER
			}
		}
		svg.Element.clipPath.prototype = new svg.Element.ElementBase;

		// filters
		svg.Element.filter = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);
						
			this.apply = function(ctx, element) {
				// render as temp svg	
				var bb = element.getBoundingBox();
				var x = this.attribute('x').toPixels('x');
				var y = this.attribute('y').toPixels('y');
				if (x == 0 || y == 0) {
					x = bb.x1;
					y = bb.y1;
				}
				var width = this.attribute('width').toPixels('x');
				var height = this.attribute('height').toPixels('y');
				if (width == 0 || height == 0) {
					width = bb.width();
					height = bb.height();
				}
				
				// temporarily remove filter to avoid recursion
				var filter = element.style('filter').value;
				element.style('filter').value = '';
				
				// max filter distance
				var extraPercent = .20;
				var px = extraPercent * width;
				var py = extraPercent * height;
				
				var c = document.createElement('canvas');
				c.width = width + 2*px;
				c.height = height + 2*py;
				var tempCtx = c.getContext('2d');
				tempCtx.translate(-x + px, -y + py);
				element.render(tempCtx);
			
				// apply filters
				for (var i=0; i<this.children.length; i++) {
					this.children[i].apply(tempCtx, 0, 0, width + 2*px, height + 2*py);
				}
				
				// render on me
				ctx.drawImage(c, 0, 0, width + 2*px, height + 2*py, x - px, y - py, width + 2*px, height + 2*py);
				
				// reassign filter
				element.style('filter', true).value = filter;	
			}
			
			this.render = function(ctx) {
				// NO RENDER
			}		
		}
		svg.Element.filter.prototype = new svg.Element.ElementBase;
		
		svg.Element.feGaussianBlur = function(node) {
			this.base = svg.Element.ElementBase;
			this.base(node);	
			
			function make_fgauss(sigma) {
				sigma = Math.max(sigma, 0.01);			      
				var len = Math.ceil(sigma * 4.0) + 1;                     
				mask = [];                               
				for (var i = 0; i < len; i++) {                             
					mask[i] = Math.exp(-0.5 * (i / sigma) * (i / sigma));                                           
				}                                                           
				return mask; 
			}
			
			function normalize(mask) {
				var sum = 0;
				for (var i = 1; i < mask.length; i++) {
					sum += Math.abs(mask[i]);
				}
				sum = 2 * sum + Math.abs(mask[0]);
				for (var i = 0; i < mask.length; i++) {
					mask[i] /= sum;
				}
				return mask;
			}
			
			function convolve_even(src, dst, mask, width, height) {
			  for (var y = 0; y < height; y++) {
				for (var x = 0; x < width; x++) {
				  var a = imGet(src, x, y, width, height, 3)/255;
				  for (var rgba = 0; rgba < 4; rgba++) {					  
					  var sum = mask[0] * (a==0?255:imGet(src, x, y, width, height, rgba)) * (a==0||rgba==3?1:a);
					  for (var i = 1; i < mask.length; i++) {
						var a1 = imGet(src, Math.max(x-i,0), y, width, height, 3)/255;
					    var a2 = imGet(src, Math.min(x+i, width-1), y, width, height, 3)/255;
						sum += mask[i] * 
						  ((a1==0?255:imGet(src, Math.max(x-i,0), y, width, height, rgba)) * (a1==0||rgba==3?1:a1) + 
						   (a2==0?255:imGet(src, Math.min(x+i, width-1), y, width, height, rgba)) * (a2==0||rgba==3?1:a2));
					  }
					  imSet(dst, y, x, height, width, rgba, sum);
				  }			  
				}
			  }
			}		

			function imGet(img, x, y, width, height, rgba) {
				return img[y*width*4 + x*4 + rgba];
			}
			
			function imSet(img, x, y, width, height, rgba, val) {
				img[y*width*4 + x*4 + rgba] = val;
			}
						
			function blur(ctx, width, height, sigma)
			{
				var srcData = ctx.getImageData(0, 0, width, height);
				var mask = make_fgauss(sigma);
				mask = normalize(mask);
				tmp = [];
				convolve_even(srcData.data, tmp, mask, width, height);
				convolve_even(tmp, srcData.data, mask, height, width);
				ctx.clearRect(0, 0, width, height);
				ctx.putImageData(srcData, 0, 0);
			}			
		
			this.apply = function(ctx, x, y, width, height) {
				// assuming x==0 && y==0 for now
				blur(ctx, width, height, this.attribute('stdDeviation').numValue());
			}
		}
		svg.Element.filter.prototype = new svg.Element.feGaussianBlur;
		
		// title element, do nothing
		svg.Element.title = function(node) {
		}
		svg.Element.title.prototype = new svg.Element.ElementBase;

		// desc element, do nothing
		svg.Element.desc = function(node) {
		}
		svg.Element.desc.prototype = new svg.Element.ElementBase;		
		
		svg.Element.MISSING = function(node) {
			if (console) console.log('ERROR: Element \'' + node.nodeName + '\' not yet implemented.');
		}
		svg.Element.MISSING.prototype = new svg.Element.ElementBase;
		
		// element factory
		svg.CreateElement = function(node) {	
			var className = node.nodeName.replace(/^[^:]+:/,''); // remove namespace
			className = className.replace(/\-/g,''); // remove dashes
			var e = null;
			if (typeof(svg.Element[className]) != 'undefined') {
				e = new svg.Element[className](node);
			}
			else {
				e = new svg.Element.MISSING(node);
			}

			e.type = node.nodeName;
			return e;
		}
				
		// load from url
		svg.load = function(ctx, url) {
			svg.loadXml(ctx, svg.ajax(url));
		}
		
		// load from xml
		svg.loadXml = function(ctx, xml) {
			svg.loadXmlDoc(ctx, svg.parseXml(xml));
		}
		
		svg.loadXmlDoc = function(ctx, dom) {
			svg.init(ctx);
			
			var mapXY = function(p) {
				var e = ctx.canvas;
				while (e) {
					p.x -= e.offsetLeft;
					p.y -= e.offsetTop;
					e = e.offsetParent;
				}
				if (window.scrollX) p.x += window.scrollX;
				if (window.scrollY) p.y += window.scrollY;
				return p;
			}
			
			// bind mouse
			if (svg.opts['ignoreMouse'] != true) {
				ctx.canvas.onclick = function(e) {
					var p = mapXY(new svg.Point(e != null ? e.clientX : event.clientX, e != null ? e.clientY : event.clientY));
					svg.Mouse.onclick(p.x, p.y);
				};
				ctx.canvas.onmousemove = function(e) {
					var p = mapXY(new svg.Point(e != null ? e.clientX : event.clientX, e != null ? e.clientY : event.clientY));
					svg.Mouse.onmousemove(p.x, p.y);
				};
			}
		
			var e = svg.CreateElement(dom.documentElement);
			e.root = true;
					
			// render loop
			var isFirstRender = true;
			var draw = function() {
				svg.ViewPort.Clear();
				if (ctx.canvas.parentNode) svg.ViewPort.SetCurrent(ctx.canvas.parentNode.clientWidth, ctx.canvas.parentNode.clientHeight);
			
				if (svg.opts['ignoreDimensions'] != true) {
					// set canvas size
					if (e.style('width').hasValue()) {
						ctx.canvas.width = e.style('width').toPixels('x');
						ctx.canvas.style.width = ctx.canvas.width + 'px';
					}
					if (e.style('height').hasValue()) {
						ctx.canvas.height = e.style('height').toPixels('y');
						ctx.canvas.style.height = ctx.canvas.height + 'px';
					}
				}
				var cWidth = ctx.canvas.clientWidth || ctx.canvas.width;
				var cHeight = ctx.canvas.clientHeight || ctx.canvas.height;
				if (svg.opts['ignoreDimensions'] == true && e.style('width').hasValue() && e.style('height').hasValue()) {
					cWidth = e.style('width').toPixels('x');
					cHeight = e.style('height').toPixels('y');
				}
				svg.ViewPort.SetCurrent(cWidth, cHeight);		
				
				if (svg.opts['offsetX'] != null) e.attribute('x', true).value = svg.opts['offsetX'];
				if (svg.opts['offsetY'] != null) e.attribute('y', true).value = svg.opts['offsetY'];
				if (svg.opts['scaleWidth'] != null && svg.opts['scaleHeight'] != null) {
					var xRatio = 1, yRatio = 1, viewBox = svg.ToNumberArray(e.attribute('viewBox').value);
					if (e.attribute('width').hasValue()) xRatio = e.attribute('width').toPixels('x') / svg.opts['scaleWidth'];
					else if (!isNaN(viewBox[2])) xRatio = viewBox[2] / svg.opts['scaleWidth'];
					if (e.attribute('height').hasValue()) yRatio = e.attribute('height').toPixels('y') / svg.opts['scaleHeight'];
					else if (!isNaN(viewBox[3])) yRatio = viewBox[3] / svg.opts['scaleHeight'];
					
					e.attribute('width', true).value = svg.opts['scaleWidth'];
					e.attribute('height', true).value = svg.opts['scaleHeight'];			
					e.attribute('viewBox', true).value = '0 0 ' + (cWidth * xRatio) + ' ' + (cHeight * yRatio);
					e.attribute('preserveAspectRatio', true).value = 'none';
				}
			
				// clear and render
				if (svg.opts['ignoreClear'] != true) {
					ctx.clearRect(0, 0, cWidth, cHeight);
				}
				e.render(ctx);
				if (isFirstRender) {
					isFirstRender = false;
					if (typeof(svg.opts['renderCallback']) == 'function') svg.opts['renderCallback']();
				}			
			}
			
			var waitingForImages = true;
			if (svg.ImagesLoaded()) {
				waitingForImages = false;
				draw();
			}
			svg.intervalID = setInterval(function() { 
				var needUpdate = false;
				
				if (waitingForImages && svg.ImagesLoaded()) {
					waitingForImages = false;
					needUpdate = true;
				}
			
				// need update from mouse events?
				if (svg.opts['ignoreMouse'] != true) {
					needUpdate = needUpdate | svg.Mouse.hasEvents();
				}
			
				// need update from animations?
				if (svg.opts['ignoreAnimation'] != true) {
					for (var i=0; i<svg.Animations.length; i++) {
						needUpdate = needUpdate | svg.Animations[i].update(1000 / svg.FRAMERATE);
					}
				}
				
				// need update from redraw?
				if (typeof(svg.opts['forceRedraw']) == 'function') {
					if (svg.opts['forceRedraw']() == true) needUpdate = true;
				}
				
				// render if needed
				if (needUpdate) {
					draw();				
					svg.Mouse.runEvents(); // run and clear our events
				}
			}, 1000 / svg.FRAMERATE);
		}
		
		svg.stop = function() {
			if (svg.intervalID) {
				clearInterval(svg.intervalID);
			}
		}
		
		svg.Mouse = new (function() {
			this.events = [];
			this.hasEvents = function() { return this.events.length != 0; }
		
			this.onclick = function(x, y) {
				this.events.push({ type: 'onclick', x: x, y: y, 
					run: function(e) { if (e.onclick) e.onclick(); }
				});
			}
			
			this.onmousemove = function(x, y) {
				this.events.push({ type: 'onmousemove', x: x, y: y,
					run: function(e) { if (e.onmousemove) e.onmousemove(); }
				});
			}			
			
			this.eventElements = [];
			
			this.checkPath = function(element, ctx) {
				for (var i=0; i<this.events.length; i++) {
					var e = this.events[i];
					if (ctx.isPointInPath && ctx.isPointInPath(e.x, e.y)) this.eventElements[i] = element;
				}
			}
			
			this.checkBoundingBox = function(element, bb) {
				for (var i=0; i<this.events.length; i++) {
					var e = this.events[i];
					if (bb.isPointInBox(e.x, e.y)) this.eventElements[i] = element;
				}			
			}
			
			this.runEvents = function() {
				svg.ctx.canvas.style.cursor = '';
				
				for (var i=0; i<this.events.length; i++) {
					var e = this.events[i];
					var element = this.eventElements[i];
					while (element) {
						e.run(element);
						element = element.parent;
					}
				}		
			
				// done running, clear
				this.events = []; 
				this.eventElements = [];
			}
		});
		
		return svg;
	}
})();

if (CanvasRenderingContext2D) {
	CanvasRenderingContext2D.prototype.drawSvg = function(s, dx, dy, dw, dh) {
		canvg(this.canvas, s, { 
			ignoreMouse: true, 
			ignoreAnimation: true, 
			ignoreDimensions: true, 
			ignoreClear: true, 
			offsetX: dx, 
			offsetY: dy, 
			scaleWidth: dw, 
			scaleHeight: dh
		});
	}
}
jQuery.sap.declare('sap.viz.library-all');
jQuery.sap.declare('sap.viz.libs.rgbcolor'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.viz.ui5.container.libs.common.libs.rgbcolor.rgbcolor_static'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.viz.libs.canvg'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.viz.ui5.VizContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.VizContainerRenderer");

/**
 * @class VizContainer renderer.
 * @static
 */
sap.viz.ui5.VizContainerRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.viz.ui5.VizContainerRenderer.render = function(oRm, oControl) {

	// write the HTML into the render manager
	// oRm.write("<DIV>This is sap.viz.ui5.VizContainer</DIV>");
	oRm.write("<DIV");
	oRm.writeControlData(oControl);

	oRm.addClass("sapVizContainer");
	oRm.writeClasses();
	if (oControl.getWidth()) {
		oRm.addStyle("width", oControl.getWidth());
	} else {
		oRm.addStyle("width", "100%");
	}
	if (oControl.getHeight()) {
		oRm.addStyle("height", oControl.getHeight());
	} else {
		oRm.addStyle("height", "100%");
	}
	oRm.writeStyles();
	oRm.write(">");

	oRm.write("</DIV>");
};
}; // end of sap/viz/ui5/VizContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.api.env.Format') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.viz.ui5.api.env.Format');

/**
 * @class Provides methods set global formatter for VizFrame. 
 *
 * As <code>Format</code> is a static class, a <code>jQuery.sap.require("sap.viz.ui5.api.env.Format");</code> statement
 * must be explicitly executed before the class can be used. Example:
 * <pre>
 *   jQuery.sap.require("sap.viz.ui5.api.env.Format");
 * </pre>
 *
 * @static
 * @public
 * @since 1.24.0
 */
sap.viz.ui5.api.env.Format = {};

/**
 * Customize the global numeric formatter. If you set a formatter, it will
 * replace the existing formatter.
 * 
 * 
 * Example:
 * <pre>
 * var customerFormatter = {
 *     format : function(value, pattern) {
 *         // add your codes here to convert number value to formatted string
 *         // according to the pattern string
 *         return formattedString;
 *     }
 * };
 * sap.viz.ui5.api.env.Format.numericFormatter(customerFormatter);
 * </pre>
 * 
 * @param {function}
 *            formatter
 * @returns {sap.viz.ui5.api.env.Format}
 * @public
 * @function sap.viz.ui5.api.env.Format.numericFormatter
 */
sap.viz.ui5.api.env.Format.numericFormatter = function(formatter) {
	return sap.viz.api.env.Format.numericFormatter.apply(null, arguments);
};


}; // end of sap/viz/ui5/api/env/Format.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.PopoverRenderer') ) {
/*
 * Copyright (C) 2009-2013 SAP BOBJ or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.viz.ui5.controls.PopoverRenderer");

/**
 * @class Chart Popover Renderer.
 * @static
 */
sap.viz.ui5.controls.PopoverRenderer = {

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    render: function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.writeClasses();
        oRm.writeStyles();
        oRm.write('>');      
        oRm.write('</div>');
    }
};

}; // end of sap/viz/ui5/controls/PopoverRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.ResponsiveLegend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.viz.ui5.controls.ResponsiveLegend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/viz/ui5/controls/ResponsiveLegend",[],
  function(){
    /**
     * Contructor for ResponsiveLegend - must not be used: To get a ResponsiveLegend instance, please use VizFrame.getResponsiveLegend.
     * 
     * @deprecated Since 1.27.
     * @name sap.viz.ui5.controls.ResponsiveLegend
     */
    var ResponsiveLegend = function(){
      //Do not use the constructor
      throw new Error();
    };
    
    ResponsiveLegend.createInstance = function(oControl){
        var oResponsiveLegendControl = jQuery.sap.newObject(this.prototype);
        oResponsiveLegendControl._oLegendControl = oControl;
        return oResponsiveLegendControl;
    };
    
    ResponsiveLegend.prototype._oLegendControl = undefined;
    
    ResponsiveLegend.prototype.show = function(){    
    };
    
    ResponsiveLegend.prototype.hide = function(){
    };
    
    ResponsiveLegend.prototype.setOpenBy = function(openBy){
    };
    
    return ResponsiveLegend;
}, true);
}; // end of sap/viz/ui5/controls/ResponsiveLegend.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.VizFrameRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.controls.VizFrameRenderer");

/**
 * @class VizFrame renderer.
 * @static
 */
sap.viz.ui5.controls.VizFrameRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.viz.ui5.controls.VizFrameRenderer.render = function(oRm, oControl){		
	// write the HTML into the render manager
	oRm.write("<DIV");
	oRm.writeControlData(oControl);
	
	oRm.addClass("sapVizFrame");
	oRm.writeClasses();
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	oRm.writeStyles();	
	oRm.write(">");
	
	oRm.write("</DIV>");
};

}; // end of sap/viz/ui5/controls/VizFrameRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.common.BaseControlRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.controls.common.BaseControlRenderer");

/**
 * @class BaseControl renderer.
 * @static
 */
sap.viz.ui5.controls.common.BaseControlRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.viz.ui5.controls.common.BaseControlRenderer.render = function(oRm, oControl){
};

}; // end of sap/viz/ui5/controls/common/BaseControlRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.common.helpers.VizControlsHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.viz.ui5.controls.common.helpers.VizControlsHelper');

sap.viz.ui5.controls.common.helpers.VizControlsHelper = {};

sap.viz.ui5.controls.common.helpers.VizControlsHelper.getFeedInstances = function(feeds) {
    if (feeds) {
        return sap.viz.ui5.controls.common.feeds.FeedItem.toInstances(feeds);
    } else {
        return [];
    }
};

sap.viz.ui5.controls.common.helpers.VizControlsHelper.updateAxis = function(dimensions, vizType, feeds) {
    if (!feeds || feeds.length === 0 || !dimensions || dimensions.length === 0) {
        return;
    }
    // Map of dimensions
    var dimMap = {};
    dimensions.forEach(function(dim) {
        dimMap[dim.getName()] = dim;
    });
    // Map of feed definations
    var feedDefsMap = sap.viz.ui5.controls.common.helpers.VizControlsHelper._getFeedDefsMap(vizType);

    // Travesal
    feeds.forEach(function(feed) {
    	var def = feedDefsMap[feed.getUid()];
    	if (def.type !== 'Dimension') {
    		return;
    	}
        var aaIndex = def.aaIndex;
        feed.getAnalysisObjects().forEach(function(analysisObject) {
            var dim = dimMap[analysisObject.getName()];
            if (dim) {
                dim.setProperty('axis', aaIndex, true);
            }
        });
    });
};

/**
 * Used in VizContainer only
 */
sap.viz.ui5.controls.common.helpers.VizControlsHelper.getFakedDataInstance = function(vizType, vizData, feeds) {
    var getFeedInstances = sap.viz.ui5.controls.common.helpers.VizControlsHelper.getFeedInstances;
    var getDataInstance = sap.viz.ui5.controls.common.helpers.VizControlsHelper.getDataInstance;

    var dataInstance = getDataInstance(vizData);
    if (dataInstance) {
        var fs = new sap.viz.controls.services.FakeDataService(vizType, JSON.parse(JSON.stringify(dataInstance.data())), getFeedInstances(feeds));

        dataInstance = new sap.viz.api.data.CrosstableDataset();
        dataInstance.data(fs.getVizDataset());
        return dataInstance;
    } else {
        return null;
    }
};

/**
 * Used in VizContainer only
 */
sap.viz.ui5.controls.common.helpers.VizControlsHelper.getDataInstance = function(vizData) {
    if (vizData) {
        return vizData.getVIZDataset();
    } else {
        return null;
    }
};

/**
 * Used in VizContainer only
 * Update feeds in sequences of aaIndexs of manifest
 */
sap.viz.ui5.controls.common.helpers.VizControlsHelper.updateFeedsByAAIndex = function(vizType, feeds) {
    if (!feeds || feeds.length === 0 || feeds.length === 1) {
        return feeds;
    }
    var vizFeedDefsMap = sap.viz.ui5.controls.common.helpers.VizControlsHelper._getFeedDefsMap(vizType);
    if (vizFeedDefsMap) {
        feeds.sort(function(f1, f2) {
            var feedDef1 = vizFeedDefsMap[f1.getUid()];
            var feedDef2 = vizFeedDefsMap[f2.getUid()];
            var priority1 = feedDef1.aaIndex ? feedDef1.aaIndex : feedDef1.aaIndex + 1000;
            var priority2 = feedDef2.aaIndex ? feedDef2.aaIndex : feedDef2.aaIndex + 1000;
            return priority1 - priority2;
        });
    }
};

/**
 * Used in VizContainer only
 */
sap.viz.ui5.controls.common.helpers.VizControlsHelper.getSwitchBarGroups = function() {
    var LangManager = sap.viz.controls.common.managers.LangManager;

    var switchBarGroups = [{
        "name" : LangManager.get("VIZ_SWITCHBAR_COLUMN_CHARTS"),
        "types" : [{
            "id" : "viz/column"
        }, {
            "id" : "viz/stacked_column"
        }, {
            "id" : "viz/dual_column"
        }]
    }, {
        "name" : LangManager.get("VIZ_SWITCHBAR_LINE_CHARTS"),
        "types" : [{
            "id" : "viz/line"
        }, {
            "id" : "viz/area"
        }, {
            "id" : "viz/combination"
        }, {
            "id" : "viz/dual_line"
        }, {
            "id" : "viz/dual_combination"
        }]
    }, {
        "name" : LangManager.get("VIZ_SWITCHBAR_PIE_CHARTS"),
        "types" : [{
            "id" : "viz/pie"
        }, {
            "id" : "viz/donut"
        }]
    }, {
        "name" : LangManager.get("VIZ_SWITCHBAR_SCATTER_CHARTS"),
        "types" : [{
            "id" : "viz/scatter"
        }, {
            "id" : "viz/bubble"
        }]
    }, {
        "name" : LangManager.get("VIZ_SWITCHBAR_MAP_CHARTS"),
        "types" : [{
            "id" : "viz/heatmap"
        }, {
            "id" : "viz/treemap"
        }]
    }];

    return switchBarGroups;
};

sap.viz.ui5.controls.common.helpers.VizControlsHelper._getFeedDefsMap = function(vizType) {
    var allFeeds;
    try {
        allFeeds = sap.viz.api.manifest.Viz.get(vizType)[0].allFeeds();
    } catch(e) {
        try {
            allFeeds = sap.viz.api.metadata.Viz.get(vizType).bindings;
        } catch(e) {
            return null;
        }
    }
    var map = {};
    for (var i = 0; i < allFeeds.length; i++) {
        map[allFeeds[i].id] = allFeeds[i];
    }
    return map;
};

}; // end of sap/viz/ui5/controls/common/helpers/VizControlsHelper.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.core.BaseChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.core.BaseChartRenderer");

/**
 * @class BaseChart renderer.
 * @static
 */
sap.viz.ui5.core.BaseChartRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.viz.ui5.core.BaseChartRenderer.render = function(oRm, oControl){
	
	var bIsEmpty = 	!oControl.getDataset() || !oControl.getDataset().getVIZDataset(),
		oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.viz.ui5.messages"); // TODO relies on undocumented behavior?
	
	// write the HTML into the render manager
	oRm.write("<DIV");
	oRm.writeControlData(oControl);
	if(oControl.getTooltip_AsString()) {
		oRm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
	}
	oRm.addClass("sapVizChart");
	if ( bIsEmpty ) {
		oRm.addClass("sapVizNoData");
	}
	oRm.writeClasses();
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	oRm.writeStyles();
	oRm.write(">");
	if ( !sap.viz.__svg_support ) {
		oRm.write('<DIV class="sapVizNoDataDefault">');
		oRm.writeEscaped(oBundle.getText("NO_SVG_SUPPORT"));
		oRm.write('</DIV>');
	} else if ( bIsEmpty ) {
		var oNoData = oControl.getNoData();
		if ( oNoData ) {
			oRm.renderControl(oNoData);
		} else {
			oRm.write('<DIV class="sapVizNoDataDefault">');
			oRm.writeEscaped(oBundle.getText("NO_DATA")); 
			oRm.write('</DIV>');
		}
	}
	oRm.write("</DIV>");
};

}; // end of sap/viz/ui5/core/BaseChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.data.transformers.ModelToCrosstable') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.viz.ui5.data.transformers.ModelToCrosstable');

sap.viz.ui5.data.transformers.ModelToCrosstable = function() {
    this.reset();
};

sap.viz.ui5.data.transformers.ModelToCrosstable.prototype.reset = function(oOther) {
    this._oVIZCrosstab = null;
    this._aCrossContextLookup = null;
};

sap.viz.ui5.data.transformers.ModelToCrosstable.prototype.getVizDataset = function(oBinding, dimensions, measures, defaultSelectionInfo, info) {
    if (!this._oVIZCrosstab && sap.viz.__svg_support) {
        this._createVIZCrosstab(oBinding, dimensions, measures, defaultSelectionInfo, info);
    }
    return this._oVIZCrosstab || null;
};

sap.viz.ui5.data.transformers.ModelToCrosstable.prototype.findContext = function(oCriteria) {
    if (this._aCrossContextLookup && typeof oCriteria === 'object') {
        return this._aCrossContextLookup[oCriteria.dii_a2] && this._aCrossContextLookup[oCriteria.dii_a2][oCriteria.dii_a1];
    }
};

sap.viz.ui5.data.transformers.ModelToCrosstable.prototype._createVIZCrosstab = function(oBinding, dimensions, measures, defaultSelectionInfo, info) {
    var aContexts = oBinding && oBinding.getContexts(0, oBinding.getLength());

    // if there is no data, then there must be no crosstab. Charts will render "no data" then.
    if (!aContexts || aContexts.length === 0) {
        this.reset();
        return;
    }

    var aAxis1 = [], aAxis2 = [], aMeasures = [], data = [], aContextLookup = [];

    // transform dimension definitions into a structure more suitable for our
    // transformation
    jQuery.each(dimensions, function(i, oColumn) {
        if (oColumn.getAxis() === 1) {
            aAxis1.push({
                def : oColumn,
                adapter : oColumn._getAdapter()
            });
        } else if (oColumn.getAxis() === 2) {
            aAxis2.push({
                def : oColumn,
                adapter : oColumn._getAdapter()
            });
        } else {
            throw new Error("currently, only axis 1 and 2 are supported");
        }
    });

    // create empty data array for each measure
    jQuery.each(measures, function(i, oColumn) {
        aMeasures.push({
            def : oColumn,
            adapter : oColumn._getAdapter()
        });
        data.push([]);
    });

    // reads all values for a dimension definition from the model,
    // combines them into a tuple and searches that tuple in the list of known
    // values for that dimension. If it is found, the corresponding index
    // is returned. If not, the tuple is added at the end and the new index is
    // returned.
    function getAxisIndex(aAxisDef, aAxisValues, oContext) {
        var l = aAxisDef.length, aValues, i;

        if (l === 0) {
            return 0;
        }

        // extracts the key value for one dimension based on the given set of
        // dimension components
        aValues = [];
        for ( i = 0; i < l; i++) {
            aValues.push(aAxisDef[i].adapter(oContext));
        }

        // search the key value in the list of already known values
        // TODO PERFOPT: search is only needed when more than one axis is
        // defined and only because it is
        // not clear in what order the combinations of axis values are
        // enumerated in the model.
        // It could be x1y1,x2y1,..xNy1,x1y2,... or x1y1,x1y2,...x1yM,x2y1,...
        // or totally unsorted.
        for ( i = 0, l = aAxisValues.length; i < l; i++) {
            if (jQuery.sap.equal(aAxisValues[i], aValues)) {
                return i;
            }
        }
        // if not found, add it
        aAxisValues.push(aValues);
        return aAxisValues.length - 1;
    }

    var aAxis1DataSet = [];
    var aAxis2DataSet = [];

    // analyze data
    jQuery.each(aContexts, function(iIndex, oContext) {
        // TODO Distinguish 3 cases for better performance:
        // 1. both axes are defined, use code below
        // 2. only one axis is defined, use the getAxisIndex
        // without search + a fixed 0 for the second axis
        // 3. if no axes are defined, use an incrementing index
        // for the first axis and 0 for the second
        // The decision between the three cases can be taken
        // outside the loop.
        var iAxis1Index = getAxisIndex(aAxis1, aAxis1DataSet, oContext);
        var iAxis2Index = getAxisIndex(aAxis2, aAxis2DataSet, oContext);
        for (var i = 0; i < aMeasures.length; i++) {
            var value = aMeasures[i].adapter(oContext);
            // If both aa1 and aa2 is empty, viz dataset should
            // be created correctly and only with measure
            // values.
            if (aAxis1.length === 0 && aAxis2.length === 0) {
                if (data[i][0] === undefined) {
                    data[i][0] = [];
                }
                data[i][0].push(value);
            } else {
                (data[i][iAxis2Index] = (data[i][iAxis2Index] || []))[iAxis1Index] = value;
            }
        }
        if (aAxis1.length === 0 && aAxis2.length === 0) {
            iAxis1Index = iIndex;
        }
        // remember the oContext for the current coordinates
        (aContextLookup[iAxis2Index] || (aContextLookup[iAxis2Index] = []))[iAxis1Index] = oContext;
    });

    // fill any gaps
    var iLengthAxis1 = aAxis1DataSet.length;
    var iLengthAxis2 = Math.max(aAxis2DataSet.length, 1);
    for (var j = 0; j < iLengthAxis2; j++) {
        for (var i = 0; i < aMeasures.length; i++) {
            // first ensure that a data array exists for each value of axis2
            var d = data[i][j];
            if (!d) {
                d = data[i][j] = [];
            }
            // then ensure that each array has the length of axis1
            if (d.length < iLengthAxis1) {
                d[iLengthAxis1 - 1] = undefined;
            }
        }
        // also ensure that a lookup array exists for each value of axis2
        if (!aContextLookup[j]) {
            aContextLookup[j] = [];
        }
        // ensure that the lookup array has the length of axis1
        if (!aContextLookup[j].length < iLengthAxis1) {
            aContextLookup[j][iLengthAxis1] = undefined;
        }
    }

    // start creating the dataset
    // If no dimension or no measure definition, viz dataset should also no
    // 'analysisAxis' or 'measureValuesGroup'.
    var dataset = {};

    // convert data for axis1
    if (aAxis1.length > 0) {
        if (dataset.analysisAxis === undefined) {
            dataset.analysisAxis = [];
        }
        var axis = {
            index : 1,
            data : []
        };
        // process component by component for the axis1 dimension
        for (var i = 0; i < aAxis1.length; i++) {
            // collect values for the dimension component 'i'
            var values = [];
            for (var j = 0; j < aAxis1DataSet.length; j++) {
                values[j] = aAxis1DataSet[j][i];
            }
            // create an axis component from the collected data and the
            // specified label
            axis.data.push({
                name : aAxis1[i].def.getName(),
                values : values
            });
        }
        // add axis to dataset
        dataset.analysisAxis.push(axis);
    }

    // do the same for axis2
    // TODO generalize to N axes, will reduce code as well. But maybe throw
    // error above for more than two axes (limit of crosstab?)
    if (aAxis2.length > 0) {
        if (dataset.analysisAxis === undefined) {
            dataset.analysisAxis = [];
        }
        var axis = {
            index : 2,
            data : []
        };
        for (var i = 0; i < aAxis2.length; i++) {
            var values = [];
            for (var j = 0; j < aAxis2DataSet.length; j++) {
                values[j] = aAxis2DataSet[j][i];
            }
            axis.data.push({
                name : aAxis2[i].def.getName(),
                values : values
            });
        }
        dataset.analysisAxis.push(axis);
    }

    // now that the dimension lengths are known, transform measures to
    // crosstable
    if (aMeasures.length > 0) {
        dataset.measureValuesGroup = [];

        for (var i = 0; i < aMeasures.length; i++) {
            if (!dataset.measureValuesGroup[aMeasures[i].def.getGroup() - 1]) {
                dataset.measureValuesGroup[aMeasures[i].def.getGroup() - 1] = {
                    index : aMeasures[i].def.getGroup(),
                    data : []
                };
            }
            dataset.measureValuesGroup[aMeasures[i].def.getGroup() - 1].data.push({
                name : aMeasures[i].def.getName(),
                values : data[i]
            });
        }

        // Viz don't handle mg array with undefined.
        for (var i = 0, len = dataset.measureValuesGroup.length; i < len; i++) {
            if (dataset.measureValuesGroup[i] === undefined) {
                throw new Error("Measure Group " + (i + 1) + " is missing.");
                break;
            }
        }
    }

    // finally create the VIZ crosstab from the transformed data
    if (sap.viz.data) {
    	this._oVIZCrosstab = new sap.viz.data.CrosstableDataset();
        this._oVIZCrosstab.setData(dataset);
    } else {
    	this._oVIZCrosstab = new sap.viz.api.data.CrosstableDataset();
        this._oVIZCrosstab.data(dataset);
    }
    if (defaultSelectionInfo) {
        this._oVIZCrosstab.info(defaultSelectionInfo);
    }
    if (info) {
        this._oVIZCrosstab.info(info);
    }
    this._aCrossContextLookup = aContextLookup;
};

}; // end of sap/viz/ui5/data/transformers/ModelToCrosstable.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.data.transformers.ModelToFlattable') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.viz.ui5.data.transformers.ModelToFlattable');

sap.viz.ui5.data.transformers.ModelToFlattable = function() {
    this.reset();
};

sap.viz.ui5.data.transformers.ModelToFlattable.prototype.reset = function(oOther) {
    this._oVIZFlatTable = null;
    this._aFlatContextLookup = null;
};


sap.viz.ui5.data.transformers.ModelToFlattable.prototype.getVizDataset = function(oBinding, dimensions, measures) {
    if (!this._oVIZFlatTable && sap.viz.__svg_support) {
        this._createVIZFlatTable(oBinding, dimensions, measures);
    }
    return this._oVIZFlatTable || null;
};

sap.viz.ui5.data.transformers.ModelToFlattable.prototype.findContext = function(oCriteria) {
    if (this._aFlatContextLookup && typeof oCriteria === 'object' && oCriteria._context_row_number !== undefined) {
        return this._aFlatContextLookup[oCriteria._context_row_number]
    }
};

sap.viz.ui5.data.transformers.ModelToFlattable.prototype._createVIZFlatTable = function(oBinding, dimensions, measures) {
    var aContexts = oBinding && oBinding.getContexts(0, oBinding.getLength());

    var aAxis = [], aMeasures = [], flatTableDS = {
        'metadata' : {
            'fields' : [],
            'context' : '_context_row_number'
        },
        'data' : []
    }, aContextLookup = [];
    
    jQuery.each(dimensions, function(i, oColumn) {
        aAxis.push({
            def : oColumn,
            adapter : oColumn._getAdapter()
        });
        flatTableDS.metadata.fields.push({
            'id' : oColumn.getName(),
            'name' : oColumn.getName(),
            'semanticType' : 'Dimension'
        });
    });

    jQuery.each(measures, function(i, oColumn) {
        aMeasures.push({
            def : oColumn,
            adapter : oColumn._getAdapter()
        });
        flatTableDS.metadata.fields.push({
            'id' : oColumn.getName(),
            'name' : oColumn.getName(),
            'semanticType' : 'Measure'
        });
    });
    
    // handle no data
    if (!aContexts || aContexts.length === 0) {
        this.reset();
        this._oVIZFlatTable = new sap.viz.api.data.FlatTableDataset(flatTableDS);
        return;
    }

    // analyze data
    jQuery.each(aContexts, function(iIndex, oContext) {
        if (!flatTableDS.data[iIndex]) {
            flatTableDS.data[iIndex] = [];
        }
        for (var i = 0; i < aAxis.length; i++) {
            var value = aAxis[i].adapter(oContext);
            flatTableDS.data[iIndex].push(value);
        }
        for (var j = 0; j < aMeasures.length; j++) {
            var value = aMeasures[j].adapter(oContext);
            flatTableDS.data[iIndex].push(value);
        }
        aContextLookup[iIndex] = oContext;
    });
    this._aFlatContextLookup = aContextLookup;

    // finally create the VIZ flat table from the transformed data
    this._oVIZFlatTable = new sap.viz.api.data.FlatTableDataset(flatTableDS);
};

}; // end of sap/viz/ui5/data/transformers/ModelToFlattable.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.theming.Util') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.theming.Util");

sap.viz.ui5.theming.Util = {};

/**
 * CSS Parameters to Properties mapping object
 */
sap.viz.ui5.theming.Util._mapping = {
    "sapUiChartLabelHoverColor" : ["categoryAxis.hoverShadow.color",
                                   "legend.hoverShadow.color",
                                   "rowAxis.hoverShadow.color",
                                   "columnAxis.hoverShadow.color"
                                   ],  
    "sapUiChartLabelPressedColor" : ["categoryAxis.mouseDownShadow.color",
                                     "legend.mouseDownShadow.color",                                     
                                     "rowAxis.mouseDownShadow.color",
                                     "columnAxis.mouseDownShadow.color"],
    "sapUiChartCategoryAxisLabelFontColor" : ["categoryAxis.label.style.color",
                                              "columnAxis.label.style.color",
                                              "rowAxis.label.style.color"],
    "sapUiChartValueAxisLabelFontColor" : [ "valueAxis.label.style.color",
                                            "valueAxis2.label.style.color" ],
    "sapUiChartCategoryAxislabelFontSize" : ["categoryAxis.label.style.fontSize",
                                             "rowAxis.label.style.fontSize",
                                             "columnAxis.label.style.fontSize"],
    "sapUiChartValueAxislabelFontSize" : [ "valueAxis.label.style.fontSize",
                                           "valueAxis2.label.style.fontSize" ],
    "sapUiChartCategoryAxisLineColor" : "categoryAxis.color",
    "sapUiChartValueAxisLineColor" : ["valueAxis.color",
                                      "valueAxis2.color"],
    "sapUiChartCategoryAxisTickColor" : "categoryAxis.color",
    "sapUiChartValueAxisTickColor" : ["valueAxis.color",
                                      "valueAxis2.color"],
    "sapUiChartBackgroundColor" : ["general.background.color",
                                   "plotArea.background.color"],
    "sapUiFontFamily" : [ "plotArea.dataLabel.style.fontFamily",
                          "plotArea.dimensionLabel.style.fontFamily",
                          "plotArea.referenceLine.defaultStyle.label.fontFamily",
                          "plotArea.highlight.centerName.style.fontFamily",
                          "plotArea.highlight.centerValue.style.fontFamily",
                          "categoryAxis.title.style.fontFamily",
                          "categoryAxis.label.style.fontFamily",
                          "valueAxis.title.style.fontFamily",
                          "valueAxis.label.style.fontFamily",
                          "valueAxis2.label.style.fontFamily",
                          "valueAxis2.title.style.fontFamily",
                          "columnAxis.title.style.fontFamily",
                          "columnAxis.label.style.fontFamily",
                          "rowAxis.title.style.fontFamily",
                          "rowAxis.label.style.fontFamily",
                          "legend.title.style.fontFamily",
                          "legend.label.style.fontFamily",
                          "sizeLegend.title.style.fontFamily",
                          "sizeLegend.label.style.fontFamily",
                          "title.style.fontFamily" ],
    "sapUiChartLabelFontWeight" : [ "plotArea.dataLabel.style.fontWeight",
                                    "plotArea.dimensionLabel.style.fontWeight",
                                    "plotArea.referenceLine.defaultStyle.label.fontWeight",
                                    "plotArea.highlight.centerName.style.fontWeight",
                                    "plotArea.highlight.centerValue.style.fontWeight",
                                    "categoryAxis.label.style.fontWeight",
                                    "valueAxis.label.style.fontWeight",
                                    "valueAxis2.label.style.fontWeight",
                                    "columnAxis.label.style.fontWeight",
                                    "rowAxis.label.style.fontWeight",
                                    "legend.label.style.fontWeight",
                                    "sizeLegend.label.style.fontWeight" ],
   "sapUiChartLegendLabelFontColor" : [ "legend.label.style.color",
                                        "sizeLegend.label.style.color" ],
   "sapUiChartLegendTitleFontColor" : [ "legend.title.style.color",
                                        "sizeLegend.title.style.color" ],
   "sapUiChartLegendTitleFontSize" : [ "legend.title.style.fontSize",
                                       "sizeLegend.title.style.fontSize" ],
   "sapUiChartLegendLabelFontSize" : [ "legend.label.style.fontSize",
                                       "sizeLegend.label.style.fontSize" ],
    "sapUiChartPaletteUndefinedColor" : "plotArea.defaultOthersStyle.color",  
    "sapUiChartGridlineColor" : ["plotArea.gridline.color",
                                 "plotArea.grid.line.color"],
    "sapUiChartReferenceLineColor" : "plotArea.referenceLine.defaultStyle.color",
    "sapUiChartReferenceLineLabelColor" : "plotArea.referenceLine.defaultStyle.label.color",
    "sapUiChartDataLabelFontSize" : ["plotArea.dataLabel.style.fontSize",
                                     "plotArea.dimensionLabel.style.fontSize",
                                     "plotArea.referenceLine.defaultStyle.label.fontSize"],
    "sapUiChartDataLabelFontColor" : ["plotArea.dataLabel.style.color",
                                      "plotArea.dimensionLabel.style.color"],
    "sapUiChartScrollBarThumbColor" : [ "plotArea.scrollbar.thumb.fill",
                                       "legend.scrollbar.thumb.fill" ],
    "sapUiChartScrollBarTrackColor" : [ "plotArea.scrollbar.track.fill",
                                        "legend.scrollbar.track.fill" ],
    "sapUiChartScrollBarThumbHoverColor" : ["plotArea.scrollbar.thumb.hoverFill",
                                             "legend.scrollbar.thumb.hoverFill" ],                                                                      
    "sapUiChartMainTitleFontColor" : "title.style.color",
    "sapUiChartAxisTitleFontColor" : [ "categoryAxis.title.style.color",
                                       "valueAxis.title.style.color", 
                                       "valueAxis2.title.style.color",
                                       "columnAxis.title.style.color",
                                       "rowAxis.title.style.color"],
    "sapUiChartMainTitleFontSize" : "title.style.fontSize",
    "sapUiChartAxisTitleFontSize" : [ "categoryAxis.title.style.fontSize",
                                      "valueAxis.title.style.fontSize",
                                      "valueAxis2.title.style.fontSize",
                                      "columnAxis.title.style.fontSize",
                                      "rowAxis.title.style.fontSize"],                                                                     
    "sapUiChartTitleFontWeight" : [ "title.style.fontWeight",
                                    "legend.title.style.fontWeight",
                                    "categoryAxis.title.style.fontWeight",
                                    "valueAxis.title.style.fontWeight",
                                    "valueAxis2.title.style.fontWeight",
                                    "columnAxis.title.style.fontWeight",
                                    "rowAxis.title.style.fontWeight"]    
};

sap.viz.ui5.theming.Util._exclude = {
    "valueAxis.color" : ["*dual*"],
    "valueAxis.title.style.color" : ["*dual*"],
    "valueAxis2.color" : ["*dual*"],
    "valueAxis2.title.style.color" : ["*dual*"]
};

/**
 * Read CSS parameters and convert them to CVOM properties
 * 
 * @return {object}
 * @example {"plot.dataLabel.style.color": "0xff00ff", "title.style.color":
 *          "0x00ff00", ...}
 */
sap.viz.ui5.theming.Util.readCSSParameters = function(chartType) {
    var property = {};
    var mapping = sap.viz.ui5.theming.Util._mapping;
    var exclude = sap.viz.ui5.theming.Util._exclude;
    for (var key in mapping) {
        if (mapping.hasOwnProperty(key)) {
            var value = sap.ui.core.theming.Parameters.get(key);
            if (value) {
                var index = value.indexOf('rem');
                if(index > -1) {
                    var temp = value.substring(0, index);
                    value = temp * 
                        parseFloat(window.getComputedStyle(document.documentElement).fontSize) + 'px';
                }
                var path = mapping[key];
                if (Object.prototype.toString.call(path) === '[object Array]') {
                    for (var i = 0; i < path.length; i++) {
                        if(!isExcluded(exclude, path[i], chartType)) {
                            addProperty(property, path[i], value);
                        }                        
                    }
                } else {
                    if(!isExcluded(exclude, path, chartType)) {
                        addProperty(property, path, value);
                    }                    
                }
            }
        }
    }
    return property;

    function addProperty(property, path, value) {
        var keys = path.split('.');
        var prop = property;
        for (var i = 0; i < keys.length - 1; i++) {
            var key = keys[i];
            if (undefined == prop[key] || null == prop[key]) {
                prop[key] = {}
            }
            prop = prop[key];
        }
        key = keys[i];
        prop[key] = value;
    }
    
    function isExcluded(exclude, path, chartType) {
        var result = false;
        if(exclude.hasOwnProperty(path)) {
            var types = exclude[path];
            for(var i = 0; i < types.length; i++) {
                var pattern = types[i].replace(/\*/g, '.*').replace(/\?/g, '.').replace(/\|/g, '$|^');
                var reg = RegExp('^' + pattern + '$')
                if(reg.test(chartType)) {
                    result = true;
                    break;
                }
            }               
        }
        return result;
    }
};
}; // end of sap/viz/ui5/theming/Util.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Area100Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.Area100Renderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.Area100Renderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/Area100Renderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.AreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.AreaRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.AreaRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/AreaRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.BarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.BarRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.BarRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/BarRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.BubbleRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.BubbleRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.BubbleRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/BubbleRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.BulletRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.BulletRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.BulletRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/BulletRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.ColumnRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.ColumnRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.ColumnRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/ColumnRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.CombinationRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.CombinationRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.CombinationRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/CombinationRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DonutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.DonutRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.DonutRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/DonutRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.DualBarRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.DualBarRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/DualBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualColumnRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.DualColumnRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.DualColumnRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/DualColumnRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualCombinationRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.DualCombinationRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.DualCombinationRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/DualCombinationRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualLineRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.DualLineRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.DualLineRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/DualLineRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualStackedColumn100Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.DualStackedColumn100Renderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.DualStackedColumn100Renderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/DualStackedColumn100Renderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualStackedColumnRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.DualStackedColumnRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.DualStackedColumnRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/DualStackedColumnRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.HeatmapRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.HeatmapRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.HeatmapRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/HeatmapRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.HorizontalArea100Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.HorizontalArea100Renderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.HorizontalArea100Renderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/HorizontalArea100Renderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.HorizontalAreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.HorizontalAreaRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.HorizontalAreaRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/HorizontalAreaRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.LineRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.LineRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.LineRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/LineRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.PieRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.PieRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.PieRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/PieRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.ScatterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.ScatterRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.ScatterRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/ScatterRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.StackedColumn100Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.StackedColumn100Renderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.StackedColumn100Renderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/StackedColumn100Renderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.StackedColumnRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.StackedColumnRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.StackedColumnRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/StackedColumnRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.TimeBubbleRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.TimeBubbleRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.TimeBubbleRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/TimeBubbleRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.TreemapRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.viz.ui5.TreemapRenderer");


/**
 * @experimental Since 1.7.2, charting API is not finished yet and might change completely
 */
sap.viz.ui5.TreemapRenderer = sap.viz.ui5.core.BaseChartRenderer;

}; // end of sap/viz/ui5/TreemapRenderer.js
if ( !jQuery.sap.isDeclared('sap.viz.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.viz (1.28.24)
 */
jQuery.sap.declare("sap.viz.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * Chart controls based on the SAP BI CVOM charting library
 *
 * @namespace
 * @name sap.viz
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.viz",
	dependencies : ["sap.ui.core"],
	types: [
		"sap.viz.ui5.types.Area_drawingEffect",
		"sap.viz.ui5.types.Area_marker_shape",
		"sap.viz.ui5.types.Area_mode",
		"sap.viz.ui5.types.Area_orientation",
		"sap.viz.ui5.types.Axis_gridline_type",
		"sap.viz.ui5.types.Axis_label_unitFormatType",
		"sap.viz.ui5.types.Axis_position",
		"sap.viz.ui5.types.Axis_type",
		"sap.viz.ui5.types.Background_direction",
		"sap.viz.ui5.types.Background_drawingEffect",
		"sap.viz.ui5.types.Bar_drawingEffect",
		"sap.viz.ui5.types.Bar_orientation",
		"sap.viz.ui5.types.Bubble_drawingEffect",
		"sap.viz.ui5.types.Bullet_drawingEffect",
		"sap.viz.ui5.types.Bullet_orientation",
		"sap.viz.ui5.types.Combination_drawingEffect",
		"sap.viz.ui5.types.Combination_orientation",
		"sap.viz.ui5.types.Datalabel_orientation",
		"sap.viz.ui5.types.Datalabel_outsidePosition",
		"sap.viz.ui5.types.Datalabel_paintingMode",
		"sap.viz.ui5.types.Datalabel_position",
		"sap.viz.ui5.types.Legend_layout_position",
		"sap.viz.ui5.types.Line_drawingEffect",
		"sap.viz.ui5.types.Line_marker_shape",
		"sap.viz.ui5.types.Line_orientation",
		"sap.viz.ui5.types.Pie_drawingEffect",
		"sap.viz.ui5.types.Pie_valign",
		"sap.viz.ui5.types.Scatter_drawingEffect",
		"sap.viz.ui5.types.StackedVerticalBar_drawingEffect",
		"sap.viz.ui5.types.StackedVerticalBar_mode",
		"sap.viz.ui5.types.StackedVerticalBar_orientation",
		"sap.viz.ui5.types.Title_alignment",
		"sap.viz.ui5.types.Tooltip_drawingEffect",
		"sap.viz.ui5.types.VerticalBar_drawingEffect",
		"sap.viz.ui5.types.VerticalBar_orientation",
		"sap.viz.ui5.types.controller.Interaction_pan_orientation",
		"sap.viz.ui5.types.controller.Interaction_selectability_mode",
		"sap.viz.ui5.types.legend.Common_alignment",
		"sap.viz.ui5.types.legend.Common_drawingEffect",
		"sap.viz.ui5.types.legend.Common_position",
		"sap.viz.ui5.types.legend.Common_type"
	],
	interfaces: [],
	controls: [
		"sap.viz.ui5.Area",
		"sap.viz.ui5.Area100",
		"sap.viz.ui5.Bar",
		"sap.viz.ui5.Bubble",
		"sap.viz.ui5.Bullet",
		"sap.viz.ui5.Column",
		"sap.viz.ui5.Combination",
		"sap.viz.ui5.Donut",
		"sap.viz.ui5.DualBar",
		"sap.viz.ui5.DualColumn",
		"sap.viz.ui5.DualCombination",
		"sap.viz.ui5.DualLine",
		"sap.viz.ui5.DualStackedColumn",
		"sap.viz.ui5.DualStackedColumn100",
		"sap.viz.ui5.Heatmap",
		"sap.viz.ui5.HorizontalArea",
		"sap.viz.ui5.HorizontalArea100",
		"sap.viz.ui5.Line",
		"sap.viz.ui5.Pie",
		"sap.viz.ui5.Scatter",
		"sap.viz.ui5.StackedColumn",
		"sap.viz.ui5.StackedColumn100",
		"sap.viz.ui5.TimeBubble",
		"sap.viz.ui5.Treemap",
		"sap.viz.ui5.VizContainer",
		"sap.viz.ui5.controls.Popover",
		"sap.viz.ui5.controls.VizFrame",
		"sap.viz.ui5.controls.common.BaseControl",
		"sap.viz.ui5.core.BaseChart"
	],
	elements: [
		"sap.viz.ui5.controls.common.feeds.AnalysisObject",
		"sap.viz.ui5.controls.common.feeds.FeedItem",
		"sap.viz.ui5.core.BaseStructuredType",
		"sap.viz.ui5.data.Dataset",
		"sap.viz.ui5.data.DimensionDefinition",
		"sap.viz.ui5.data.FlattenedDataset",
		"sap.viz.ui5.data.MeasureDefinition",
		"sap.viz.ui5.types.Area",
		"sap.viz.ui5.types.Area_animation",
		"sap.viz.ui5.types.Area_hoverline",
		"sap.viz.ui5.types.Area_marker",
		"sap.viz.ui5.types.Area_tooltip",
		"sap.viz.ui5.types.Axis",
		"sap.viz.ui5.types.Axis_axisTick",
		"sap.viz.ui5.types.Axis_axisline",
		"sap.viz.ui5.types.Axis_gridline",
		"sap.viz.ui5.types.Axis_indicator",
		"sap.viz.ui5.types.Axis_label",
		"sap.viz.ui5.types.Axis_layoutInfo",
		"sap.viz.ui5.types.Axis_scale",
		"sap.viz.ui5.types.Axis_title",
		"sap.viz.ui5.types.Background",
		"sap.viz.ui5.types.Background_border",
		"sap.viz.ui5.types.Background_border_bottom",
		"sap.viz.ui5.types.Background_border_left",
		"sap.viz.ui5.types.Background_border_right",
		"sap.viz.ui5.types.Background_border_top",
		"sap.viz.ui5.types.Bar",
		"sap.viz.ui5.types.Bar_animation",
		"sap.viz.ui5.types.Bar_tooltip",
		"sap.viz.ui5.types.Bubble",
		"sap.viz.ui5.types.Bubble_animation",
		"sap.viz.ui5.types.Bubble_axisTooltip",
		"sap.viz.ui5.types.Bubble_hoverline",
		"sap.viz.ui5.types.Bullet",
		"sap.viz.ui5.types.Bullet_tooltip",
		"sap.viz.ui5.types.Combination",
		"sap.viz.ui5.types.Combination_animation",
		"sap.viz.ui5.types.Combination_bar",
		"sap.viz.ui5.types.Combination_dataShape",
		"sap.viz.ui5.types.Combination_line",
		"sap.viz.ui5.types.Combination_line_marker",
		"sap.viz.ui5.types.Combination_tooltip",
		"sap.viz.ui5.types.Datalabel",
		"sap.viz.ui5.types.Datatransform",
		"sap.viz.ui5.types.Datatransform_autoBinning",
		"sap.viz.ui5.types.Datatransform_dataSampling",
		"sap.viz.ui5.types.Datatransform_dataSampling_grid",
		"sap.viz.ui5.types.Heatmap",
		"sap.viz.ui5.types.Heatmap_animation",
		"sap.viz.ui5.types.Heatmap_border",
		"sap.viz.ui5.types.Heatmap_tooltip",
		"sap.viz.ui5.types.Legend",
		"sap.viz.ui5.types.Legend_layout",
		"sap.viz.ui5.types.Line",
		"sap.viz.ui5.types.Line_animation",
		"sap.viz.ui5.types.Line_hoverline",
		"sap.viz.ui5.types.Line_marker",
		"sap.viz.ui5.types.Line_tooltip",
		"sap.viz.ui5.types.Pie",
		"sap.viz.ui5.types.Pie_animation",
		"sap.viz.ui5.types.Pie_tooltip",
		"sap.viz.ui5.types.RootContainer",
		"sap.viz.ui5.types.RootContainer_layout",
		"sap.viz.ui5.types.Scatter",
		"sap.viz.ui5.types.Scatter_animation",
		"sap.viz.ui5.types.Scatter_axisTooltip",
		"sap.viz.ui5.types.Scatter_hoverline",
		"sap.viz.ui5.types.StackedVerticalBar",
		"sap.viz.ui5.types.StackedVerticalBar_animation",
		"sap.viz.ui5.types.StackedVerticalBar_tooltip",
		"sap.viz.ui5.types.Title",
		"sap.viz.ui5.types.Title_layout",
		"sap.viz.ui5.types.Tooltip",
		"sap.viz.ui5.types.Tooltip_background",
		"sap.viz.ui5.types.Tooltip_bodyDimensionLabel",
		"sap.viz.ui5.types.Tooltip_bodyDimensionValue",
		"sap.viz.ui5.types.Tooltip_bodyMeasureLabel",
		"sap.viz.ui5.types.Tooltip_bodyMeasureValue",
		"sap.viz.ui5.types.Tooltip_closeButton",
		"sap.viz.ui5.types.Tooltip_footerLabel",
		"sap.viz.ui5.types.Tooltip_separationLine",
		"sap.viz.ui5.types.Treemap",
		"sap.viz.ui5.types.Treemap_animation",
		"sap.viz.ui5.types.Treemap_border",
		"sap.viz.ui5.types.Treemap_tooltip",
		"sap.viz.ui5.types.VerticalBar",
		"sap.viz.ui5.types.VerticalBar_animation",
		"sap.viz.ui5.types.VerticalBar_tooltip",
		"sap.viz.ui5.types.XYContainer",
		"sap.viz.ui5.types.controller.Interaction",
		"sap.viz.ui5.types.controller.Interaction_pan",
		"sap.viz.ui5.types.controller.Interaction_selectability",
		"sap.viz.ui5.types.layout.Dock",
		"sap.viz.ui5.types.layout.Stack",
		"sap.viz.ui5.types.legend.Common",
		"sap.viz.ui5.types.legend.Common_title"
	],
	version: "1.28.24"
});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Area_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Area_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Area_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Area_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Area_marker_shape.
jQuery.sap.declare("sap.viz.ui5.types.Area_marker_shape");
/**
 * @class List (Enum) type ui5/types/Area_marker_shape
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Area_marker_shape = {

	/**
	 * Value circle
	 * @public
	 */
	circle : "circle",

	/**
	 * Value diamond
	 * @public
	 */
	diamond : "diamond",

	/**
	 * Value triangleUp
	 * @public
	 */
	triangleUp : "triangleUp",

	/**
	 * Value triangleDown
	 * @public
	 */
	triangleDown : "triangleDown",

	/**
	 * Value triangleLeft
	 * @public
	 */
	triangleLeft : "triangleLeft",

	/**
	 * Value triangleRight
	 * @public
	 */
	triangleRight : "triangleRight",

	/**
	 * Value cross
	 * @public
	 */
	cross : "cross",

	/**
	 * Value intersection
	 * @public
	 */
	intersection : "intersection"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Area_mode.
jQuery.sap.declare("sap.viz.ui5.types.Area_mode");
/**
 * @class List (Enum) type ui5/types/Area_mode
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Area_mode = {

	/**
	 * Value comparison
	 * @public
	 */
	comparison : "comparison",

	/**
	 * Value percentage
	 * @public
	 */
	percentage : "percentage"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Area_orientation.
jQuery.sap.declare("sap.viz.ui5.types.Area_orientation");
/**
 * @class List (Enum) type ui5/types/Area_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Area_orientation = {

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical",

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Axis_gridline_type.
jQuery.sap.declare("sap.viz.ui5.types.Axis_gridline_type");
/**
 * @class List (Enum) type ui5/types/Axis_gridline_type
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Axis_gridline_type = {

	/**
	 * Value line
	 * @public
	 */
	line : "line",

	/**
	 * Value dotted
	 * @public
	 */
	dotted : "dotted",

	/**
	 * Value incised
	 * @public
	 */
	incised : "incised"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Axis_label_unitFormatType.
jQuery.sap.declare("sap.viz.ui5.types.Axis_label_unitFormatType");
/**
 * @class List (Enum) type ui5/types/Axis_label_unitFormatType
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Axis_label_unitFormatType = {

	/**
	 * Value MetricUnits
	 * @public
	 */
	MetricUnits : "MetricUnits",

	/**
	 * Value FinancialUnits
	 * @public
	 */
	FinancialUnits : "FinancialUnits"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Axis_position.
jQuery.sap.declare("sap.viz.ui5.types.Axis_position");
/**
 * @class List (Enum) type ui5/types/Axis_position
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Axis_position = {

	/**
	 * Value left
	 * @public
	 */
	left : "left",

	/**
	 * Value right
	 * @public
	 */
	right : "right",

	/**
	 * Value top
	 * @public
	 */
	top : "top",

	/**
	 * Value bottom
	 * @public
	 */
	bottom : "bottom"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Axis_type.
jQuery.sap.declare("sap.viz.ui5.types.Axis_type");
/**
 * @class List (Enum) type ui5/types/Axis_type
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Axis_type = {

	/**
	 * Value value
	 * @public
	 */
	value : "value",

	/**
	 * Value category
	 * @public
	 */
	category : "category",

	/**
	 * Value timeValue
	 * @public
	 */
	timeValue : "timeValue"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Background_direction.
jQuery.sap.declare("sap.viz.ui5.types.Background_direction");
/**
 * @class List (Enum) type ui5/types/Background_direction
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Background_direction = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Background_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Background_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Background_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Background_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Bar_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Bar_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Bar_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Bar_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Bar_orientation.
jQuery.sap.declare("sap.viz.ui5.types.Bar_orientation");
/**
 * @class List (Enum) type ui5/types/Bar_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Bar_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Bubble_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Bubble_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Bubble_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Bubble_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Bullet_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Bullet_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Bullet_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Bullet_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Bullet_orientation.
jQuery.sap.declare("sap.viz.ui5.types.Bullet_orientation");
/**
 * @class List (Enum) type ui5/types/Bullet_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Bullet_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Combination_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Combination_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Combination_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Combination_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Combination_orientation.
jQuery.sap.declare("sap.viz.ui5.types.Combination_orientation");
/**
 * @class List (Enum) type ui5/types/Combination_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Combination_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Datalabel_orientation.
jQuery.sap.declare("sap.viz.ui5.types.Datalabel_orientation");
/**
 * @class List (Enum) type ui5/types/Datalabel_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Datalabel_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Datalabel_outsidePosition.
jQuery.sap.declare("sap.viz.ui5.types.Datalabel_outsidePosition");
/**
 * @class List (Enum) type ui5/types/Datalabel_outsidePosition
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Datalabel_outsidePosition = {

	/**
	 * Value up
	 * @public
	 */
	up : "up",

	/**
	 * Value down
	 * @public
	 */
	down : "down",

	/**
	 * Value left
	 * @public
	 */
	left : "left",

	/**
	 * Value right
	 * @public
	 */
	right : "right"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Datalabel_paintingMode.
jQuery.sap.declare("sap.viz.ui5.types.Datalabel_paintingMode");
/**
 * @class List (Enum) type ui5/types/Datalabel_paintingMode
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Datalabel_paintingMode = {

	/**
	 * Value rectCoordinate
	 * @public
	 */
	rectCoordinate : "rectCoordinate",

	/**
	 * Value polarCoordinate
	 * @public
	 */
	polarCoordinate : "polarCoordinate"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Datalabel_position.
jQuery.sap.declare("sap.viz.ui5.types.Datalabel_position");
/**
 * @class List (Enum) type ui5/types/Datalabel_position
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Datalabel_position = {

	/**
	 * Value inside
	 * @public
	 */
	inside : "inside",

	/**
	 * Value outside
	 * @public
	 */
	outside : "outside"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Legend_layout_position.
jQuery.sap.declare("sap.viz.ui5.types.Legend_layout_position");
/**
 * @class List (Enum) type ui5/types/Legend_layout_position
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Legend_layout_position = {

	/**
	 * Value top
	 * @public
	 */
	top : "top",

	/**
	 * Value bottom
	 * @public
	 */
	bottom : "bottom",

	/**
	 * Value right
	 * @public
	 */
	right : "right",

	/**
	 * Value left
	 * @public
	 */
	left : "left"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Line_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Line_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Line_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Line_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Line_marker_shape.
jQuery.sap.declare("sap.viz.ui5.types.Line_marker_shape");
/**
 * @class List (Enum) type ui5/types/Line_marker_shape
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Line_marker_shape = {

	/**
	 * Value circle
	 * @public
	 */
	circle : "circle",

	/**
	 * Value diamond
	 * @public
	 */
	diamond : "diamond",

	/**
	 * Value triangleUp
	 * @public
	 */
	triangleUp : "triangleUp",

	/**
	 * Value triangleDown
	 * @public
	 */
	triangleDown : "triangleDown",

	/**
	 * Value triangleLeft
	 * @public
	 */
	triangleLeft : "triangleLeft",

	/**
	 * Value triangleRight
	 * @public
	 */
	triangleRight : "triangleRight",

	/**
	 * Value cross
	 * @public
	 */
	cross : "cross",

	/**
	 * Value intersection
	 * @public
	 */
	intersection : "intersection"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Line_orientation.
jQuery.sap.declare("sap.viz.ui5.types.Line_orientation");
/**
 * @class List (Enum) type ui5/types/Line_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Line_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Pie_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Pie_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Pie_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Pie_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Pie_valign.
jQuery.sap.declare("sap.viz.ui5.types.Pie_valign");
/**
 * @class List (Enum) type ui5/types/Pie_valign
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Pie_valign = {

	/**
	 * Value top
	 * @public
	 */
	top : "top",

	/**
	 * Value center
	 * @public
	 */
	center : "center"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Scatter_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Scatter_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Scatter_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Scatter_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.StackedVerticalBar_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.StackedVerticalBar_drawingEffect");
/**
 * @class List (Enum) type ui5/types/StackedVerticalBar_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.StackedVerticalBar_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.StackedVerticalBar_mode.
jQuery.sap.declare("sap.viz.ui5.types.StackedVerticalBar_mode");
/**
 * @class List (Enum) type ui5/types/StackedVerticalBar_mode
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.StackedVerticalBar_mode = {

	/**
	 * Value comparison
	 * @public
	 */
	comparison : "comparison",

	/**
	 * Value percentage
	 * @public
	 */
	percentage : "percentage"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.StackedVerticalBar_orientation.
jQuery.sap.declare("sap.viz.ui5.types.StackedVerticalBar_orientation");
/**
 * @class List (Enum) type ui5/types/StackedVerticalBar_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.StackedVerticalBar_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Title_alignment.
jQuery.sap.declare("sap.viz.ui5.types.Title_alignment");
/**
 * @class List (Enum) type ui5/types/Title_alignment
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Title_alignment = {

	/**
	 * Value left
	 * @public
	 */
	left : "left",

	/**
	 * Value center
	 * @public
	 */
	center : "center",

	/**
	 * Value right
	 * @public
	 */
	right : "right"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.Tooltip_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_drawingEffect");
/**
 * @class List (Enum) type ui5/types/Tooltip_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.Tooltip_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.VerticalBar_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.VerticalBar_drawingEffect");
/**
 * @class List (Enum) type ui5/types/VerticalBar_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.VerticalBar_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.VerticalBar_orientation.
jQuery.sap.declare("sap.viz.ui5.types.VerticalBar_orientation");
/**
 * @class List (Enum) type ui5/types/VerticalBar_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.VerticalBar_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.controller.Interaction_pan_orientation.
jQuery.sap.declare("sap.viz.ui5.types.controller.Interaction_pan_orientation");
/**
 * @class List (Enum) type ui5/types/controller/Interaction_pan_orientation
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.controller.Interaction_pan_orientation = {

	/**
	 * Value horizontal
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Value vertical
	 * @public
	 */
	vertical : "vertical",

	/**
	 * Value both
	 * @public
	 */
	both : "both"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.controller.Interaction_selectability_mode.
jQuery.sap.declare("sap.viz.ui5.types.controller.Interaction_selectability_mode");
/**
 * @class List (Enum) type ui5/types/controller/Interaction_selectability_mode
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.controller.Interaction_selectability_mode = {

	/**
	 * Value exclusive
	 * @public
	 */
	exclusive : "exclusive",

	/**
	 * Value inclusive
	 * @public
	 */
	inclusive : "inclusive",

	/**
	 * Value single
	 * @public
	 */
	single : "single",

	/**
	 * Value multiple
	 * @public
	 */
	multiple : "multiple",

	/**
	 * Value none
	 * @public
	 */
	none : "none"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.legend.Common_alignment.
jQuery.sap.declare("sap.viz.ui5.types.legend.Common_alignment");
/**
 * @class List (Enum) type ui5/types/legend/Common_alignment
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.legend.Common_alignment = {

	/**
	 * Value start
	 * @public
	 */
	start : "start",

	/**
	 * Value middle
	 * @public
	 */
	middle : "middle",

	/**
	 * Value end
	 * @public
	 */
	end : "end"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.legend.Common_drawingEffect.
jQuery.sap.declare("sap.viz.ui5.types.legend.Common_drawingEffect");
/**
 * @class List (Enum) type ui5/types/legend/Common_drawingEffect
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.legend.Common_drawingEffect = {

	/**
	 * Value normal
	 * @public
	 */
	normal : "normal",

	/**
	 * Value glossy
	 * @public
	 */
	glossy : "glossy"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.legend.Common_position.
jQuery.sap.declare("sap.viz.ui5.types.legend.Common_position");
/**
 * @class List (Enum) type ui5/types/legend/Common_position
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.legend.Common_position = {

	/**
	 * Value top
	 * @public
	 */
	top : "top",

	/**
	 * Value bottom
	 * @public
	 */
	bottom : "bottom",

	/**
	 * Value right
	 * @public
	 */
	right : "right",

	/**
	 * Value left
	 * @public
	 */
	left : "left"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.viz.ui5.types.legend.Common_type.
jQuery.sap.declare("sap.viz.ui5.types.legend.Common_type");
/**
 * @class List (Enum) type ui5/types/legend/Common_type
 *
 * @version 1.28.24
 * @static
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.types.legend.Common_type = {

	/**
	 * Value ColorLegend
	 * @public
	 */
	ColorLegend : "ColorLegend",

	/**
	 * Value BubbleColorLegend
	 * @public
	 */
	BubbleColorLegend : "BubbleColorLegend",

	/**
	 * Value SizeLegend
	 * @public
	 */
	SizeLegend : "SizeLegend",

	/**
	 * Value MeasureBasedColoringLegend
	 * @public
	 */
	MeasureBasedColoringLegend : "MeasureBasedColoringLegend"

};

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// check whether browser supports svg
sap.viz.__svg_support = !!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect;

if (sap.viz.__svg_support) {
    //enforce early loading of D3 and Charting lib to load sap.viz.core early
    jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained

    //	jQuery.sap.require("sap.viz.libs.d3");
    //	jQuery.sap.require("sap.viz.ui5.controls.libs.common.libs.jquery-ui.jquery-ui");
    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-draggable'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-droppable'); // unlisted dependency retained

    
    
    jQuery.sap.require('sap.viz.libs.sap-viz-info'); // unlisted dependency retained


    // include app/css
    jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.viz.ui5.controls.css", "/controls.css"));
}( function() {
        function initLegacySupport() {
            var LEGACY_NAMES = {
                "sap.viz.core.BaseChart" : "sap.viz.ui5.core.BaseChart",
                "sap.viz.core.BaseStructuredType" : "sap.viz.ui5.core.BaseStructuredType",
                "sap.viz.core.Dataset" : "sap.viz.ui5.data.Dataset",
                "sap.viz.core.DimensionDefinition" : "sap.viz.ui5.data.DimensionDefinition",
                "sap.viz.core.FlattenedDataset" : "sap.viz.ui5.data.FlattenedDataset",
                "sap.viz.core.MeasureDefinition" : "sap.viz.ui5.data.MeasureDefinition",
                "sap.viz.Bar" : "sap.viz.ui5.Bar",
                "sap.viz.Bubble" : "sap.viz.ui5.Bubble",
                "sap.viz.VerticalBar" : "sap.viz.ui5.Column",
                "sap.viz.Combination" : "sap.viz.ui5.Combination",
                "sap.viz.Donut" : "sap.viz.ui5.Donut",
                "sap.viz.Line" : "sap.viz.ui5.Line",
                "sap.viz.Pie" : "sap.viz.ui5.Pie",
                "sap.viz.Scatter" : "sap.viz.ui5.Scatter",
                "sap.viz.StackedVerticalBar" : "sap.viz.ui5.StackedColumn",
                "sap.viz.PercentageStackedVerticalBar" : "sap.viz.ui5.StackedColumn100"
            };

            // create stubs for the most important legacy class names
            jQuery.each(LEGACY_NAMES, function(sOld, sNew) {
                // delegate constructor
                jQuery.sap.setObject(sOld, function() {
                    jQuery.sap.log.warning("[Deprecated] chart '" + sOld + "' has been deprecated for several releases and will be removed soon. Use '" + sNew + "' instead.");
                    var oNewClass = jQuery.sap.getObject(sNew);
                    var oInstance = jQuery.sap.newObject(oNewClass.prototype);
                    return oNewClass.apply(oInstance, arguments) || oInstance;
                });
                // delegate extend
                jQuery.sap.setObject(sOld + ".extend", function() {
                    jQuery.sap.log.warning("[Deprecated] chart '" + sOld + "' has been deprecated for several releases and will be removed soon. Use '" + sNew + "' instead.");
                    return jQuery.sap.getObject(sNew).extend.apply(this, arguments);
                });

                // delegate getMetadata
                jQuery.sap.setObject(sOld + ".getMetadata", function() {
                    jQuery.sap.log.warning("[Deprecated] chart '" + sOld + "' has been deprecated for several releases and will be removed soon. Use '" + sNew + "' instead.");
                    return jQuery.sap.getObject(sNew).getMetadata.apply(this, arguments);
                });
            });

            // create stubs for the enum types (static classes)
            var oLibrary = sap.ui.getCore().getLoadedLibraries()["sap.viz"];
            if (oLibrary && oLibrary.types) {
                jQuery.each(oLibrary.types, function(idx, sName) {
                    if (sName.indexOf("sap.viz.ui5.types.") === 0) {
                        jQuery.sap.setObject("sap.viz.types." + sName.slice("sap.viz.ui5.types.".length), jQuery.sap.getObject(sName));
                    }
                });
            }
        }

        initLegacySupport();

        var bChartResourceRequested = false;
        var vizContainerInfo = {
            // unloaded, loading, loaded
            'status' : 'unloaded'
        };

        /*
         * For Viz Chart, it only needs to load chart resources.
         */
        sap.viz._initializeVIZ = function() {
            if (!sap.viz.__svg_support) {
                return;
            }
            if (bChartResourceRequested) {
                return;
            }
            // Load chart resources only
            sap.viz._initializeENV(true);
            bChartResourceRequested = true;
        };

        /*
         * For VizContainer, both chart and vizContainer resource should be loaded.
         */
        sap.viz._initializeVIZControls = function(isVizContainer, callback) {
            if (!sap.viz.__svg_support) {
                callback(false);
            }
            if (vizContainerInfo.status === 'unloaded') {
                vizContainerInfo.callbacks = [callback];
                vizContainerInfo.status = 'loading';
                // Load
                sap.viz._initializeENV(!bChartResourceRequested, isVizContainer ? 'container' : 'controls', function() {
                    vizContainerInfo.status = 'loaded';
                    if (vizContainerInfo && vizContainerInfo.callbacks) {
                        for (var i = 0; i < vizContainerInfo.callbacks.length; i++) {
                            vizContainerInfo.callbacks[i](true);
                        }
                        delete vizContainerInfo.callbacks;
                    }
                });
                // Update status
                bChartResourceRequested = true;
            } else if (vizContainerInfo.status === 'loading') {
                vizContainerInfo.callbacks.push(callback);
            } else if (vizContainerInfo.status === 'loaded') {
                callback(true);
            }
        };

        /*
         * Initialize the environment settings.
         */
        sap.viz._initializeENV = function(bLoadChartResouce, pathVizControls, callback) {
            // Initialize the path
            var sPaths = sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths") || [];
            if (bLoadChartResouce) {
                // Override the build in path for chart
                sPaths = [];
                sPaths.push(jQuery.sap.getModulePath("sap.viz.resources.chart.langs", "/"));
                sPaths.push(jQuery.sap.getModulePath("sap.viz.resources.framework.langs", "/"));
            }
            if (pathVizControls === 'container') {
                sPaths.push(jQuery.sap.getModulePath("sap.viz.ui5.container.libs.locale", "/"));
            } else if (pathVizControls === 'controls') {
                sPaths.push(jQuery.sap.getModulePath("sap.viz.ui5.controls.libs.resources.locale", "/"));
            }
            // Load
            if (sPaths.length > 0) {
                if (pathVizControls) {
	            	// Format
	            	sap.viz.api.env.Format.useDefaultFormatter(true);
                }
                // Resource path
                sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths", sPaths);
                jQuery.sap.log.info("VIZ: load path for lang manager set to " + sPaths);
                // Default assets root
                if (pathVizControls) {
                    var GlobalConfig = sap.viz.controls.common.config.GlobalConfig;
                    if (pathVizControls === 'container') {
                    	GlobalConfig.defaultAssetsRoot(jQuery.sap.getModulePath('sap.viz.ui5.container.libs', '/'));
                    } else if (pathVizControls === 'controls') {
                    	GlobalConfig.defaultAssetsRoot(jQuery.sap.getModulePath('sap.viz.ui5.controls.libs.resources', '/'));
                    }
                }
                // Theme
                if (pathVizControls) {
                    sap.viz.api.env.Resource.path("sap.viz.api.env.Template.loadPaths", [jQuery.sap.getModulePath("sap.viz.resources.chart.templates", "/")]);
                    sap.ui.getCore().attachThemeChanged(function(evt) {
                        sap.viz._applyTheme();
                    });
                    sap.viz._applyTheme();
                }
                // Locale
                sap.ui.getCore().attachLocalizationChanged(function(evt) {
                    sap.viz._applyLocale();
                });
                sap.viz._applyLocale(callback);
            }
        };

        sap.viz._applyTheme = function() {
            // Get theme from ui5
            var theme = sap.ui.getCore().getConfiguration().getTheme();
            // Set template to viz
            if (theme === 'sap_bluecrystal') {
                sap.viz._changeTemplate('bluecrystal');
            } else if (theme === 'sap_hcb') {
                sap.viz._changeTemplate('highcontrast_fiori');
            } else {
                sap.viz._changeTemplate('bluecrystal');
            }
            // Reset color mapping
            jQuery.sap.require("sap.ui.core.theming.Parameters");
            var mapping = {};
            var write = function(key) {
                var color = sap.ui.core.theming.Parameters.get(key);
                if (color) {
                    mapping[key] = color;
                }
            };
            // Qualitative color
            write('sapUiChartPaletteQualitativeHue1');
            write('sapUiChartPaletteQualitativeHue2');
            write('sapUiChartPaletteQualitativeHue3');
            write('sapUiChartPaletteQualitativeHue4');
            write('sapUiChartPaletteQualitativeHue5');
            write('sapUiChartPaletteQualitativeHue6');
            write('sapUiChartPaletteQualitativeHue7');
            write('sapUiChartPaletteQualitativeHue8');
            write('sapUiChartPaletteQualitativeHue9');
            write('sapUiChartPaletteQualitativeHue10');
            write('sapUiChartPaletteQualitativeHue11');
            // Semantic color
            write('sapUiChartPaletteSemanticBadLight3');
            write('sapUiChartPaletteSemanticBadLight2');
            write('sapUiChartPaletteSemanticBadLight1');
            write('sapUiChartPaletteSemanticBad');
            write('sapUiChartPaletteSemanticBadDark1');
            write('sapUiChartPaletteSemanticBadDark2');
            write('sapUiChartPaletteSemanticCriticalLight3');
            write('sapUiChartPaletteSemanticCriticalLight2');
            write('sapUiChartPaletteSemanticCriticalLight1');
            write('sapUiChartPaletteSemanticCritical');
            write('sapUiChartPaletteSemanticCriticalDark1');
            write('sapUiChartPaletteSemanticCriticalDark2');
            write('sapUiChartPaletteSemanticGoodLight3');
            write('sapUiChartPaletteSemanticGoodLight2');
            write('sapUiChartPaletteSemanticGoodLight1');
            write('sapUiChartPaletteSemanticGood');
            write('sapUiChartPaletteSemanticGoodDark1');
            write('sapUiChartPaletteSemanticGoodDark2');
            write('sapUiChartPaletteSemanticNeutralLight3');
            write('sapUiChartPaletteSemanticNeutralLight2');
            write('sapUiChartPaletteSemanticNeutralLight1');
            write('sapUiChartPaletteSemanticNeutral');
            write('sapUiChartPaletteSemanticNeutralDark1');
            write('sapUiChartPaletteSemanticNeutralDark2');
            // Sequential color
            write('sapUiChartPaletteSequentialHue1Light3');
            write('sapUiChartPaletteSequentialHue1Light2');
            write('sapUiChartPaletteSequentialHue1Light1');
            write('sapUiChartPaletteSequentialHue1');
            write('sapUiChartPaletteSequentialHue1Dark1');
            write('sapUiChartPaletteSequentialHue1Dark2');
            write('sapUiChartPaletteSequentialHue2Light3');
            write('sapUiChartPaletteSequentialHue2Light2');
            write('sapUiChartPaletteSequentialHue2Light1');
            write('sapUiChartPaletteSequentialHue2');
            write('sapUiChartPaletteSequentialHue2Dark1');
            write('sapUiChartPaletteSequentialHue2Dark2');
            write('sapUiChartPaletteSequentialHue3Light3');
            write('sapUiChartPaletteSequentialHue3Light2');
            write('sapUiChartPaletteSequentialHue3Light1');
            write('sapUiChartPaletteSequentialHue3');
            write('sapUiChartPaletteSequentialHue3Dark1');
            write('sapUiChartPaletteSequentialHue3Dark2');
            write('sapUiChartPaletteSequentialNeutralLight3');
            write('sapUiChartPaletteSequentialNeutralLight2');
            write('sapUiChartPaletteSequentialNeutralLight1');
            write('sapUiChartPaletteSequentialNeutral');
            write('sapUiChartPaletteSequentialNeutralDark1');
            write('sapUiChartPaletteSequentialNeutralDark2');
            sap.viz.api.env.globalSettings({
            	'colorMapping': mapping
            })
        };

        sap.viz._changeTemplate = function(template) {
            if (sap.viz.api.env.Template.get() !== template) {
                sap.viz.api.env.Template.set(template);
            }
        };

        sap.viz._applyLocale = function(callback) {
            // Get locale from ui5
            var oLocale = sap.ui.getCore().getConfiguration().getLocale();
            var sVIZLanguageId = oLocale.getLanguage();
            if (sVIZLanguageId === 'zh') {
                sVIZLanguageId = oLocale.getLanguage() + (oLocale.getRegion() ? "_" + oLocale.getRegion() : "");
            }
            // Set locale to viz
            sap.viz.api.env.Locale.set(sVIZLanguageId, function() {
                if (callback) {
                    callback();
                }
            });
            jQuery.sap.log.info("VIZ: env initialized (locale=" + sap.ui.getCore().getConfiguration().getLanguage() + ")");
        };
    }());

}; // end of sap/viz/library.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.common.BaseControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.controls.common.BaseControl.
jQuery.sap.declare("sap.viz.ui5.controls.common.BaseControl");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui5/controls/common/BaseControl.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUiConfig uiConfig} : object</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '640px')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '480px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An abstract base class for all VIZ controls
 * @extends sap.ui.core.Control
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.22.0
 * @name sap.viz.ui5.controls.common.BaseControl
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.viz.ui5.controls.common.BaseControl", { metadata : {

	library : "sap.viz",
	properties : {
		"uiConfig" : {type : "object", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '640px'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '480px'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.controls.common.BaseControl with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.controls.common.BaseControl.extend
 * @function
 */


/**
 * Getter for property <code>uiConfig</code>.
 * Configuration for initialization to VizControl. This property could only set via settings parameter in Constructor.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>uiConfig</code>
 * @public
 * @name sap.viz.ui5.controls.common.BaseControl#getUiConfig
 * @function
 */

/**
 * Setter for property <code>uiConfig</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oUiConfig  new value for property <code>uiConfig</code>
 * @return {sap.viz.ui5.controls.common.BaseControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.BaseControl#setUiConfig
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the VizControl as a CSS size.
 *
 * Default value is <code>640px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.viz.ui5.controls.common.BaseControl#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>640px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.controls.common.BaseControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.BaseControl#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the VizControl as a CSS size.
 *
 * Default value is <code>480px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.viz.ui5.controls.common.BaseControl#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>480px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.viz.ui5.controls.common.BaseControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.BaseControl#setHeight
 * @function
 */

// Start of sap/viz/ui5/controls/common/BaseControl.js

sap.viz.ui5.controls.common.BaseControl.prototype.init = function() {
	this._app$ = null;
	this._controls = {};

	this._requestedLoad = null;

	this._handlers = {
		'resize' : null
	};

	this._theme = null;
	this._locale = null;

	this._pendingRerendering = false;
	// Load resources.
	this._resourceLoaded = false;
	sap.viz._initializeVIZControls(this instanceof sap.viz.ui5.VizContainer,jQuery.proxy(function(success) {
		this._resourceLoaded = success;

		this.invalidate();
		// Set timeout to assure applySetting done
		setTimeout(function() {
			if (!this.getUIArea()) {
				this._render();
			}
		}.bind(this), 0);
	}, this));
};

sap.viz.ui5.controls.common.BaseControl.prototype.exit = function() {
	this._app$ = null;

	this._deregister();

	for ( var keyword in this._controls) {
		this._controls[keyword].destroy();
	}
};

sap.viz.ui5.controls.common.BaseControl.prototype.onBeforeRendering = function() {
	this._deregister();
};

sap.viz.ui5.controls.common.BaseControl.prototype.onAfterRendering = function() {
	this._render();
};

sap.viz.ui5.controls.common.BaseControl.prototype.onThemeChanged = function() {
	if (this._theme !== sap.ui.getCore().getConfiguration().getTheme()) {
		this._render();
	}
};

sap.viz.ui5.controls.common.BaseControl.prototype.onLocalizationChanged = function() {
	if (this._locale !== sap.ui.getCore().getConfiguration().getLocale()) {
		this._render();
	}
};

sap.viz.ui5.controls.common.BaseControl.prototype.save = function() {
	var json = {};
	for ( var keyword in this._controls) {
		json[keyword] = this._controls[keyword].save();
	}
	return json;
};

sap.viz.ui5.controls.common.BaseControl.prototype.load = function(oJson) {
	for ( var keyword in oJson) {
		if (this._controls[keyword]) {
			this._controls[keyword].load(oJson[keyword]);
		} else {
			this._requestedLoad = oJson;
		}
	}
};

sap.viz.ui5.controls.common.BaseControl.prototype._render = function() {
	if (this._resourceLoaded && this.getDomRef()) {
		this._pendingRerendering = false;

		this._theme = sap.ui.getCore().getConfiguration().getTheme();
		this._locale = sap.ui.getCore().getConfiguration().getLocale();

		if (!this._app$) {
			this._app$ = jQuery(document.createElement('div')).appendTo(
					this.getDomRef()).addClass('ui5-viz-controls-app');
			jQuery(this._app$).attr("data-sap-ui-preserve", true);

			this._validateSize();
			this._createChildren();
		} else {
			this._app$.appendTo(this.getDomRef());
			this._validateSize();
			this._updateChildren();
		}
		this._register();
	}
};

sap.viz.ui5.controls.common.BaseControl.prototype._createChildren = function() {
	// Should override by implementation
};
sap.viz.ui5.controls.common.BaseControl.prototype._updateChildren = function() {
	// Should override by implementation
};

sap.viz.ui5.controls.common.BaseControl.prototype._deregister = function() {
	if (this._handlers.resize) {
		sap.ui.core.ResizeHandler.deregister(this._handlers.resize);
	}
	this._handlers.resize = null;
};

sap.viz.ui5.controls.common.BaseControl.prototype._register = function() {
	this._handlers.resize = sap.ui.core.ResizeHandler.register(
			this.getDomRef(), jQuery.proxy(this._validateSize, this));
};

sap.viz.ui5.controls.common.BaseControl.prototype._validateSize = function() {
	// Should override by implementation
};

sap.viz.ui5.controls.common.BaseControl.prototype._registerControl = function(
		keyword, control) {
	this._controls[keyword] = control;

	if (this._requestedLoad && this._requestedLoad[keyword]) {
		control.load(this._requestedLoad[keyword]);
		delete this._requestedLoad[keyword];
	}
};

sap.viz.ui5.controls.common.BaseControl.prototype.invalidate = function() {
	sap.ui.core.Control.prototype.invalidate.apply(this, arguments);

	if (this.getUIArea()) {
		this._pendingRerendering = true;
	}
};

}; // end of sap/viz/ui5/controls/common/BaseControl.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.common.feeds.AnalysisObject') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.controls.common.feeds.AnalysisObject.
jQuery.sap.declare("sap.viz.ui5.controls.common.feeds.AnalysisObject");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ui5/controls/common/feeds/AnalysisObject.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUid uid} : string</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getType type} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * AnalysisObject Class
 * @extends sap.ui.core.Element
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.21.0
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.viz.ui5.controls.common.feeds.AnalysisObject", { metadata : {

	library : "sap.viz",
	properties : {
		"uid" : {type : "string", group : "Misc", defaultValue : null},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.controls.common.feeds.AnalysisObject with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject.extend
 * @function
 */


/**
 * Getter for property <code>uid</code>.
 * Uid of analysis object
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uid</code>
 * @public
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject#getUid
 * @function
 */

/**
 * Setter for property <code>uid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUid  new value for property <code>uid</code>
 * @return {sap.viz.ui5.controls.common.feeds.AnalysisObject} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject#setUid
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * Name of an analysis object. Enumeration: Measure, Dimension
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.viz.ui5.controls.common.feeds.AnalysisObject} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject#setName
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of an analysis object
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.viz.ui5.controls.common.feeds.AnalysisObject} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject#setType
 * @function
 */

// Start of sap/viz/ui5/controls/common/feeds/AnalysisObject.js
///**
// * This file defines behavior for the control,
// */
sap.viz.ui5.controls.common.feeds.AnalysisObject.prototype._toInstance = function() {
	var uid = this.getProperty('uid');
	var name = this.getProperty('name');
	var type = this.getProperty('type');
	if (uid && type) {
		return new sap.viz.controls.common.feeds.AnalysisObject(uid, name, type);
	}
};
sap.viz.ui5.controls.common.feeds.AnalysisObject.prototype.setType = function(type) {
	if (type) {
		type = type.toLowerCase();
	}
	this.setProperty('type', type);
	return this;
};

/**
 * Deserialize a JSON to AnalysisObject instance
 *
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject.fromJSON
 * @function
 * @param {object}
 *            oJsonObj
 *
 *
 * @type sap.viz.ui5.controls.common.feeds.AnalysisObject
 * @public
 */
sap.viz.ui5.controls.common.feeds.AnalysisObject.fromJSON = function(json) {
	var instance = sap.viz.controls.common.feeds.AnalysisObject.fromJSON(json);
	return new sap.viz.ui5.controls.common.feeds.AnalysisObject({
		'uid' : instance.id(),
		'name' : instance.name(),
		'type' : instance.type(),
	});
};

/**
 * Serialize a AnalysisObject instance to JSON
 *
 * @name sap.viz.ui5.controls.common.feeds.AnalysisObject.toJSON
 * @function
 * @param {sap.viz.ui5.controls.common.feeds.AnalysisObject}
 *            oAObject
 *
 *
 * @type object
 * @public
 */
sap.viz.ui5.controls.common.feeds.AnalysisObject.toJSON = function(analysisObject) {
	var instance = analysisObject ? analysisObject._toInstance() : null;
	return sap.viz.controls.common.feeds.AnalysisObject.toJSON(instance);
};
sap.viz.ui5.controls.common.feeds.AnalysisObject.toAnalysisObjects = function(instances) {
	return Array.prototype.map.call(instances, function(instance, i, array) {
		return new sap.viz.ui5.controls.common.feeds.AnalysisObject({
			'uid': instance.id(),
			'name': instance.name(),
			'type': instance.type()
		});
	});
};
sap.viz.ui5.controls.common.feeds.AnalysisObject.toInstances = function(analysisObjects) {
	return Array.prototype.map.call(analysisObjects, function(analysisObject, i, array) {
		return analysisObject._toInstance();
	});
};

}; // end of sap/viz/ui5/controls/common/feeds/AnalysisObject.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.common.feeds.FeedItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.controls.common.feeds.FeedItem.
jQuery.sap.declare("sap.viz.ui5.controls.common.feeds.FeedItem");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ui5/controls/common/feeds/FeedItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUid uid} : string</li>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getValues values} : string[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * FeedItem Class
 * @extends sap.ui.core.Element
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.21.0
 * @name sap.viz.ui5.controls.common.feeds.FeedItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.viz.ui5.controls.common.feeds.FeedItem", { metadata : {

	library : "sap.viz",
	properties : {
		"uid" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "string", group : "Misc", defaultValue : null},
		"values" : {type : "string[]", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.controls.common.feeds.FeedItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.controls.common.feeds.FeedItem.extend
 * @function
 */


/**
 * Getter for property <code>uid</code>.
 * Uid of a feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uid</code>
 * @public
 * @name sap.viz.ui5.controls.common.feeds.FeedItem#getUid
 * @function
 */

/**
 * Setter for property <code>uid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUid  new value for property <code>uid</code>
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.feeds.FeedItem#setUid
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of a feed item. Enumeration: Measure, Dimension
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.viz.ui5.controls.common.feeds.FeedItem#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.feeds.FeedItem#setType
 * @function
 */


/**
 * Getter for property <code>values</code>.
 * Value of a feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>values</code>
 * @public
 * @name sap.viz.ui5.controls.common.feeds.FeedItem#getValues
 * @function
 */

/**
 * Setter for property <code>values</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aValues  new value for property <code>values</code>
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.common.feeds.FeedItem#setValues
 * @function
 */

// Start of sap/viz/ui5/controls/common/feeds/FeedItem.js
///**
// * This file defines behavior for the control,
// */



// /**
// * This file defines behavior for the control,
// */
sap.viz.ui5.controls.common.feeds.FeedItem.prototype._toInstance = function() {
	var uid = this.getProperty('uid');
	var type = this.getProperty('type');
	var values = this.getProperty('values');
	
	if (uid && type) {
		var valueInstances = [];
		this._analysisObjects = [];
		if (values) {
			values.forEach( function(value, index, values) {
				if (typeof value === 'string') {
					this._analysisObjects[index] = new sap.viz.ui5.controls.common.feeds.AnalysisObject({
						'uid' : value,
						'name' : value,
						'type' : type
					});
				} else {
					this._analysisObjects[index] = value;
				}
			}.bind(this));

			valueInstances = sap.viz.ui5.controls.common.feeds.AnalysisObject.toInstances(this._analysisObjects);
		}
		return new sap.viz.controls.common.feeds.FeedItem(uid, type, valueInstances);
	}
};

/**
 * Uid of a feed item. 
 * Please reference to feeds section in this doc to get the exact sUid string for each chart type.
 * 
 * For example:
 * 	Bar chart > bindings > categoryAxis ; color ; valueAxis.
 * 	The 'categoryAxis' should be the sUid for x axis feeding for bar chart.
 *
 * @param {string}
 *            sUid
 * @returns {sap.viz.ui5.controls.common.feeds.FeedItem}
 * @public
 * @function sap.viz.ui5.controls.common.feeds.FeedItem.prototype.setUid
 */
sap.viz.ui5.controls.common.feeds.FeedItem.prototype.setUid = function(sUid) {
	this.setProperty('uid', sUid);
	return this;
};

sap.viz.ui5.controls.common.feeds.FeedItem.prototype.getAnalysisObjects = function() {
	this._toInstance();
	return this._analysisObjects;
};

/**
 * Deserialize a JSON to FeedItem instance
 *
 * @name sap.viz.ui5.controls.common.feeds.FeedItem.fromJSON
 * @function
 * @param {Object}
 *            oJsonObj
 *
 * @type sap.viz.ui5.controls.common.feeds.FeedItem
 * @public
 */
sap.viz.ui5.controls.common.feeds.FeedItem.fromJSON = function(oJsonObj) {
	return sap.viz.controls.common.feeds.FeedItem.fromJSON(oJsonObj);
};

/**
 * Serialize a FeedItem instance to JSON
 *
 * @name sap.viz.ui5.controls.common.feeds.FeedItem.toJSON
 * @function
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem}
 *            ofObject
 *
 * @type Object
 * @public
 */
sap.viz.ui5.controls.common.feeds.FeedItem.toJSON = function(ofObject) {
	return sap.viz.controls.common.feeds.FeedItem.toJSON(ofObject);
};

sap.viz.ui5.controls.common.feeds.FeedItem.toFeeds = function(instances) {
	return Array.prototype.map.call(instances, function(instance, i, array) {
		return new sap.viz.ui5.controls.common.feeds.FeedItem({
			'uid' : instance.id(),
			'type' : instance.type(),
			'values' : sap.viz.ui5.controls.common.feeds.AnalysisObject.toAnalysisObjects(instance.values())
		});
	});
};
sap.viz.ui5.controls.common.feeds.FeedItem.toInstances = function(feeds) {
	return Array.prototype.map.call(feeds, function(feed, i, array) {
		return feed._toInstance();
	});
};

}; // end of sap/viz/ui5/controls/common/feeds/FeedItem.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.core.BaseStructuredType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.core.BaseStructuredType.
jQuery.sap.declare("sap.viz.ui5.core.BaseStructuredType");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ui5/core/BaseStructuredType.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Abstract base class for all elements that represent VIZ modules or complex property types
 * @extends sap.ui.core.Element
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.core.BaseStructuredType
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.viz.ui5.core.BaseStructuredType", { metadata : {

	"abstract" : true,
	library : "sap.viz"
}});


/**
 * Creates a new subclass of class sap.viz.ui5.core.BaseStructuredType with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.core.BaseStructuredType.extend
 * @function
 */

// Start of sap/viz/ui5/core/BaseStructuredType.js
sap.viz.ui5.core.BaseStructuredType.prototype._getOrCreate = function(sName) {
  var o = this.getAggregation(sName);
  if ( !o ) {
  	var oAggregation = this.getMetadata().getAggregations()[sName];
  	jQuery.sap.require(oAggregation.type);
  	var FNClass = jQuery.sap.getObject(oAggregation.type);
    o = new FNClass();
    this.setAggregation(sName, o);
  }
  return o;
};

sap.viz.ui5.core.BaseStructuredType.prototype._getOptions = function(bIncludeDefaults) {

	var oMetadata = this.getMetadata(),
			mOptions = {},
			mProps,mDefaults,mAggrs,n,oValue;
	
	// HACK: convert UI5 wrapper names back to VIZ names
	function tovizKey(n) {
	  n = (n === 'toolTip' ? 'tooltip' : n);
		return n;
	}
	
	function tovizValue(n){
	  var result = n;
	  switch(n){
	  case 'triangleUp' : 
	    result = 'triangle-up';
	    break;
	  case 'triangleDown' :
	    result = 'triangle-down';
	    break;
	  case 'triangleLeft' :
	    result = 'triangle-left';
	    break;
	  case 'triangleRight' :
	    result = 'triangle-right';
	    break;
	  }
    return result;
	}
	
	// enforce enrichment of metadata 
	oMetadata.getJSONKeys();
	
	// collect non-default values for all VIZ properties with a simple type
	var mProps = oMetadata.getAllProperties();
	var mDefaults = oMetadata.getPropertyDefaults();
	for(n in mProps) {
		// assumption: a property is a VIZ property if and only if it has been introduced by this class
		// This check needs to be enhanced as soon as inheritance is reflected in the wrappers
		if ( mProps[n]._oParent === oMetadata ) {   
	    oValue = this.getProperty(n);
	    // use values only for non-default values
	    if(oValue instanceof Array){
	      if(bIncludeDefaults || !mDefaults[n] || oValue.toString() !== mDefaults[n].toString()){
	        mOptions[tovizKey(n)] = tovizValue(oValue);
	      }
	    }else{
  	    if ( bIncludeDefaults || oValue !== mDefaults[n] ) {
  	    	mOptions[tovizKey(n)] = tovizValue(oValue);
  	    }
	    }
		}
	}
	
	// collect non-null values for all VIZ properties with a complex type
	var mAggrs = oMetadata.getAllAggregations();
	for(n in mAggrs) {
		// assumption: an aggregation is a VIZ aggregation if and only if it has been introduced by this class
		// This check needs to be enhanced as soon as inheritance is reflected in the wrappers
		if ( mAggrs[n]._oParent == oMetadata ) {  
	    oValue = this.getAggregation(n, null);
	    if ( oValue !== null ) {
	    	// transitively retrieve options 
	    	mOptions[tovizKey(n)] = oValue._getOptions(bIncludeDefaults);
	    }
		}
	}
	
	return mOptions;
};

/**
 * Helper method to convert a given object into an object of the type expected by the given aggregation.
 * Used to mediate between old and new Interaction APIs.
 * 
 * Although this is a static method, <code>this</code> must be the object that will aggregate the given 
 * object. <code>this</code> will be used to determine the metadata of the aggregation
 * 
 * @return {object} the converted object or - if not applicable - the given object 
 */
sap.viz.ui5.core.BaseStructuredType._convertAggregatedObject = function(sAggregationName, oObject, bMultiple) {
	if ( oObject != null ) {
		// get aggregation information
		var oAggregation = this.getMetadata().getAllAggregations()[sAggregationName];
		// get class name of the given object
		var sClassName = oObject.getMetadata && oObject.getMetadata().getName();
		if ( oAggregation && sClassName !== oAggregation.type ) { // TODO inheritance?
			// ensure that the class for the type is loaded
			jQuery.sap.require(oAggregation.type);
			// create a new instance of the desired class with the options of the current one
			var fnClass = jQuery.sap.getObject(oAggregation.type);
			oObject = new fnClass(oObject._getOptions(true)); // also include default values as they might differ between types
			jQuery.sap.log.warning("[Deprecated] Type of aggregation '" + this.getMetadata().getName() + "." + sAggregationName + " has been changed from '" + sClassName + "' to '" + oAggregation.type + "'.");
		}
	}
	return oObject;
};

sap.viz.ui5.core.BaseStructuredType.prototype.validateProperty = function(sPropertyName, oValue) {
	if ( /^(lineSize|size)$/.test(sPropertyName) ) {
		var oProperty = this.getMetadata().getAllProperties()[sPropertyName];
		if ( oProperty && oProperty.type === "int" && typeof oValue !== "number" ) {
			oValue = oValue ? parseInt(oValue, 10) : null;
		}
	}
	return sap.ui.core.Element.prototype.validateProperty.call(this, sPropertyName, oValue);
};

sap.viz.ui5.core.BaseStructuredType.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple) {
	if ( sAggregationName === "selectability" ) {
		// can convert types in the following two cases 
		// - if a behaviors.Interaction receives a controller.Interaction_selectability (e.g. chart.GetInteraction().setSelectability(...) in old code)
		// - if a controller.Interaction receives a behaviors.Interaction_selectability
		oObject = sap.viz.ui5.core.BaseStructuredType._convertAggregatedObject.call(this, sAggregationName, oObject, bMultiple);
	}
	return sap.ui.core.Element.prototype.validateAggregation.call(this, sAggregationName, oObject, bMultiple);
};


}; // end of sap/viz/ui5/core/BaseStructuredType.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.data.Dataset') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.data.Dataset.
jQuery.sap.declare("sap.viz.ui5.data.Dataset");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ui5/data/Dataset.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Abstract Dataset implementation
 * @extends sap.ui.core.Element
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.data.Dataset
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.viz.ui5.data.Dataset", { metadata : {

	"abstract" : true,
	library : "sap.viz"
}});


/**
 * Creates a new subclass of class sap.viz.ui5.data.Dataset with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.data.Dataset.extend
 * @function
 */

// Start of sap/viz/ui5/data/Dataset.js

}; // end of sap/viz/ui5/data/Dataset.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.data.DimensionDefinition') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.data.DimensionDefinition.
jQuery.sap.declare("sap.viz.ui5.data.DimensionDefinition");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ui5/data/DimensionDefinition.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAxis axis} : int</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getName name} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Definition of a single dimension in a dataset
 * @extends sap.ui.core.Element
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.data.DimensionDefinition
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.viz.ui5.data.DimensionDefinition", { metadata : {

	library : "sap.viz",
	properties : {
		"axis" : {type : "int", group : "Misc", defaultValue : null},
		"value" : {type : "any", group : "Data", defaultValue : null},
		"name" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.data.DimensionDefinition with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.data.DimensionDefinition.extend
 * @function
 */


/**
 * Getter for property <code>axis</code>.
 * Number of axis this dimension belongs to. Currently must be 1 or 2.
 * Skip this property when use VizFrame.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>axis</code>
 * @public
 * @name sap.viz.ui5.data.DimensionDefinition#getAxis
 * @function
 */

/**
 * Setter for property <code>axis</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iAxis  new value for property <code>axis</code>
 * @return {sap.viz.ui5.data.DimensionDefinition} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.DimensionDefinition#setAxis
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Value for the dimension. Usually bound to some model field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>value</code>
 * @public
 * @name sap.viz.ui5.data.DimensionDefinition#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oValue  new value for property <code>value</code>
 * @return {sap.viz.ui5.data.DimensionDefinition} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.DimensionDefinition#setValue
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * Name of the dimension as displayed in the chart
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.viz.ui5.data.DimensionDefinition#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.viz.ui5.data.DimensionDefinition} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.DimensionDefinition#setName
 * @function
 */

// Start of sap/viz/ui5/data/DimensionDefinition.js
sap.viz.ui5.data.DimensionDefinition.prototype._getAdapter = function() {
	var that = this,
	  oBindingInfo = this.getBindingInfo("value"),
	  oValue, sPath, oType, fnFormatter;
	
	// if there is no binding info, then the value is constant
	if ( !oBindingInfo ) {
		oValue = this.getValue();
		return function() { 
			return oValue; 
		};
	}
	
	// otherwise ensure a simple property binding for now
	if ( oBindingInfo.parts.length > 1 ) {
		throw new Error("DimensionDefinition doesn't support calculated bindings yet");
	}
	
	sPath = oBindingInfo.parts[0].path;
	oType = oBindingInfo.parts[0].type;
	fnFormatter = oBindingInfo.formatter;
	
	// for simple binding just resolve the value
	if ( !(oType || fnFormatter) ) {
		return function(oContext) {
			return oContext.getProperty(sPath);
		}
	}

	// else apply type and/or formatter
	return function(oContext) {
		var oValue = oContext.getProperty(sPath);
		if (oType) {
			oValue = oType.formatValue(oValue, "string"); //TODO discuss internal type
		}
		if (fnFormatter) {
			oValue = fnFormatter.call(that, oValue, oContext);
		}
		return oValue;
	};

}

}; // end of sap/viz/ui5/data/DimensionDefinition.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.data.FlattenedDataset') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.data.FlattenedDataset.
jQuery.sap.declare("sap.viz.ui5.data.FlattenedDataset");




/**
 * Constructor for a new ui5/data/FlattenedDataset.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDimensions dimensions} : sap.viz.ui5.data.DimensionDefinition[]</li>
 * <li>{@link #getMeasures measures} : sap.viz.ui5.data.MeasureDefinition[]</li>
 * <li>{@link #getData data} : sap.ui.core.Element[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.data.Dataset#constructor sap.viz.ui5.data.Dataset}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A dataset for flattened (redundant) data using a tabular format.
 * @extends sap.viz.ui5.data.Dataset
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.data.FlattenedDataset
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.data.Dataset.extend("sap.viz.ui5.data.FlattenedDataset", { metadata : {

	library : "sap.viz",
	aggregations : {
		"dimensions" : {type : "sap.viz.ui5.data.DimensionDefinition", multiple : true, singularName : "dimension"}, 
		"measures" : {type : "sap.viz.ui5.data.MeasureDefinition", multiple : true, singularName : "measure"}, 
		"data" : {type : "sap.ui.core.Element", multiple : true, singularName : "data", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.data.FlattenedDataset with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.data.FlattenedDataset.extend
 * @function
 */


/**
 * Getter for aggregation <code>dimensions</code>.<br/>
 * List of definitions of all dimensions in this dataset
 * 
 * @return {sap.viz.ui5.data.DimensionDefinition[]}
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#getDimensions
 * @function
 */


/**
 * Inserts a dimension into the aggregation named <code>dimensions</code>.
 *
 * @param {sap.viz.ui5.data.DimensionDefinition}
 *          oDimension the dimension to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the dimension should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the dimension is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the dimension is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#insertDimension
 * @function
 */

/**
 * Adds some dimension <code>oDimension</code> 
 * to the aggregation named <code>dimensions</code>.
 *
 * @param {sap.viz.ui5.data.DimensionDefinition}
 *            oDimension the dimension to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#addDimension
 * @function
 */

/**
 * Removes an dimension from the aggregation named <code>dimensions</code>.
 *
 * @param {int | string | sap.viz.ui5.data.DimensionDefinition} vDimension the dimension to remove or its index or id
 * @return {sap.viz.ui5.data.DimensionDefinition} the removed dimension or null
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#removeDimension
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>dimensions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.viz.ui5.data.DimensionDefinition[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#removeAllDimensions
 * @function
 */

/**
 * Checks for the provided <code>sap.viz.ui5.data.DimensionDefinition</code> in the aggregation named <code>dimensions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.viz.ui5.data.DimensionDefinition}
 *            oDimension the dimension whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#indexOfDimension
 * @function
 */
	

/**
 * Destroys all the dimensions in the aggregation 
 * named <code>dimensions</code>.
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#destroyDimensions
 * @function
 */


/**
 * Getter for aggregation <code>measures</code>.<br/>
 * list of definitions of all measures in this dataset
 * 
 * @return {sap.viz.ui5.data.MeasureDefinition[]}
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#getMeasures
 * @function
 */


/**
 * Inserts a measure into the aggregation named <code>measures</code>.
 *
 * @param {sap.viz.ui5.data.MeasureDefinition}
 *          oMeasure the measure to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the measure should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the measure is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the measure is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#insertMeasure
 * @function
 */

/**
 * Adds some measure <code>oMeasure</code> 
 * to the aggregation named <code>measures</code>.
 *
 * @param {sap.viz.ui5.data.MeasureDefinition}
 *            oMeasure the measure to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#addMeasure
 * @function
 */

/**
 * Removes an measure from the aggregation named <code>measures</code>.
 *
 * @param {int | string | sap.viz.ui5.data.MeasureDefinition} vMeasure the measure to remove or its index or id
 * @return {sap.viz.ui5.data.MeasureDefinition} the removed measure or null
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#removeMeasure
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>measures</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.viz.ui5.data.MeasureDefinition[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#removeAllMeasures
 * @function
 */

/**
 * Checks for the provided <code>sap.viz.ui5.data.MeasureDefinition</code> in the aggregation named <code>measures</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.viz.ui5.data.MeasureDefinition}
 *            oMeasure the measure whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#indexOfMeasure
 * @function
 */
	

/**
 * Destroys all the measures in the aggregation 
 * named <code>measures</code>.
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#destroyMeasures
 * @function
 */


/**
 * Getter for aggregation <code>data</code>.<br/>
 * Data containing dimensions and measures.
 * 
 * <b>Note:</b> This aggregation can only be bound against a model, it cannot be managed
 * programmatically using the aggregation mutator methods like addData.
 * 
 * @return {sap.ui.core.Element[]}
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#getData
 * @function
 */


/**
 * Inserts a data into the aggregation named <code>data</code>.
 *
 * @param {sap.ui.core.Element}
 *          oData the data to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the data should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the data is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the data is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#insertData
 * @function
 */

/**
 * Adds some data <code>oData</code> 
 * to the aggregation named <code>data</code>.
 *
 * @param {sap.ui.core.Element}
 *            oData the data to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#addData
 * @function
 */

/**
 * Removes an data from the aggregation named <code>data</code>.
 *
 * @param {int | string | sap.ui.core.Element} vData the data to remove or its index or id
 * @return {sap.ui.core.Element} the removed data or null
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#removeData
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>data</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Element[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#removeAllData
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation named <code>data</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Element}
 *            oData the data whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#indexOfData
 * @function
 */
	

/**
 * Destroys all the data in the aggregation 
 * named <code>data</code>.
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#destroyData
 * @function
 */


/**
 * Binder for aggregation <code>data</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#bindData
 * @function
 */

/**
 * Unbinder for aggregation <code>data</code>.
 *
 * @return {sap.viz.ui5.data.FlattenedDataset} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.FlattenedDataset#unbindData
 * @function
 */

// Start of sap/viz/ui5/data/FlattenedDataset.js
// enable calling 'bindAggregation("data")' without a factory
sap.viz.ui5.data.FlattenedDataset.getMetadata().getAllAggregations()["data"]._doesNotRequireFactory = true;

sap.viz.ui5.data.FlattenedDataset.prototype.init = function() {
    this._transformer = null;
};

sap.viz.ui5.data.FlattenedDataset.prototype.updateData = function() {
    this.invalidate();
};

// override standard aggregation methods for 'data' and report an error when they are used
jQuery.each("add destroy get indexOf insert remove removeAll".split(" "), function(i, sMethod) {
    var sMessage = "FlattenedDataset manages the 'data' aggregation only via data binding. The method '" + sMethod + "Data' therefore cannot be used programmatically!";
    sap.viz.ui5.data.FlattenedDataset.prototype[sMethod + "Data"] = function() {
        jQuery.sap.log.error(sMessage);
    };
});

/**
 * @returns sap.viz.api.data.FlatTableDataset
 */
sap.viz.ui5.data.FlattenedDataset.prototype.getVIZFlatDataset = function() {
	jQuery.sap.require('sap.viz.ui5.data.transformers.ModelToFlattable');
    return this._transform(sap.viz.ui5.data.transformers.ModelToFlattable);
};

/**
 * @returns sap.viz.data.CrosstableDataset
 */
sap.viz.ui5.data.FlattenedDataset.prototype.getVIZDataset = function() {
	jQuery.sap.require('sap.viz.ui5.data.transformers.ModelToCrosstable');
    return this._transform(sap.viz.ui5.data.transformers.ModelToCrosstable);
};

sap.viz.ui5.data.FlattenedDataset.prototype._transform = function(Transformer) {
    if (!this._transformer || !(this._transformer instanceof Transformer)) {
        this._transformer = new Transformer();
    }
    // @formatter:off
    return this._transformer.getVizDataset(
        this.getBinding("data"), this.getDimensions(), this.getMeasures(), 
        this._defaultSelectionInfo, this._info);
    // @formatter:on
};

sap.viz.ui5.data.FlattenedDataset.prototype.invalidate = function(oOther) {
    if (this._transformer) {
        this._transformer.reset();
    }
    sap.ui.core.Element.prototype.invalidate.apply(this, arguments);
};

/**
 * Set chart's default selection.
 * This api will do nothing when use VizFrame.
 *
 * @param {object[]} Array of default selection info
 * @deprecated Since 1.19.
 * Please use selection API {sap.viz.ui5.core.BaseChart.prototype.selection}.
 * @public
 */
sap.viz.ui5.data.FlattenedDataset.prototype.setDefaultSelection = function(selectionInfos) {
    // Deprecated
    // Will not apply to crosstable already created
    this._defaultSelectionInfo = {
        'type' : 'defaultSelection',
        'value' : selectionInfos
    };
};

/**
 * Get/Set additional info for the crosstable dataset By now, only "additionalData" info type is supported.
 * This api will do nothing when use VizFrame.
 *
 * @param {object[]} Array of Objects is for setting info and passes different types of infos objects.
 */
sap.viz.ui5.data.FlattenedDataset.prototype.info = function(values) {
    if ( values instanceof Array) {
        // Deprecated, not public
        // Will not apply to crosstable already created
        this._info = values;
    } else if (values === undefined || typeof values === 'string') {
        if (this._transformer && this._transformer instanceof sap.viz.ui5.data.transformers.ModelToCrosstable) {
            var crosstable = sap.viz.ui5.data.transformers.ModelToCrosstable.prototype.getVizDataset();
            if (crosstable) {
                return crosstable.info(values);
            }
        }
    }
};

/**
 * Find the model context for a given 'criteria' into chart data.
 *
 * The native sap.viz library provides data objects with the
 * <code>selectData</code> event. Applications can call this method for each data
 * in a selectData event to find the corresponding UI5 model context.
 *
 * When the dataset has not been converted into a VIZ dataset yet
 * (e.g. no rendering yet)  or when the coordinates of the path are not within
 * the range of the current dataset, then undefined will be returned.
 *
 * Example when use sap.viz.ui5.*:
 * <pre>
 * selectData: function(oEvent) {
 *   var aSelectData = oEvent.getParameter("data");
 *   var oContext = this.getDataset().findContext(aSelectData[0].data[0].ctx.path);
 * }
 * </pre>
 * Example when use sap.viz.ui5.controls.VizFrame:
 * <pre>
 * selectData: function(oEvent) {
 *   var aSelectData = oEvent.getParameter("data");
 *   var oContext = this.getDataset().findContext(aSelectData[0].data);
 * }
 * </pre>
 *
 * @param {object} oCriteria a structure as provided by the sap.viz library
 * @return {sap.ui.model.Context} the model context for the given criteria or undefined.
 * @experimental Since 1.16.6. Might later be integrated into the selectData event.
 * @public
 */
sap.viz.ui5.data.FlattenedDataset.prototype.findContext = function(oCriteria) {
	if (this._transformer) {
		return this._transformer.findContext(oCriteria);
	}
};

}; // end of sap/viz/ui5/data/FlattenedDataset.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.data.MeasureDefinition') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.data.MeasureDefinition.
jQuery.sap.declare("sap.viz.ui5.data.MeasureDefinition");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ui5/data/MeasureDefinition.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getGroup group} : int (default: 1)</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getName name} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Definition of a single Measure
 * @extends sap.ui.core.Element
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.data.MeasureDefinition
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.viz.ui5.data.MeasureDefinition", { metadata : {

	library : "sap.viz",
	properties : {
		"group" : {type : "int", group : "Misc", defaultValue : 1},
		"value" : {type : "any", group : "Data", defaultValue : null},
		"name" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.data.MeasureDefinition with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.data.MeasureDefinition.extend
 * @function
 */


/**
 * Getter for property <code>group</code>.
 * Measure group this measure belongs to. Order is significant, number should start from 1.
 * Skip this property when use VizFrame.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>group</code>
 * @public
 * @name sap.viz.ui5.data.MeasureDefinition#getGroup
 * @function
 */

/**
 * Setter for property <code>group</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iGroup  new value for property <code>group</code>
 * @return {sap.viz.ui5.data.MeasureDefinition} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.MeasureDefinition#setGroup
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Value for the measure. Usually bound to some model field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>value</code>
 * @public
 * @name sap.viz.ui5.data.MeasureDefinition#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oValue  new value for property <code>value</code>
 * @return {sap.viz.ui5.data.MeasureDefinition} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.MeasureDefinition#setValue
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * Name of the measure as displayed in the chart
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.viz.ui5.data.MeasureDefinition#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.viz.ui5.data.MeasureDefinition} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.data.MeasureDefinition#setName
 * @function
 */

// Start of sap/viz/ui5/data/MeasureDefinition.js
sap.viz.ui5.data.MeasureDefinition.prototype._getAdapter = function() {
	var that = this,
	  oBindingInfo = this.getBindingInfo("value"),
	  oValue, sPath, oType, fnFormatter;
	
	// if there is no binding info, then the value is constant
	if ( !oBindingInfo ) {
		oValue = this.getValue();
		return function() { 
			return oValue; 
		};
	}
	
	// otherwise ensure a simple property binding for now
	if ( oBindingInfo.parts.length > 1 ) {
		throw new Error("MeasureDefinition doesn't support calculated bindings yet");
	}
	
	sPath = oBindingInfo.parts[0].path;
	oType = oBindingInfo.parts[0].type;
	fnFormatter = oBindingInfo.formatter;
	
	// for simple binding just resolve the value
	if ( !(oType || fnFormatter) ) {
		return function(oContext) {
			return oContext.getProperty(sPath);
		}
	}

	// else apply type and/or formatter
	return function(oContext) {
		var oValue = oContext.getProperty(sPath);
		if (oType) {
			oValue = oType.formatValue(oValue, "string"); //TODO discuss internal type
		}
		if (fnFormatter) {
			oValue = fnFormatter.call(that, oValue, oContext);
		}
		return oValue;
	};

}

}; // end of sap/viz/ui5/data/MeasureDefinition.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Area') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Area.
jQuery.sap.declare("sap.viz.ui5.types.Area");




/**
 * Constructor for a new ui5/types/Area.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Area_orientation (default: sap.viz.ui5.types.Area_orientation.vertical)</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Area_drawingEffect (default: sap.viz.ui5.types.Area_drawingEffect.normal)</li>
 * <li>{@link #getMode mode} : sap.viz.ui5.types.Area_mode (default: sap.viz.ui5.types.Area_mode.comparison)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Area_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Area_animation</li>
 * <li>{@link #getMarker marker} : sap.viz.ui5.types.Area_marker</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Area_hoverline</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Area
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Area", { metadata : {

	library : "sap.viz",
	properties : {
		"orientation" : {type : "sap.viz.ui5.types.Area_orientation", group : "", defaultValue : sap.viz.ui5.types.Area_orientation.vertical, deprecated: true},
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"primaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1']},
		"secondaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B']},
		"drawingEffect" : {type : "sap.viz.ui5.types.Area_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Area_drawingEffect.normal},
		"mode" : {type : "sap.viz.ui5.types.Area_mode", group : "", defaultValue : sap.viz.ui5.types.Area_mode.comparison, deprecated: true},
		"formatRules" : {type : "object[]", group : "", defaultValue : null}
	},
	aggregations : {
		"toolTip" : {type : "sap.viz.ui5.types.Area_tooltip", multiple : false, deprecated: true}, 
		"animation" : {type : "sap.viz.ui5.types.Area_animation", multiple : false}, 
		"marker" : {type : "sap.viz.ui5.types.Area_marker", multiple : false, deprecated: true}, 
		"hoverline" : {type : "sap.viz.ui5.types.Area_hoverline", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Area with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Area.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set whether the area chart is vertical or horizontal
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.Area_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.Area_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#setOrientation
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Area#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area#setColorPalette
 * @function
 */


/**
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set the color palette for axis 1 in dual charts.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 *
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Area#getPrimaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryValuesColorPalette</code>.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 *
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area#setPrimaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set the color palette for axis 2 in dual chart.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 *
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Area#getSecondaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryValuesColorPalette</code>.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 *
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area#setSecondaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Area_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Area#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Area_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * Set the display mode of the area chart
 *
 * Default value is <code>comparison</code>
 *
 * @return {sap.viz.ui5.types.Area_mode} the value of property <code>mode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>comparison</code> 
 *
 * @param {sap.viz.ui5.types.Area_mode} oMode  new value for property <code>mode</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#setMode
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Area#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area#setFormatRules
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for the tooltip
 * 
 * @return {sap.viz.ui5.types.Area_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Area_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.Area_animation}
 * @public
 * @name sap.viz.ui5.types.Area#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Area_animation} oAnimation
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>marker</code>.<br/>
 * Settings for marker and data point graphics
 * 
 * @return {sap.viz.ui5.types.Area_marker}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#getMarker
 * @function
 */


/**
 * Setter for the aggregated <code>marker</code>.
 * @param {sap.viz.ui5.types.Area_marker} oMarker
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#setMarker
 * @function
 */
	

/**
 * Destroys the marker in the aggregation 
 * named <code>marker</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#destroyMarker
 * @function
 */


/**
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for the hoverline.
 * 
 * @return {sap.viz.ui5.types.Area_hoverline}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#getHoverline
 * @function
 */


/**
 * Setter for the aggregated <code>hoverline</code>.
 * @param {sap.viz.ui5.types.Area_hoverline} oHoverline
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#setHoverline
 * @function
 */
	

/**
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area#destroyHoverline
 * @function
 */

// Start of sap/viz/ui5/types/Area.js
sap.viz.ui5.types.Area.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.types.Area.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Area.prototype.getMarker = function() {
  return this._getOrCreate("marker");
}
sap.viz.ui5.types.Area.prototype.getHoverline = function() {
  return this._getOrCreate("hoverline");
}

}; // end of sap/viz/ui5/types/Area.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Area_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Area_animation.
jQuery.sap.declare("sap.viz.ui5.types.Area_animation");




/**
 * Constructor for a new ui5/types/Area_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Area_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Area_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Area_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Area_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Area_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Area_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Area_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Area_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Area_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Area_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Area_animation.js

}; // end of sap/viz/ui5/types/Area_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Area_hoverline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Area_hoverline.
jQuery.sap.declare("sap.viz.ui5.types.Area_hoverline");




/**
 * Constructor for a new ui5/types/Area_hoverline.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the hoverline.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area_hoverline
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Area_hoverline", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Area_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Area_hoverline.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the hoverline.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Area_hoverline#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Area_hoverline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area_hoverline#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Area_hoverline.js

}; // end of sap/viz/ui5/types/Area_hoverline.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Area_marker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Area_marker.
jQuery.sap.declare("sap.viz.ui5.types.Area_marker");




/**
 * Constructor for a new ui5/types/Area_marker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShape shape} : sap.viz.ui5.types.Area_marker_shape (default: sap.viz.ui5.types.Area_marker_shape.circle)</li>
 * <li>{@link #getSize size} : int (default: 8)</li>
 * <li>{@link #getNumber number} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for marker and data point graphics
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area_marker
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Area_marker", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"shape" : {type : "sap.viz.ui5.types.Area_marker_shape", group : "", defaultValue : sap.viz.ui5.types.Area_marker_shape.circle},
		"size" : {type : "int", group : "", defaultValue : 8},
		"number" : {type : "int", group : "", defaultValue : null, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Area_marker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Area_marker.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the markers
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area_marker#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Area_marker} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area_marker#setVisible
 * @function
 */


/**
 * Getter for property <code>shape</code>.
 * Set the shape of the markers
 *
 * Default value is <code>circle</code>
 *
 * @return {sap.viz.ui5.types.Area_marker_shape} the value of property <code>shape</code>
 * @public
 * @name sap.viz.ui5.types.Area_marker#getShape
 * @function
 */

/**
 * Setter for property <code>shape</code>.
 *
 * Default value is <code>circle</code> 
 *
 * @param {sap.viz.ui5.types.Area_marker_shape} oShape  new value for property <code>shape</code>
 * @return {sap.viz.ui5.types.Area_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area_marker#setShape
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Set the marker size for data points, ranging from '4' and '32'. If you enter a value outside that range, the marker size defaults to '4'.
 *
 * Default value is <code>8</code>
 *
 * @return {int} the value of property <code>size</code>
 * @public
 * @name sap.viz.ui5.types.Area_marker#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>8</code> 
 *
 * @param {int} iSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Area_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area_marker#setSize
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Set the number to enable events for markers when they are invisible. If the total amount of markers is bigger than this value, markers will remain hidden when selected or hovered over. The default value is Number.POSITIVE_INFINITY, which is the largest possible value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>number</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area_marker#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumber  new value for property <code>number</code>
 * @return {sap.viz.ui5.types.Area_marker} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area_marker#setNumber
 * @function
 */

// Start of sap/viz/ui5/types/Area_marker.js

}; // end of sap/viz/ui5/types/Area_marker.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Area_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Area_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Area_tooltip");




/**
 * Constructor for a new ui5/types/Area_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the tooltip
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Area_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Area_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Area_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Area_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.Area_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Area_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Area_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/Area_tooltip.js

}; // end of sap/viz/ui5/types/Area_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis.
jQuery.sap.declare("sap.viz.ui5.types.Axis");




/**
 * Constructor for a new ui5/types/Axis.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIsIndependentMode isIndependentMode} : boolean (default: false)</li>
 * <li>{@link #getIsPercentMode isPercentMode} : boolean (default: false)</li>
 * <li>{@link #getIsKeepFirstAndLastLabel isKeepFirstAndLastLabel} : boolean (default: false)</li>
 * <li>{@link #getLineSize lineSize} : int (default: 1)</li>
 * <li>{@link #getColor color} : string (default: '#6c6c6c')</li>
 * <li>{@link #getType type} : sap.viz.ui5.types.Axis_type (default: sap.viz.ui5.types.Axis_type.value)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.Axis_position (default: sap.viz.ui5.types.Axis_position.bottom)</li>
 * <li>{@link #getIsTruncateAvailable isTruncateAvailable} : boolean (default: true)</li>
 * <li>{@link #getForceLabelArea forceLabelArea} : boolean (default: false)</li>
 * <li>{@link #getEnableLabelSelection enableLabelSelection} : boolean (default: true)</li>
 * <li>{@link #getHideTitleFirst hideTitleFirst} : boolean (default: false)</li>
 * <li>{@link #getMaxSizeRatio maxSizeRatio} : float (default: 0.25)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Axis_title</li>
 * <li>{@link #getGridline gridline} : sap.viz.ui5.types.Axis_gridline</li>
 * <li>{@link #getAxisline axisline} : sap.viz.ui5.types.Axis_axisline</li>
 * <li>{@link #getLabel label} : sap.viz.ui5.types.Axis_label</li>
 * <li>{@link #getIndicator indicator} : sap.viz.ui5.types.Axis_indicator</li>
 * <li>{@link #getScale scale} : sap.viz.ui5.types.Axis_scale</li>
 * <li>{@link #getLayoutInfo layoutInfo} : sap.viz.ui5.types.Axis_layoutInfo</li>
 * <li>{@link #getAxisTick axisTick} : sap.viz.ui5.types.Axis_axisTick</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Axis
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Axis
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis", { metadata : {

	library : "sap.viz",
	properties : {
		"isIndependentMode" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"isPercentMode" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"isKeepFirstAndLastLabel" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"lineSize" : {type : "int", group : "", defaultValue : 1},
		"color" : {type : "string", group : "", defaultValue : '#6c6c6c'},
		"type" : {type : "sap.viz.ui5.types.Axis_type", group : "", defaultValue : sap.viz.ui5.types.Axis_type.value, deprecated: true},
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"position" : {type : "sap.viz.ui5.types.Axis_position", group : "", defaultValue : sap.viz.ui5.types.Axis_position.bottom, deprecated: true},
		"isTruncateAvailable" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"forceLabelArea" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"enableLabelSelection" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"hideTitleFirst" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"maxSizeRatio" : {type : "float", group : "", defaultValue : 0.25}
	},
	aggregations : {
		"title" : {type : "sap.viz.ui5.types.Axis_title", multiple : false}, 
		"gridline" : {type : "sap.viz.ui5.types.Axis_gridline", multiple : false}, 
		"axisline" : {type : "sap.viz.ui5.types.Axis_axisline", multiple : false}, 
		"label" : {type : "sap.viz.ui5.types.Axis_label", multiple : false}, 
		"indicator" : {type : "sap.viz.ui5.types.Axis_indicator", multiple : false, deprecated: true}, 
		"scale" : {type : "sap.viz.ui5.types.Axis_scale", multiple : false}, 
		"layoutInfo" : {type : "sap.viz.ui5.types.Axis_layoutInfo", multiple : false, deprecated: true}, 
		"axisTick" : {type : "sap.viz.ui5.types.Axis_axisTick", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis.extend
 * @function
 */


/**
 * Getter for property <code>isIndependentMode</code>.
 * Set whether the axis works in independent mode. Currently, this property is used only for boxplot charts.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isIndependentMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getIsIndependentMode
 * @function
 */

/**
 * Setter for property <code>isIndependentMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsIndependentMode  new value for property <code>isIndependentMode</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setIsIndependentMode
 * @function
 */


/**
 * Getter for property <code>isPercentMode</code>.
 * Show the label as a percentage. For example '0.1' would show as '10'.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isPercentMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getIsPercentMode
 * @function
 */

/**
 * Setter for property <code>isPercentMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsPercentMode  new value for property <code>isPercentMode</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setIsPercentMode
 * @function
 */


/**
 * Getter for property <code>isKeepFirstAndLastLabel</code>.
 * Try to keep the first label and last label when the space is limited.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isKeepFirstAndLastLabel</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getIsKeepFirstAndLastLabel
 * @function
 */

/**
 * Setter for property <code>isKeepFirstAndLastLabel</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsKeepFirstAndLastLabel  new value for property <code>isKeepFirstAndLastLabel</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setIsKeepFirstAndLastLabel
 * @function
 */


/**
 * Getter for property <code>lineSize</code>.
 * Set the thickness of the axis line
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>lineSize</code>
 * @public
 * @name sap.viz.ui5.types.Axis#getLineSize
 * @function
 */

/**
 * Setter for property <code>lineSize</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iLineSize  new value for property <code>lineSize</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setLineSize
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Set the color of the axis line
 *
 * Default value is <code>#6c6c6c</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Axis#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#6c6c6c</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setColor
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Set the axis type
 *
 * Default value is <code>value</code>
 *
 * @return {sap.viz.ui5.types.Axis_type} the value of property <code>type</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>value</code> 
 *
 * @param {sap.viz.ui5.types.Axis_type} oType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setType
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the entire axis, including the axis line, gridlines, and labels
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Axis#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setVisible
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * Set the position of the axis
 *
 * Default value is <code>bottom</code>
 *
 * @return {sap.viz.ui5.types.Axis_position} the value of property <code>position</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is <code>bottom</code> 
 *
 * @param {sap.viz.ui5.types.Axis_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setPosition
 * @function
 */


/**
 * Getter for property <code>isTruncateAvailable</code>.
 * Set whether truncation logic is available for the category axis
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>isTruncateAvailable</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getIsTruncateAvailable
 * @function
 */

/**
 * Setter for property <code>isTruncateAvailable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIsTruncateAvailable  new value for property <code>isTruncateAvailable</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setIsTruncateAvailable
 * @function
 */


/**
 * Getter for property <code>forceLabelArea</code>.
 * Set whether the label area is limited to the text area
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>forceLabelArea</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getForceLabelArea
 * @function
 */

/**
 * Setter for property <code>forceLabelArea</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bForceLabelArea  new value for property <code>forceLabelArea</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setForceLabelArea
 * @function
 */


/**
 * Getter for property <code>enableLabelSelection</code>.
 * Set whether the label selection effect is enabled. For mobile devices, the default value is 'false'.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableLabelSelection</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getEnableLabelSelection
 * @function
 */

/**
 * Setter for property <code>enableLabelSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableLabelSelection  new value for property <code>enableLabelSelection</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setEnableLabelSelection
 * @function
 */


/**
 * Getter for property <code>hideTitleFirst</code>.
 * Hide axis title firstly if the space is limited.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideTitleFirst</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getHideTitleFirst
 * @function
 */

/**
 * Setter for property <code>hideTitleFirst</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideTitleFirst  new value for property <code>hideTitleFirst</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setHideTitleFirst
 * @function
 */


/**
 * Getter for property <code>maxSizeRatio</code>.
 * The ratio to limit axis' space in its container, which only accepts values between 0 and 1(0 and 1 included). All the invalid values would be replaced by default value.
 *
 * Default value is <code>0.25</code>
 *
 * @return {float} the value of property <code>maxSizeRatio</code>
 * @public
 * @name sap.viz.ui5.types.Axis#getMaxSizeRatio
 * @function
 */

/**
 * Setter for property <code>maxSizeRatio</code>.
 *
 * Default value is <code>0.25</code> 
 *
 * @param {float} fMaxSizeRatio  new value for property <code>maxSizeRatio</code>
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setMaxSizeRatio
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Settings for the axis title
 * 
 * @return {sap.viz.ui5.types.Axis_title}
 * @public
 * @name sap.viz.ui5.types.Axis#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Axis_title} oTitle
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>gridline</code>.<br/>
 * Settings for the gridlines on the axis
 * 
 * @return {sap.viz.ui5.types.Axis_gridline}
 * @public
 * @name sap.viz.ui5.types.Axis#getGridline
 * @function
 */


/**
 * Setter for the aggregated <code>gridline</code>.
 * @param {sap.viz.ui5.types.Axis_gridline} oGridline
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setGridline
 * @function
 */
	

/**
 * Destroys the gridline in the aggregation 
 * named <code>gridline</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#destroyGridline
 * @function
 */


/**
 * Getter for aggregation <code>axisline</code>.<br/>
 * Settings for the axis line
 * 
 * @return {sap.viz.ui5.types.Axis_axisline}
 * @public
 * @name sap.viz.ui5.types.Axis#getAxisline
 * @function
 */


/**
 * Setter for the aggregated <code>axisline</code>.
 * @param {sap.viz.ui5.types.Axis_axisline} oAxisline
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setAxisline
 * @function
 */
	

/**
 * Destroys the axisline in the aggregation 
 * named <code>axisline</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#destroyAxisline
 * @function
 */


/**
 * Getter for aggregation <code>label</code>.<br/>
 * Settings for the labels on this axis
 * 
 * @return {sap.viz.ui5.types.Axis_label}
 * @public
 * @name sap.viz.ui5.types.Axis#getLabel
 * @function
 */


/**
 * Setter for the aggregated <code>label</code>.
 * @param {sap.viz.ui5.types.Axis_label} oLabel
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setLabel
 * @function
 */
	

/**
 * Destroys the label in the aggregation 
 * named <code>label</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#destroyLabel
 * @function
 */


/**
 * Getter for aggregation <code>indicator</code>.<br/>
 * Settings for the axis indicator
 * 
 * @return {sap.viz.ui5.types.Axis_indicator}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getIndicator
 * @function
 */


/**
 * Setter for the aggregated <code>indicator</code>.
 * @param {sap.viz.ui5.types.Axis_indicator} oIndicator
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setIndicator
 * @function
 */
	

/**
 * Destroys the indicator in the aggregation 
 * named <code>indicator</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#destroyIndicator
 * @function
 */


/**
 * Getter for aggregation <code>scale</code>.<br/>
 * Set the scale of the value axis. This property only works on value type axes.
 * 
 * @return {sap.viz.ui5.types.Axis_scale}
 * @public
 * @name sap.viz.ui5.types.Axis#getScale
 * @function
 */


/**
 * Setter for the aggregated <code>scale</code>.
 * @param {sap.viz.ui5.types.Axis_scale} oScale
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#setScale
 * @function
 */
	

/**
 * Destroys the scale in the aggregation 
 * named <code>scale</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis#destroyScale
 * @function
 */


/**
 * Getter for aggregation <code>layoutInfo</code>.<br/>
 * Settings for the layout of the category axis. This property only works for category type axes.
 * 
 * @return {sap.viz.ui5.types.Axis_layoutInfo}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getLayoutInfo
 * @function
 */


/**
 * Setter for the aggregated <code>layoutInfo</code>.
 * @param {sap.viz.ui5.types.Axis_layoutInfo} oLayoutInfo
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setLayoutInfo
 * @function
 */
	

/**
 * Destroys the layoutInfo in the aggregation 
 * named <code>layoutInfo</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#destroyLayoutInfo
 * @function
 */


/**
 * Getter for aggregation <code>axisTick</code>.<br/>
 * Settings for the ticks on the axis
 * 
 * @return {sap.viz.ui5.types.Axis_axisTick}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#getAxisTick
 * @function
 */


/**
 * Setter for the aggregated <code>axisTick</code>.
 * @param {sap.viz.ui5.types.Axis_axisTick} oAxisTick
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#setAxisTick
 * @function
 */
	

/**
 * Destroys the axisTick in the aggregation 
 * named <code>axisTick</code>.
 * @return {sap.viz.ui5.types.Axis} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis#destroyAxisTick
 * @function
 */

// Start of sap/viz/ui5/types/Axis.js
sap.viz.ui5.types.Axis.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.types.Axis.prototype.getGridline = function() {
  return this._getOrCreate("gridline");
}
sap.viz.ui5.types.Axis.prototype.getAxisline = function() {
  return this._getOrCreate("axisline");
}
sap.viz.ui5.types.Axis.prototype.getLabel = function() {
  return this._getOrCreate("label");
}
sap.viz.ui5.types.Axis.prototype.getIndicator = function() {
  return this._getOrCreate("indicator");
}
sap.viz.ui5.types.Axis.prototype.getScale = function() {
  return this._getOrCreate("scale");
}
sap.viz.ui5.types.Axis.prototype.getLayoutInfo = function() {
  return this._getOrCreate("layoutInfo");
}
sap.viz.ui5.types.Axis.prototype.getAxisTick = function() {
  return this._getOrCreate("axisTick");
}

}; // end of sap/viz/ui5/types/Axis.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_axisTick') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_axisTick.
jQuery.sap.declare("sap.viz.ui5.types.Axis_axisTick");




/**
 * Constructor for a new ui5/types/Axis_axisTick.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the ticks on the axis
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_axisTick
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_axisTick", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_axisTick with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_axisTick.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set visibility of the ticks on the axis. For mobile devices, the default value is 'false'.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Axis_axisTick#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_axisTick} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_axisTick#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Axis_axisTick.js

}; // end of sap/viz/ui5/types/Axis_axisTick.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_axisline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_axisline.
jQuery.sap.declare("sap.viz.ui5.types.Axis_axisline");




/**
 * Constructor for a new ui5/types/Axis_axisline.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the axis line
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Axis_axisline
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_axisline", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_axisline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_axisline.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the axis line
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Axis_axisline#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_axisline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_axisline#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Axis_axisline.js

}; // end of sap/viz/ui5/types/Axis_axisline.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_gridline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_gridline.
jQuery.sap.declare("sap.viz.ui5.types.Axis_gridline");




/**
 * Constructor for a new ui5/types/Axis_gridline.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDisable disable} : boolean (default: false)</li>
 * <li>{@link #getShowFirstLine showFirstLine} : boolean (default: false)</li>
 * <li>{@link #getShowLastLine showLastLine} : boolean (default: false)</li>
 * <li>{@link #getType type} : sap.viz.ui5.types.Axis_gridline_type (default: sap.viz.ui5.types.Axis_gridline_type.line)</li>
 * <li>{@link #getColor color} : string (default: '#d8d8d8')</li>
 * <li>{@link #getSize size} : int (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the gridlines on the axis
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Axis_gridline
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_gridline", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"disable" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"showFirstLine" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"showLastLine" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"type" : {type : "sap.viz.ui5.types.Axis_gridline_type", group : "", defaultValue : sap.viz.ui5.types.Axis_gridline_type.line},
		"color" : {type : "string", group : "", defaultValue : '#d8d8d8'},
		"size" : {type : "int", group : "", defaultValue : 1}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_gridline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_gridline.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of gridlines on the axis
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#setVisible
 * @function
 */


/**
 * Getter for property <code>disable</code>.
 * Disable gridline or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disable</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_gridline#getDisable
 * @function
 */

/**
 * Setter for property <code>disable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisable  new value for property <code>disable</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_gridline#setDisable
 * @function
 */


/**
 * Getter for property <code>showFirstLine</code>.
 * Set whether the first gridline on the axis appears
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showFirstLine</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_gridline#getShowFirstLine
 * @function
 */

/**
 * Setter for property <code>showFirstLine</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowFirstLine  new value for property <code>showFirstLine</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_gridline#setShowFirstLine
 * @function
 */


/**
 * Getter for property <code>showLastLine</code>.
 * Set whether the last gridline on the axis appears
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showLastLine</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_gridline#getShowLastLine
 * @function
 */

/**
 * Setter for property <code>showLastLine</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowLastLine  new value for property <code>showLastLine</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_gridline#setShowLastLine
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Set the line type of gridlines on the axis
 *
 * Default value is <code>line</code>
 *
 * @return {sap.viz.ui5.types.Axis_gridline_type} the value of property <code>type</code>
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>line</code> 
 *
 * @param {sap.viz.ui5.types.Axis_gridline_type} oType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#setType
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Set the color of the gridlines on the axis
 *
 * Default value is <code>#d8d8d8</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#d8d8d8</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#setColor
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Set the line size of gridlines on the axis
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>size</code>
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Axis_gridline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_gridline#setSize
 * @function
 */

// Start of sap/viz/ui5/types/Axis_gridline.js

}; // end of sap/viz/ui5/types/Axis_gridline.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_indicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_indicator.
jQuery.sap.declare("sap.viz.ui5.types.Axis_indicator");




/**
 * Constructor for a new ui5/types/Axis_indicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnable enable} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the axis indicator
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_indicator
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_indicator", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enable" : {type : "boolean", group : "", defaultValue : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_indicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_indicator.extend
 * @function
 */


/**
 * Getter for property <code>enable</code>.
 * Set the visibility of the axis indicator
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_indicator#getEnable
 * @function
 */

/**
 * Setter for property <code>enable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.viz.ui5.types.Axis_indicator} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_indicator#setEnable
 * @function
 */

// Start of sap/viz/ui5/types/Axis_indicator.js

}; // end of sap/viz/ui5/types/Axis_indicator.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_label') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_label.
jQuery.sap.declare("sap.viz.ui5.types.Axis_label");




/**
 * Constructor for a new ui5/types/Axis_label.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getNumberFormat numberFormat} : string (default: '')</li>
 * <li>{@link #getFormatString formatString} : any (default: null)</li>
 * <li>{@link #getUnitFormatType unitFormatType} : sap.viz.ui5.types.Axis_label_unitFormatType (default: sap.viz.ui5.types.Axis_label_unitFormatType.FinancialUnits)</li>
 * <li>{@link #getHideSubLevels hideSubLevels} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the labels on this axis
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Axis_label
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_label", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"numberFormat" : {type : "string", group : "", defaultValue : '', deprecated: true},
		"formatString" : {type : "any", group : "", defaultValue : null},
		"unitFormatType" : {type : "sap.viz.ui5.types.Axis_label_unitFormatType", group : "", defaultValue : sap.viz.ui5.types.Axis_label_unitFormatType.FinancialUnits},
		"hideSubLevels" : {type : "boolean", group : "", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_label with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_label.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the labels on this axis
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Axis_label#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_label#setVisible
 * @function
 */


/**
 * Getter for property <code>numberFormat</code>.
 * Set the number format for the value axis
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberFormat</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_label#getNumberFormat
 * @function
 */

/**
 * Setter for property <code>numberFormat</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberFormat  new value for property <code>numberFormat</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_label#setNumberFormat
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * Set the format strings for labels on the value axis. If a single format string is entered, it is applied to all measures. A two-dimensional array of format strings can be entered for scatter matrix charts and multiple charts with measureNamesDimension, to apply different formats to each sub-chart. For all other chart types, the first value of the first dimension of a two-dimensional array is used as a global format string. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The letter "u" is used at the end of a format string to format values in SI units. If the letter "u" is added to a value between 1e12 and 1e-3 before SI units are applied, the value is formatted in exponential style. The remaining syntax matches Excel format strings. The following is a simple example of a two-dimensional array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
 *
 * Default value is <code>null</code>
 *
 * @return {any} the value of property <code>formatString</code>
 * @public
 * @name sap.viz.ui5.types.Axis_label#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {any} oFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_label#setFormatString
 * @function
 */


/**
 * Getter for property <code>unitFormatType</code>.
 * Set the unit format type. If set MetricUnits, unit K,M,G,T will be applied, eg, 5000 will display as 5K, 5000000 will display as 5M, 5000000000 will display as 5G and so on. If set FinancialUnits, unit K,M,B,T will be applied. 5000000000 will display as 5B.
 *
 * Default value is <code>FinancialUnits</code>
 *
 * @return {sap.viz.ui5.types.Axis_label_unitFormatType} the value of property <code>unitFormatType</code>
 * @public
 * @name sap.viz.ui5.types.Axis_label#getUnitFormatType
 * @function
 */

/**
 * Setter for property <code>unitFormatType</code>.
 *
 * Default value is <code>FinancialUnits</code> 
 *
 * @param {sap.viz.ui5.types.Axis_label_unitFormatType} oUnitFormatType  new value for property <code>unitFormatType</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_label#setUnitFormatType
 * @function
 */


/**
 * Getter for property <code>hideSubLevels</code>.
 * Set the visibility of the sub levels of labels on this axis
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideSubLevels</code>
 * @public
 * @name sap.viz.ui5.types.Axis_label#getHideSubLevels
 * @function
 */

/**
 * Setter for property <code>hideSubLevels</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideSubLevels  new value for property <code>hideSubLevels</code>
 * @return {sap.viz.ui5.types.Axis_label} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_label#setHideSubLevels
 * @function
 */

// Start of sap/viz/ui5/types/Axis_label.js

}; // end of sap/viz/ui5/types/Axis_label.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_layoutInfo') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_layoutInfo.
jQuery.sap.declare("sap.viz.ui5.types.Axis_layoutInfo");




/**
 * Constructor for a new ui5/types/Axis_layoutInfo.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : float (default: 0)</li>
 * <li>{@link #getHeight height} : float (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the layout of the category axis. This property only works for category type axes.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_layoutInfo
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_layoutInfo", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"width" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"height" : {type : "float", group : "", defaultValue : 0, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_layoutInfo with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_layoutInfo.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Set the width of the xAxis
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>width</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_layoutInfo#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.types.Axis_layoutInfo} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_layoutInfo#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Set the height of the xAxis
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>height</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_layoutInfo#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fHeight  new value for property <code>height</code>
 * @return {sap.viz.ui5.types.Axis_layoutInfo} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_layoutInfo#setHeight
 * @function
 */

// Start of sap/viz/ui5/types/Axis_layoutInfo.js

}; // end of sap/viz/ui5/types/Axis_layoutInfo.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_scale') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_scale.
jQuery.sap.declare("sap.viz.ui5.types.Axis_scale");




/**
 * Constructor for a new ui5/types/Axis_scale.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFixedRange fixedRange} : boolean (default: false)</li>
 * <li>{@link #getMinValue minValue} : float (default: 0)</li>
 * <li>{@link #getMaxValue maxValue} : float (default: 0)</li>
 * <li>{@link #getFixedTicks fixedTicks} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Set the scale of the value axis. This property only works on value type axes.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Axis_scale
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_scale", { metadata : {

	library : "sap.viz",
	properties : {
		"fixedRange" : {type : "boolean", group : "", defaultValue : false},
		"minValue" : {type : "float", group : "", defaultValue : 0},
		"maxValue" : {type : "float", group : "", defaultValue : 0},
		"fixedTicks" : {type : "object[]", group : "", defaultValue : null, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_scale with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_scale.extend
 * @function
 */


/**
 * Getter for property <code>fixedRange</code>.
 * Set whether the axis range is limited to the range between the minValue and maxValue
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>fixedRange</code>
 * @public
 * @name sap.viz.ui5.types.Axis_scale#getFixedRange
 * @function
 */

/**
 * Setter for property <code>fixedRange</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFixedRange  new value for property <code>fixedRange</code>
 * @return {sap.viz.ui5.types.Axis_scale} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_scale#setFixedRange
 * @function
 */


/**
 * Getter for property <code>minValue</code>.
 * Set the minValue of the value axis
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>minValue</code>
 * @public
 * @name sap.viz.ui5.types.Axis_scale#getMinValue
 * @function
 */

/**
 * Setter for property <code>minValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMinValue  new value for property <code>minValue</code>
 * @return {sap.viz.ui5.types.Axis_scale} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_scale#setMinValue
 * @function
 */


/**
 * Getter for property <code>maxValue</code>.
 * Set the maxValue of the value axis
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>maxValue</code>
 * @public
 * @name sap.viz.ui5.types.Axis_scale#getMaxValue
 * @function
 */

/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMaxValue  new value for property <code>maxValue</code>
 * @return {sap.viz.ui5.types.Axis_scale} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_scale#setMaxValue
 * @function
 */


/**
 * Getter for property <code>fixedTicks</code>.
 * Set the specific ticks for value axis. The format should be [{value : "/value/", text : "/text/"}...]. If its length is less than 2, this property will not take effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>fixedTicks</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_scale#getFixedTicks
 * @function
 */

/**
 * Setter for property <code>fixedTicks</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFixedTicks  new value for property <code>fixedTicks</code>
 * @return {sap.viz.ui5.types.Axis_scale} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_scale#setFixedTicks
 * @function
 */

// Start of sap/viz/ui5/types/Axis_scale.js

}; // end of sap/viz/ui5/types/Axis_scale.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Axis_title') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Axis_title.
jQuery.sap.declare("sap.viz.ui5.types.Axis_title");




/**
 * Constructor for a new ui5/types/Axis_title.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getText text} : string (default: 'null')</li>
 * <li>{@link #getApplyAxislineColor applyAxislineColor} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the axis title
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Axis_title
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Axis_title", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : false},
		"text" : {type : "string", group : "", defaultValue : 'null'},
		"applyAxislineColor" : {type : "boolean", group : "", defaultValue : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Axis_title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Axis_title.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the axis title
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Axis_title#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Axis_title} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_title#setVisible
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Set the text of the axis title
 *
 * Default value is <code>null</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.viz.ui5.types.Axis_title#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.viz.ui5.types.Axis_title} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Axis_title#setText
 * @function
 */


/**
 * Getter for property <code>applyAxislineColor</code>.
 * Set the title color to match the color of the axis line
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>applyAxislineColor</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_title#getApplyAxislineColor
 * @function
 */

/**
 * Setter for property <code>applyAxislineColor</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bApplyAxislineColor  new value for property <code>applyAxislineColor</code>
 * @return {sap.viz.ui5.types.Axis_title} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Axis_title#setApplyAxislineColor
 * @function
 */

// Start of sap/viz/ui5/types/Axis_title.js

}; // end of sap/viz/ui5/types/Axis_title.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Background') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Background.
jQuery.sap.declare("sap.viz.ui5.types.Background");




/**
 * Constructor for a new ui5/types/Background.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Background_drawingEffect (default: sap.viz.ui5.types.Background_drawingEffect.normal)</li>
 * <li>{@link #getDirection direction} : sap.viz.ui5.types.Background_direction (default: sap.viz.ui5.types.Background_direction.vertical)</li>
 * <li>{@link #getColor color} : string (default: 'transparent')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBorder border} : sap.viz.ui5.types.Background_border</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Background
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Background
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Background", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"drawingEffect" : {type : "sap.viz.ui5.types.Background_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Background_drawingEffect.normal},
		"direction" : {type : "sap.viz.ui5.types.Background_direction", group : "", defaultValue : sap.viz.ui5.types.Background_direction.vertical},
		"color" : {type : "string", group : "", defaultValue : 'transparent', deprecated: true}
	},
	aggregations : {
		"border" : {type : "sap.viz.ui5.types.Background_border", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Background with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Background.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Background#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background#setVisible
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the background. If this value is set to 'glossy', the background is glossy. If this value is set to 'normal', the background is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Background_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Background#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Background_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>direction</code>.
 * Set the direction of the color gradient in the background. This only takes effect if the 'drawingEffect' value is set to 'glossy'.
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.Background_direction} the value of property <code>direction</code>
 * @public
 * @name sap.viz.ui5.types.Background#getDirection
 * @function
 */

/**
 * Setter for property <code>direction</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.Background_direction} oDirection  new value for property <code>direction</code>
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background#setDirection
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Define the color for the plot background body.
 *
 * Default value is <code>transparent</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Background#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>transparent</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Background#setColor
 * @function
 */


/**
 * Getter for aggregation <code>border</code>.<br/>
 * Settings for the border
 * 
 * @return {sap.viz.ui5.types.Background_border}
 * @public
 * @name sap.viz.ui5.types.Background#getBorder
 * @function
 */


/**
 * Setter for the aggregated <code>border</code>.
 * @param {sap.viz.ui5.types.Background_border} oBorder
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background#setBorder
 * @function
 */
	

/**
 * Destroys the border in the aggregation 
 * named <code>border</code>.
 * @return {sap.viz.ui5.types.Background} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background#destroyBorder
 * @function
 */

// Start of sap/viz/ui5/types/Background.js
sap.viz.ui5.types.Background.prototype.getBorder = function() {
  return this._getOrCreate("border");
}

}; // end of sap/viz/ui5/types/Background.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Background_border') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Background_border.
jQuery.sap.declare("sap.viz.ui5.types.Background_border");




/**
 * Constructor for a new ui5/types/Background_border.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStroke stroke} : string (default: '#d8d8d8')</li>
 * <li>{@link #getStrokeWidth strokeWidth} : int (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLeft left} : sap.viz.ui5.types.Background_border_left</li>
 * <li>{@link #getRight right} : sap.viz.ui5.types.Background_border_right</li>
 * <li>{@link #getTop top} : sap.viz.ui5.types.Background_border_top</li>
 * <li>{@link #getBottom bottom} : sap.viz.ui5.types.Background_border_bottom</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the border
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Background_border
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Background_border", { metadata : {

	library : "sap.viz",
	properties : {
		"stroke" : {type : "string", group : "", defaultValue : '#d8d8d8', deprecated: true},
		"strokeWidth" : {type : "int", group : "", defaultValue : 1, deprecated: true}
	},
	aggregations : {
		"left" : {type : "sap.viz.ui5.types.Background_border_left", multiple : false}, 
		"right" : {type : "sap.viz.ui5.types.Background_border_right", multiple : false}, 
		"top" : {type : "sap.viz.ui5.types.Background_border_top", multiple : false}, 
		"bottom" : {type : "sap.viz.ui5.types.Background_border_bottom", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Background_border with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Background_border.extend
 * @function
 */


/**
 * Getter for property <code>stroke</code>.
 * Settings for the color of the stroke.
 *
 * Default value is <code>#d8d8d8</code>
 *
 * @return {string} the value of property <code>stroke</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Background_border#getStroke
 * @function
 */

/**
 * Setter for property <code>stroke</code>.
 *
 * Default value is <code>#d8d8d8</code> 
 *
 * @param {string} sStroke  new value for property <code>stroke</code>
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Background_border#setStroke
 * @function
 */


/**
 * Getter for property <code>strokeWidth</code>.
 * Settings for the width of the stroke.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>strokeWidth</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Background_border#getStrokeWidth
 * @function
 */

/**
 * Setter for property <code>strokeWidth</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iStrokeWidth  new value for property <code>strokeWidth</code>
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Background_border#setStrokeWidth
 * @function
 */


/**
 * Getter for aggregation <code>left</code>.<br/>
 * Settings for the left border
 * 
 * @return {sap.viz.ui5.types.Background_border_left}
 * @public
 * @name sap.viz.ui5.types.Background_border#getLeft
 * @function
 */


/**
 * Setter for the aggregated <code>left</code>.
 * @param {sap.viz.ui5.types.Background_border_left} oLeft
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#setLeft
 * @function
 */
	

/**
 * Destroys the left in the aggregation 
 * named <code>left</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#destroyLeft
 * @function
 */


/**
 * Getter for aggregation <code>right</code>.<br/>
 * Settings for the right border
 * 
 * @return {sap.viz.ui5.types.Background_border_right}
 * @public
 * @name sap.viz.ui5.types.Background_border#getRight
 * @function
 */


/**
 * Setter for the aggregated <code>right</code>.
 * @param {sap.viz.ui5.types.Background_border_right} oRight
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#setRight
 * @function
 */
	

/**
 * Destroys the right in the aggregation 
 * named <code>right</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#destroyRight
 * @function
 */


/**
 * Getter for aggregation <code>top</code>.<br/>
 * Settings for the top border
 * 
 * @return {sap.viz.ui5.types.Background_border_top}
 * @public
 * @name sap.viz.ui5.types.Background_border#getTop
 * @function
 */


/**
 * Setter for the aggregated <code>top</code>.
 * @param {sap.viz.ui5.types.Background_border_top} oTop
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#setTop
 * @function
 */
	

/**
 * Destroys the top in the aggregation 
 * named <code>top</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#destroyTop
 * @function
 */


/**
 * Getter for aggregation <code>bottom</code>.<br/>
 * Settings for the bottom border
 * 
 * @return {sap.viz.ui5.types.Background_border_bottom}
 * @public
 * @name sap.viz.ui5.types.Background_border#getBottom
 * @function
 */


/**
 * Setter for the aggregated <code>bottom</code>.
 * @param {sap.viz.ui5.types.Background_border_bottom} oBottom
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#setBottom
 * @function
 */
	

/**
 * Destroys the bottom in the aggregation 
 * named <code>bottom</code>.
 * @return {sap.viz.ui5.types.Background_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border#destroyBottom
 * @function
 */

// Start of sap/viz/ui5/types/Background_border.js
sap.viz.ui5.types.Background_border.prototype.getLeft = function() {
  return this._getOrCreate("left");
}
sap.viz.ui5.types.Background_border.prototype.getRight = function() {
  return this._getOrCreate("right");
}
sap.viz.ui5.types.Background_border.prototype.getTop = function() {
  return this._getOrCreate("top");
}
sap.viz.ui5.types.Background_border.prototype.getBottom = function() {
  return this._getOrCreate("bottom");
}

}; // end of sap/viz/ui5/types/Background_border.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Background_border_bottom') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Background_border_bottom.
jQuery.sap.declare("sap.viz.ui5.types.Background_border_bottom");




/**
 * Constructor for a new ui5/types/Background_border_bottom.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the bottom border
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Background_border_bottom
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Background_border_bottom", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_bottom with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Background_border_bottom.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Background_border_bottom#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_bottom} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border_bottom#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Background_border_bottom.js

}; // end of sap/viz/ui5/types/Background_border_bottom.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Background_border_left') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Background_border_left.
jQuery.sap.declare("sap.viz.ui5.types.Background_border_left");




/**
 * Constructor for a new ui5/types/Background_border_left.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the left border
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Background_border_left
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Background_border_left", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_left with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Background_border_left.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Background_border_left#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_left} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border_left#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Background_border_left.js

}; // end of sap/viz/ui5/types/Background_border_left.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Background_border_right') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Background_border_right.
jQuery.sap.declare("sap.viz.ui5.types.Background_border_right");




/**
 * Constructor for a new ui5/types/Background_border_right.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the right border
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Background_border_right
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Background_border_right", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_right with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Background_border_right.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Background_border_right#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_right} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border_right#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Background_border_right.js

}; // end of sap/viz/ui5/types/Background_border_right.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Background_border_top') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Background_border_top.
jQuery.sap.declare("sap.viz.ui5.types.Background_border_top");




/**
 * Constructor for a new ui5/types/Background_border_top.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the top border
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Background_border_top
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Background_border_top", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Background_border_top with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Background_border_top.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Background_border_top#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Background_border_top} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Background_border_top#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Background_border_top.js

}; // end of sap/viz/ui5/types/Background_border_top.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bar.
jQuery.sap.declare("sap.viz.ui5.types.Bar");




/**
 * Constructor for a new ui5/types/Bar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Bar_orientation (default: sap.viz.ui5.types.Bar_orientation.vertical)</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Bar_drawingEffect (default: sap.viz.ui5.types.Bar_drawingEffect.normal)</li>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li>
 * <li>{@link #getImageFill imageFill} : boolean (default: false)</li>
 * <li>{@link #getImagePalette imagePalette} : string[] (default: ['http://www.sap.com/global/ui/images/global/sap-logo.png'])</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Bar_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Bar_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Bar
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Bar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bar", { metadata : {

	library : "sap.viz",
	properties : {
		"orientation" : {type : "sap.viz.ui5.types.Bar_orientation", group : "", defaultValue : sap.viz.ui5.types.Bar_orientation.vertical, deprecated: true},
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"primaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1']},
		"secondaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B']},
		"drawingEffect" : {type : "sap.viz.ui5.types.Bar_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Bar_drawingEffect.normal},
		"isRoundCorner" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"imageFill" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"imagePalette" : {type : "string[]", group : "", defaultValue : ['http://www.sap.com/global/ui/images/global/sap-logo.png'], deprecated: true},
		"formatRules" : {type : "object[]", group : "", defaultValue : null}
	},
	aggregations : {
		"toolTip" : {type : "sap.viz.ui5.types.Bar_tooltip", multiple : false, deprecated: true}, 
		"animation" : {type : "sap.viz.ui5.types.Bar_animation", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bar.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set the orientation of the plot area.
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.Bar_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.Bar_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#setOrientation
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Bar#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar#setColorPalette
 * @function
 */


/**
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set the color palette for axis 1 in dual charts.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 *
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Bar#getPrimaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryValuesColorPalette</code>.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 *
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar#setPrimaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set the color palette for axis 2 in dual chart.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 *
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Bar#getSecondaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryValuesColorPalette</code>.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 *
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar#setSecondaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Bar_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Bar#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Bar_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>isRoundCorner</code>.
 * Set whether bars have rounded corners
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#getIsRoundCorner
 * @function
 */

/**
 * Setter for property <code>isRoundCorner</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#setIsRoundCorner
 * @function
 */


/**
 * Getter for property <code>imageFill</code>.
 * Set where the image fill is enabled.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>imageFill</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#getImageFill
 * @function
 */

/**
 * Setter for property <code>imageFill</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bImageFill  new value for property <code>imageFill</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#setImageFill
 * @function
 */


/**
 * Getter for property <code>imagePalette</code>.
 * Set the images that fill the bars.
 *
 * Default value is <code>http://www.sap.com/global/ui/images/global/sap-logo.png</code>
 *
 * @return {string[]} the value of property <code>imagePalette</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#getImagePalette
 * @function
 */

/**
 * Setter for property <code>imagePalette</code>.
 *
 * Default value is <code>http://www.sap.com/global/ui/images/global/sap-logo.png</code> 
 *
 * @param {string[]} aImagePalette  new value for property <code>imagePalette</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#setImagePalette
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Bar#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar#setFormatRules
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties
 * 
 * @return {sap.viz.ui5.types.Bar_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Bar_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.Bar_animation}
 * @public
 * @name sap.viz.ui5.types.Bar#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Bar_animation} oAnimation
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar#destroyAnimation
 * @function
 */

// Start of sap/viz/ui5/types/Bar.js
sap.viz.ui5.types.Bar.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.types.Bar.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}

}; // end of sap/viz/ui5/types/Bar.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bar_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bar_animation.
jQuery.sap.declare("sap.viz.ui5.types.Bar_animation");




/**
 * Constructor for a new ui5/types/Bar_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Bar_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bar_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bar_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bar_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Bar_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Bar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Bar_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Bar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Bar_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Bar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Bar_animation.js

}; // end of sap/viz/ui5/types/Bar_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bar_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bar_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Bar_tooltip");




/**
 * Constructor for a new ui5/types/Bar_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for tooltip related properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bar_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bar_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bar_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bar_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.Bar_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Bar_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bar_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/Bar_tooltip.js

}; // end of sap/viz/ui5/types/Bar_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bubble') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bubble.
jQuery.sap.declare("sap.viz.ui5.types.Bubble");




/**
 * Constructor for a new ui5/types/Bubble.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getShapePalette shapePalette} : string[] (default: ['circle','square','diamond','triangleUp','triangleDown','triangleLeft','triangleRight','cross','intersection'])</li>
 * <li>{@link #getMinMarkerSize minMarkerSize} : int</li>
 * <li>{@link #getMaxPriValue maxPriValue} : float (default: 0)</li>
 * <li>{@link #getMinPriValue minPriValue} : float (default: 0)</li>
 * <li>{@link #getMaxSecValue maxSecValue} : float (default: 0)</li>
 * <li>{@link #getMinSecValue minSecValue} : float (default: 0)</li>
 * <li>{@link #getMaxBubbleWidth maxBubbleWidth} : float (default: 0)</li>
 * <li>{@link #getMinBubbleWidth minBubbleWidth} : float (default: 0)</li>
 * <li>{@link #getMaxBubbleHeight maxBubbleHeight} : float (default: 0)</li>
 * <li>{@link #getMinBubbleHeight minBubbleHeight} : float (default: 0)</li>
 * <li>{@link #getTimeBased timeBased} : boolean (default: false)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Bubble_drawingEffect (default: sap.viz.ui5.types.Bubble_drawingEffect.normal)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li>
 * <li>{@link #getShowNegativeValues showNegativeValues} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Bubble_animation</li>
 * <li>{@link #getAxisTooltip axisTooltip} : sap.viz.ui5.types.Bubble_axisTooltip</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Bubble_hoverline</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Bubble
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Bubble
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bubble", { metadata : {

	library : "sap.viz",
	properties : {
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"shapePalette" : {type : "string[]", group : "", defaultValue : ['circle','square','diamond','triangleUp','triangleDown','triangleLeft','triangleRight','cross','intersection']},
		"minMarkerSize" : {type : "int", group : "", defaultValue : null},
		"maxPriValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"minPriValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"maxSecValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"minSecValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"maxBubbleWidth" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"minBubbleWidth" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"maxBubbleHeight" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"minBubbleHeight" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"timeBased" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"drawingEffect" : {type : "sap.viz.ui5.types.Bubble_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Bubble_drawingEffect.normal},
		"formatRules" : {type : "object[]", group : "", defaultValue : null},
		"showNegativeValues" : {type : "boolean", group : "", defaultValue : true, deprecated: true}
	},
	aggregations : {
		"animation" : {type : "sap.viz.ui5.types.Bubble_animation", multiple : false}, 
		"axisTooltip" : {type : "sap.viz.ui5.types.Bubble_axisTooltip", multiple : false, deprecated: true}, 
		"hoverline" : {type : "sap.viz.ui5.types.Bubble_hoverline", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bubble with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bubble.extend
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color of the bubbles
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Bubble#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble#setColorPalette
 * @function
 */


/**
 * Getter for property <code>shapePalette</code>.
 * Set the shape of the bubbles
 *
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code>
 *
 * @return {string[]} the value of property <code>shapePalette</code>
 * @public
 * @name sap.viz.ui5.types.Bubble#getShapePalette
 * @function
 */

/**
 * Setter for property <code>shapePalette</code>.
 *
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code> 
 *
 * @param {string[]} aShapePalette  new value for property <code>shapePalette</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble#setShapePalette
 * @function
 */


/**
 * Getter for property <code>minMarkerSize</code>.
 * Set the minimum size of the data points
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>minMarkerSize</code>
 * @public
 * @name sap.viz.ui5.types.Bubble#getMinMarkerSize
 * @function
 */

/**
 * Setter for property <code>minMarkerSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iMinMarkerSize  new value for property <code>minMarkerSize</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble#setMinMarkerSize
 * @function
 */


/**
 * Getter for property <code>maxPriValue</code>.
 * Set the max value of primary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>maxPriValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMaxPriValue
 * @function
 */

/**
 * Setter for property <code>maxPriValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMaxPriValue  new value for property <code>maxPriValue</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMaxPriValue
 * @function
 */


/**
 * Getter for property <code>minPriValue</code>.
 * Set the minimum value of primary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>minPriValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMinPriValue
 * @function
 */

/**
 * Setter for property <code>minPriValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMinPriValue  new value for property <code>minPriValue</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMinPriValue
 * @function
 */


/**
 * Getter for property <code>maxSecValue</code>.
 * Set the max value of secondary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>maxSecValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMaxSecValue
 * @function
 */

/**
 * Setter for property <code>maxSecValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMaxSecValue  new value for property <code>maxSecValue</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMaxSecValue
 * @function
 */


/**
 * Getter for property <code>minSecValue</code>.
 * Set the minimum value of secondary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>minSecValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMinSecValue
 * @function
 */

/**
 * Setter for property <code>minSecValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMinSecValue  new value for property <code>minSecValue</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMinSecValue
 * @function
 */


/**
 * Getter for property <code>maxBubbleWidth</code>.
 * Set the max value of bubble width values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>maxBubbleWidth</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMaxBubbleWidth
 * @function
 */

/**
 * Setter for property <code>maxBubbleWidth</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMaxBubbleWidth  new value for property <code>maxBubbleWidth</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMaxBubbleWidth
 * @function
 */


/**
 * Getter for property <code>minBubbleWidth</code>.
 * Set the minimum value of bubble width values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>minBubbleWidth</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMinBubbleWidth
 * @function
 */

/**
 * Setter for property <code>minBubbleWidth</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMinBubbleWidth  new value for property <code>minBubbleWidth</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMinBubbleWidth
 * @function
 */


/**
 * Getter for property <code>maxBubbleHeight</code>.
 * Set the max value of bubble height values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>maxBubbleHeight</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMaxBubbleHeight
 * @function
 */

/**
 * Setter for property <code>maxBubbleHeight</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMaxBubbleHeight  new value for property <code>maxBubbleHeight</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMaxBubbleHeight
 * @function
 */


/**
 * Getter for property <code>minBubbleHeight</code>.
 * Set the minimum value of bubble height values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>minBubbleHeight</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getMinBubbleHeight
 * @function
 */

/**
 * Setter for property <code>minBubbleHeight</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMinBubbleHeight  new value for property <code>minBubbleHeight</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setMinBubbleHeight
 * @function
 */


/**
 * Getter for property <code>timeBased</code>.
 * Set whether it is time based scatter/bubble
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>timeBased</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getTimeBased
 * @function
 */

/**
 * Setter for property <code>timeBased</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTimeBased  new value for property <code>timeBased</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setTimeBased
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the bubbles
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Bubble_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Bubble#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Bubble_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Bubble#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble#setFormatRules
 * @function
 */


/**
 * Getter for property <code>showNegativeValues</code>.
 * Show/hide the data of negetive value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showNegativeValues</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getShowNegativeValues
 * @function
 */

/**
 * Setter for property <code>showNegativeValues</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowNegativeValues  new value for property <code>showNegativeValues</code>
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setShowNegativeValues
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in bubble and scatter charts
 * 
 * @return {sap.viz.ui5.types.Bubble_animation}
 * @public
 * @name sap.viz.ui5.types.Bubble#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Bubble_animation} oAnimation
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>axisTooltip</code>.<br/>
 * Set tooltip related properties.
 * 
 * @return {sap.viz.ui5.types.Bubble_axisTooltip}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getAxisTooltip
 * @function
 */


/**
 * Setter for the aggregated <code>axisTooltip</code>.
 * @param {sap.viz.ui5.types.Bubble_axisTooltip} oAxisTooltip
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setAxisTooltip
 * @function
 */
	

/**
 * Destroys the axisTooltip in the aggregation 
 * named <code>axisTooltip</code>.
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#destroyAxisTooltip
 * @function
 */


/**
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for hoverline properties.
 * 
 * @return {sap.viz.ui5.types.Bubble_hoverline}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#getHoverline
 * @function
 */


/**
 * Setter for the aggregated <code>hoverline</code>.
 * @param {sap.viz.ui5.types.Bubble_hoverline} oHoverline
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#setHoverline
 * @function
 */
	

/**
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble#destroyHoverline
 * @function
 */

// Start of sap/viz/ui5/types/Bubble.js
sap.viz.ui5.types.Bubble.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Bubble.prototype.getAxisTooltip = function() {
  return this._getOrCreate("axisTooltip");
}
sap.viz.ui5.types.Bubble.prototype.getHoverline = function() {
  return this._getOrCreate("hoverline");
}

}; // end of sap/viz/ui5/types/Bubble.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bubble_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bubble_animation.
jQuery.sap.declare("sap.viz.ui5.types.Bubble_animation");




/**
 * Constructor for a new ui5/types/Bubble_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in bubble and scatter charts
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Bubble_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bubble_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bubble_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bubble_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Bubble_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Bubble_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Bubble_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Bubble_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Bubble_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Bubble_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Bubble_animation.js

}; // end of sap/viz/ui5/types/Bubble_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bubble_axisTooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bubble_axisTooltip.
jQuery.sap.declare("sap.viz.ui5.types.Bubble_axisTooltip");




/**
 * Constructor for a new ui5/types/Bubble_axisTooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getFormatString formatString} : string[] (default: ['null'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Set tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble_axisTooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bubble_axisTooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"formatString" : {type : "string[]", group : "", defaultValue : ['null']}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bubble_axisTooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bubble_axisTooltip.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * enabled/disabled tooltip.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Bubble_axisTooltip#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Bubble_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble_axisTooltip#setVisible
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
 *
 * Default value is <code>null</code>
 *
 * @return {string[]} the value of property <code>formatString</code>
 * @public
 * @name sap.viz.ui5.types.Bubble_axisTooltip#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {string[]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Bubble_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble_axisTooltip#setFormatString
 * @function
 */

// Start of sap/viz/ui5/types/Bubble_axisTooltip.js

}; // end of sap/viz/ui5/types/Bubble_axisTooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bubble_hoverline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bubble_hoverline.
jQuery.sap.declare("sap.viz.ui5.types.Bubble_hoverline");




/**
 * Constructor for a new ui5/types/Bubble_hoverline.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for hoverline properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bubble_hoverline
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bubble_hoverline", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bubble_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bubble_hoverline.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set to enabled/disabled hoverline or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Bubble_hoverline#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Bubble_hoverline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bubble_hoverline#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Bubble_hoverline.js

}; // end of sap/viz/ui5/types/Bubble_hoverline.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bullet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bullet.
jQuery.sap.declare("sap.viz.ui5.types.Bullet");




/**
 * Constructor for a new ui5/types/Bullet.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Bullet_orientation (default: sap.viz.ui5.types.Bullet_orientation.vertical)</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#2479BC','#d6d6d6','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Bullet_drawingEffect (default: sap.viz.ui5.types.Bullet_drawingEffect.normal)</li>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li>
 * <li>{@link #getReferenceValuesColorPalette referenceValuesColorPalette} : string[] (default: ['#FCDCDA','#FEECDA','#DDF3E4'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Bullet_tooltip</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Bullet
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Bullet
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bullet", { metadata : {

	library : "sap.viz",
	properties : {
		"orientation" : {type : "sap.viz.ui5.types.Bullet_orientation", group : "", defaultValue : sap.viz.ui5.types.Bullet_orientation.vertical, deprecated: true},
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#2479BC','#d6d6d6','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"primaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'], deprecated: true},
		"secondaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'], deprecated: true},
		"drawingEffect" : {type : "sap.viz.ui5.types.Bullet_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Bullet_drawingEffect.normal},
		"isRoundCorner" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"referenceValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#FCDCDA','#FEECDA','#DDF3E4']}
	},
	aggregations : {
		"toolTip" : {type : "sap.viz.ui5.types.Bullet_tooltip", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bullet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bullet.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set the orientation of the plot area.
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.Bullet_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.Bullet_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#setOrientation
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the chart.
 *
 * Default value is <code>#2479BC,#d6d6d6,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Bullet#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#2479BC,#d6d6d6,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bullet#setColorPalette
 * @function
 */


/**
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set the color palette for axis 1 in dual charts.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 *
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#getPrimaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryValuesColorPalette</code>.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 *
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#setPrimaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set the color palette for axis 2 in dual chart.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 *
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#getSecondaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryValuesColorPalette</code>.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 *
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#setSecondaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Bullet_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Bullet#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Bullet_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bullet#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>isRoundCorner</code>.
 * Set whether bars have rounded corners
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#getIsRoundCorner
 * @function
 */

/**
 * Setter for property <code>isRoundCorner</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#setIsRoundCorner
 * @function
 */


/**
 * Getter for property <code>referenceValuesColorPalette</code>.
 * Set the color palette reference value color in bullet chart.
 *
 * Default value is <code>#FCDCDA,#FEECDA,#DDF3E4</code>
 *
 * @return {string[]} the value of property <code>referenceValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Bullet#getReferenceValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>referenceValuesColorPalette</code>.
 *
 * Default value is <code>#FCDCDA,#FEECDA,#DDF3E4</code> 
 *
 * @param {string[]} aReferenceValuesColorPalette  new value for property <code>referenceValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bullet#setReferenceValuesColorPalette
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties
 * 
 * @return {sap.viz.ui5.types.Bullet_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Bullet_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet#destroyToolTip
 * @function
 */

// Start of sap/viz/ui5/types/Bullet.js
sap.viz.ui5.types.Bullet.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}

}; // end of sap/viz/ui5/types/Bullet.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Bullet_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Bullet_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Bullet_tooltip");




/**
 * Constructor for a new ui5/types/Bullet_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for tooltip related properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Bullet_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Bullet_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Bullet_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Bullet_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.Bullet_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Bullet_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Bullet_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/Bullet_tooltip.js

}; // end of sap/viz/ui5/types/Bullet_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Combination') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Combination.
jQuery.sap.declare("sap.viz.ui5.types.Combination");




/**
 * Constructor for a new ui5/types/Combination.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Combination_orientation (default: sap.viz.ui5.types.Combination_orientation.vertical)</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Combination_drawingEffect (default: sap.viz.ui5.types.Combination_drawingEffect.normal)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Combination_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Combination_animation</li>
 * <li>{@link #getDataShape dataShape} : sap.viz.ui5.types.Combination_dataShape</li>
 * <li>{@link #getBar bar} : sap.viz.ui5.types.Combination_bar</li>
 * <li>{@link #getLine line} : sap.viz.ui5.types.Combination_line</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Combination
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Combination
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Combination", { metadata : {

	library : "sap.viz",
	properties : {
		"orientation" : {type : "sap.viz.ui5.types.Combination_orientation", group : "", defaultValue : sap.viz.ui5.types.Combination_orientation.vertical, deprecated: true},
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"primaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1']},
		"secondaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B']},
		"drawingEffect" : {type : "sap.viz.ui5.types.Combination_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Combination_drawingEffect.normal},
		"formatRules" : {type : "object[]", group : "", defaultValue : null}
	},
	aggregations : {
		"toolTip" : {type : "sap.viz.ui5.types.Combination_tooltip", multiple : false, deprecated: true}, 
		"animation" : {type : "sap.viz.ui5.types.Combination_animation", multiple : false}, 
		"dataShape" : {type : "sap.viz.ui5.types.Combination_dataShape", multiple : false}, 
		"bar" : {type : "sap.viz.ui5.types.Combination_bar", multiple : false}, 
		"line" : {type : "sap.viz.ui5.types.Combination_line", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Combination with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Combination.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set the orientation of the plot area.
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.Combination_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.Combination_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination#setOrientation
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Combination#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setColorPalette
 * @function
 */


/**
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set the color palette for axis 1 in dual charts.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 *
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Combination#getPrimaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryValuesColorPalette</code>.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 *
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setPrimaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set the color palette for axis 2 in dual chart.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 *
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Combination#getSecondaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryValuesColorPalette</code>.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 *
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setSecondaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Combination_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Combination#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Combination_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Combination#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setFormatRules
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for the tooltip
 * 
 * @return {sap.viz.ui5.types.Combination_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Combination_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.Combination_animation}
 * @public
 * @name sap.viz.ui5.types.Combination#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Combination_animation} oAnimation
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>dataShape</code>.<br/>
 * Settings for the shape of data series
 * 
 * @return {sap.viz.ui5.types.Combination_dataShape}
 * @public
 * @name sap.viz.ui5.types.Combination#getDataShape
 * @function
 */


/**
 * Setter for the aggregated <code>dataShape</code>.
 * @param {sap.viz.ui5.types.Combination_dataShape} oDataShape
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setDataShape
 * @function
 */
	

/**
 * Destroys the dataShape in the aggregation 
 * named <code>dataShape</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#destroyDataShape
 * @function
 */


/**
 * Getter for aggregation <code>bar</code>.<br/>
 * Settings for bar properties
 * 
 * @return {sap.viz.ui5.types.Combination_bar}
 * @public
 * @name sap.viz.ui5.types.Combination#getBar
 * @function
 */


/**
 * Setter for the aggregated <code>bar</code>.
 * @param {sap.viz.ui5.types.Combination_bar} oBar
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setBar
 * @function
 */
	

/**
 * Destroys the bar in the aggregation 
 * named <code>bar</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#destroyBar
 * @function
 */


/**
 * Getter for aggregation <code>line</code>.<br/>
 * Settings for line properties
 * 
 * @return {sap.viz.ui5.types.Combination_line}
 * @public
 * @name sap.viz.ui5.types.Combination#getLine
 * @function
 */


/**
 * Setter for the aggregated <code>line</code>.
 * @param {sap.viz.ui5.types.Combination_line} oLine
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#setLine
 * @function
 */
	

/**
 * Destroys the line in the aggregation 
 * named <code>line</code>.
 * @return {sap.viz.ui5.types.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination#destroyLine
 * @function
 */

// Start of sap/viz/ui5/types/Combination.js
sap.viz.ui5.types.Combination.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.types.Combination.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Combination.prototype.getDataShape = function() {
  return this._getOrCreate("dataShape");
}
sap.viz.ui5.types.Combination.prototype.getBar = function() {
  return this._getOrCreate("bar");
}
sap.viz.ui5.types.Combination.prototype.getLine = function() {
  return this._getOrCreate("line");
}

}; // end of sap/viz/ui5/types/Combination.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Combination_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Combination_animation.
jQuery.sap.declare("sap.viz.ui5.types.Combination_animation");




/**
 * Constructor for a new ui5/types/Combination_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Combination_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Combination_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Combination_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Combination_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Combination_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Combination_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Combination_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Combination_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Combination_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Combination_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Combination_animation.js

}; // end of sap/viz/ui5/types/Combination_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Combination_bar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Combination_bar.
jQuery.sap.declare("sap.viz.ui5.types.Combination_bar");




/**
 * Constructor for a new ui5/types/Combination_bar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for bar properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Combination_bar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Combination_bar", { metadata : {

	library : "sap.viz",
	properties : {
		"isRoundCorner" : {type : "boolean", group : "", defaultValue : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Combination_bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Combination_bar.extend
 * @function
 */


/**
 * Getter for property <code>isRoundCorner</code>.
 * Set whether the bars have rounded corners
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination_bar#getIsRoundCorner
 * @function
 */

/**
 * Setter for property <code>isRoundCorner</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.Combination_bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination_bar#setIsRoundCorner
 * @function
 */

// Start of sap/viz/ui5/types/Combination_bar.js

}; // end of sap/viz/ui5/types/Combination_bar.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Combination_dataShape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Combination_dataShape.
jQuery.sap.declare("sap.viz.ui5.types.Combination_dataShape");




/**
 * Constructor for a new ui5/types/Combination_dataShape.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPrimaryAxis primaryAxis} : string[] (default: ['bar','line','line'])</li>
 * <li>{@link #getSecondaryAxis secondaryAxis} : string[] (default: ['line','line','line'])</li>
 * <li>{@link #getSecondAxis secondAxis} : string[] (default: ['line','line','line'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the shape of data series
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Combination_dataShape
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Combination_dataShape", { metadata : {

	library : "sap.viz",
	properties : {
		"primaryAxis" : {type : "string[]", group : "", defaultValue : ['bar','line','line']},
		"secondaryAxis" : {type : "string[]", group : "", defaultValue : ['line','line','line']},
		"secondAxis" : {type : "string[]", group : "", defaultValue : ['line','line','line'], deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Combination_dataShape with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Combination_dataShape.extend
 * @function
 */


/**
 * Getter for property <code>primaryAxis</code>.
 * Set the shape of data series on the primary axis
 *
 * Default value is <code>bar,line,line</code>
 *
 * @return {string[]} the value of property <code>primaryAxis</code>
 * @public
 * @name sap.viz.ui5.types.Combination_dataShape#getPrimaryAxis
 * @function
 */

/**
 * Setter for property <code>primaryAxis</code>.
 *
 * Default value is <code>bar,line,line</code> 
 *
 * @param {string[]} aPrimaryAxis  new value for property <code>primaryAxis</code>
 * @return {sap.viz.ui5.types.Combination_dataShape} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_dataShape#setPrimaryAxis
 * @function
 */


/**
 * Getter for property <code>secondaryAxis</code>.
 * Set the shape of data series on the secondary axis
 *
 * Default value is <code>line,line,line</code>
 *
 * @return {string[]} the value of property <code>secondaryAxis</code>
 * @public
 * @name sap.viz.ui5.types.Combination_dataShape#getSecondaryAxis
 * @function
 */

/**
 * Setter for property <code>secondaryAxis</code>.
 *
 * Default value is <code>line,line,line</code> 
 *
 * @param {string[]} aSecondaryAxis  new value for property <code>secondaryAxis</code>
 * @return {sap.viz.ui5.types.Combination_dataShape} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_dataShape#setSecondaryAxis
 * @function
 */


/**
 * Getter for property <code>secondAxis</code>.
 * Set the shape of data series on the secondary axis (Old version; still works)
 *
 * Default value is <code>line,line,line</code>
 *
 * @return {string[]} the value of property <code>secondAxis</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination_dataShape#getSecondAxis
 * @function
 */

/**
 * Setter for property <code>secondAxis</code>.
 *
 * Default value is <code>line,line,line</code> 
 *
 * @param {string[]} aSecondAxis  new value for property <code>secondAxis</code>
 * @return {sap.viz.ui5.types.Combination_dataShape} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination_dataShape#setSecondAxis
 * @function
 */

// Start of sap/viz/ui5/types/Combination_dataShape.js

}; // end of sap/viz/ui5/types/Combination_dataShape.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Combination_line') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Combination_line.
jQuery.sap.declare("sap.viz.ui5.types.Combination_line");




/**
 * Constructor for a new ui5/types/Combination_line.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : int (default: 2)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMarker marker} : sap.viz.ui5.types.Combination_line_marker</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for line properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Combination_line
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Combination_line", { metadata : {

	library : "sap.viz",
	properties : {
		"width" : {type : "int", group : "", defaultValue : 2}
	},
	aggregations : {
		"marker" : {type : "sap.viz.ui5.types.Combination_line_marker", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Combination_line with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Combination_line.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Set the width of lines, ranging from '1' to '7'. If you enter a value outside the range, the line width will default to '2'.
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>width</code>
 * @public
 * @name sap.viz.ui5.types.Combination_line#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.types.Combination_line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_line#setWidth
 * @function
 */


/**
 * Getter for aggregation <code>marker</code>.<br/>
 * Settings for the visual markers for data points
 * 
 * @return {sap.viz.ui5.types.Combination_line_marker}
 * @public
 * @name sap.viz.ui5.types.Combination_line#getMarker
 * @function
 */


/**
 * Setter for the aggregated <code>marker</code>.
 * @param {sap.viz.ui5.types.Combination_line_marker} oMarker
 * @return {sap.viz.ui5.types.Combination_line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_line#setMarker
 * @function
 */
	

/**
 * Destroys the marker in the aggregation 
 * named <code>marker</code>.
 * @return {sap.viz.ui5.types.Combination_line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_line#destroyMarker
 * @function
 */

// Start of sap/viz/ui5/types/Combination_line.js
sap.viz.ui5.types.Combination_line.prototype.getMarker = function() {
  return this._getOrCreate("marker");
}

}; // end of sap/viz/ui5/types/Combination_line.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Combination_line_marker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Combination_line_marker.
jQuery.sap.declare("sap.viz.ui5.types.Combination_line_marker");




/**
 * Constructor for a new ui5/types/Combination_line_marker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShape shape} : string[] (default: ['circle'])</li>
 * <li>{@link #getSize size} : int (default: 6)</li>
 * <li>{@link #getNumber number} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the visual markers for data points
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Combination_line_marker
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Combination_line_marker", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"shape" : {type : "string[]", group : "", defaultValue : ['circle']},
		"size" : {type : "int", group : "", defaultValue : 6},
		"number" : {type : "int", group : "", defaultValue : null, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Combination_line_marker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Combination_line_marker.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the data point markers
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Combination_line_marker#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Combination_line_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_line_marker#setVisible
 * @function
 */


/**
 * Getter for property <code>shape</code>.
 * Set the shape of the data point markers
 *
 * Default value is <code>circle</code>
 *
 * @return {string[]} the value of property <code>shape</code>
 * @public
 * @name sap.viz.ui5.types.Combination_line_marker#getShape
 * @function
 */

/**
 * Setter for property <code>shape</code>.
 *
 * Default value is <code>circle</code> 
 *
 * @param {string[]} aShape  new value for property <code>shape</code>
 * @return {sap.viz.ui5.types.Combination_line_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_line_marker#setShape
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Set the size of the data point markers, ranging from '4' to '32'. If you enter a value outside the range, the size defaults to '6'.
 *
 * Default value is <code>6</code>
 *
 * @return {int} the value of property <code>size</code>
 * @public
 * @name sap.viz.ui5.types.Combination_line_marker#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>6</code> 
 *
 * @param {int} iSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Combination_line_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_line_marker#setSize
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Set the number to enable events for markers when they are invisible. If the total amount of markers is bigger than this value, markers will remain hidden when selected or hovered over. The default value is Number.POSITIVE_INFINITY, which is the largest possible value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>number</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination_line_marker#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumber  new value for property <code>number</code>
 * @return {sap.viz.ui5.types.Combination_line_marker} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination_line_marker#setNumber
 * @function
 */

// Start of sap/viz/ui5/types/Combination_line_marker.js

}; // end of sap/viz/ui5/types/Combination_line_marker.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Combination_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Combination_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Combination_tooltip");




/**
 * Constructor for a new ui5/types/Combination_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the tooltip
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Combination_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Combination_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Combination_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Combination_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.Combination_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Combination_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Combination_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/Combination_tooltip.js

}; // end of sap/viz/ui5/types/Combination_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Datalabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Datalabel.
jQuery.sap.declare("sap.viz.ui5.types.Datalabel");




/**
 * Constructor for a new ui5/types/Datalabel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getHideWhenOverlap hideWhenOverlap} : boolean (default: true)</li>
 * <li>{@link #getIsDonut isDonut} : boolean (default: false)</li>
 * <li>{@link #getType type} : string (default: 'value')</li>
 * <li>{@link #getAutomaticInOutside automaticInOutside} : boolean (default: true)</li>
 * <li>{@link #getShowZero showZero} : boolean (default: true)</li>
 * <li>{@link #getIsGeoChart isGeoChart} : boolean (default: false)</li>
 * <li>{@link #getIsBubbleChart isBubbleChart} : boolean (default: false)</li>
 * <li>{@link #getIsStackMode isStackMode} : boolean (default: false)</li>
 * <li>{@link #getIsPercentMode isPercentMode} : boolean (default: false)</li>
 * <li>{@link #getPositionPreference positionPreference} : boolean (default: false)</li>
 * <li>{@link #getOutsideVisible outsideVisible} : boolean (default: true)</li>
 * <li>{@link #getOutsidePosition outsidePosition} : sap.viz.ui5.types.Datalabel_outsidePosition (default: sap.viz.ui5.types.Datalabel_outsidePosition.up)</li>
 * <li>{@link #getPaintingMode paintingMode} : sap.viz.ui5.types.Datalabel_paintingMode (default: sap.viz.ui5.types.Datalabel_paintingMode.rectCoordinate)</li>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.Datalabel_position (default: sap.viz.ui5.types.Datalabel_position.inside)</li>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Datalabel_orientation (default: sap.viz.ui5.types.Datalabel_orientation.vertical)</li>
 * <li>{@link #getRespectShapeWidth respectShapeWidth} : boolean (default: false)</li>
 * <li>{@link #getFormatString formatString} : any[][] (default: [[null]])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Datalabel
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Datalabel
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Datalabel", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : false},
		"hideWhenOverlap" : {type : "boolean", group : "", defaultValue : true},
		"isDonut" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"type" : {type : "string", group : "", defaultValue : 'value', deprecated: true},
		"automaticInOutside" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"showZero" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"isGeoChart" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"isBubbleChart" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"isStackMode" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"isPercentMode" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"positionPreference" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"outsideVisible" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"outsidePosition" : {type : "sap.viz.ui5.types.Datalabel_outsidePosition", group : "", defaultValue : sap.viz.ui5.types.Datalabel_outsidePosition.up, deprecated: true},
		"paintingMode" : {type : "sap.viz.ui5.types.Datalabel_paintingMode", group : "", defaultValue : sap.viz.ui5.types.Datalabel_paintingMode.rectCoordinate, deprecated: true},
		"position" : {type : "sap.viz.ui5.types.Datalabel_position", group : "", defaultValue : sap.viz.ui5.types.Datalabel_position.inside, deprecated: true},
		"orientation" : {type : "sap.viz.ui5.types.Datalabel_orientation", group : "", defaultValue : sap.viz.ui5.types.Datalabel_orientation.vertical, deprecated: true},
		"respectShapeWidth" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"formatString" : {type : "any[][]", group : "", defaultValue : [[null]]}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Datalabel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Datalabel.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set whether the data labels are visible
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Datalabel#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datalabel#setVisible
 * @function
 */


/**
 * Getter for property <code>hideWhenOverlap</code>.
 * Always show all data labels even they are overlapped
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>hideWhenOverlap</code>
 * @public
 * @name sap.viz.ui5.types.Datalabel#getHideWhenOverlap
 * @function
 */

/**
 * Setter for property <code>hideWhenOverlap</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHideWhenOverlap  new value for property <code>hideWhenOverlap</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datalabel#setHideWhenOverlap
 * @function
 */


/**
 * Getter for property <code>isDonut</code>.
 * Set whether the chart is a donut chart. Use only for donut charts.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isDonut</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getIsDonut
 * @function
 */

/**
 * Setter for property <code>isDonut</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsDonut  new value for property <code>isDonut</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setIsDonut
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Set the type of label
 *
 * Default value is <code>value</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>value</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setType
 * @function
 */


/**
 * Getter for property <code>automaticInOutside</code>.
 * If set to 'true', the data labels will be automatically placed outside when the data label position property is inside, and vice versa
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>automaticInOutside</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getAutomaticInOutside
 * @function
 */

/**
 * Setter for property <code>automaticInOutside</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAutomaticInOutside  new value for property <code>automaticInOutside</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setAutomaticInOutside
 * @function
 */


/**
 * Getter for property <code>showZero</code>.
 * If set to 'true', the value zero is shown in the data labels
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showZero</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getShowZero
 * @function
 */

/**
 * Setter for property <code>showZero</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowZero  new value for property <code>showZero</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setShowZero
 * @function
 */


/**
 * Getter for property <code>isGeoChart</code>.
 * Set whether the chart is a geo chart
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isGeoChart</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getIsGeoChart
 * @function
 */

/**
 * Setter for property <code>isGeoChart</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsGeoChart  new value for property <code>isGeoChart</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setIsGeoChart
 * @function
 */


/**
 * Getter for property <code>isBubbleChart</code>.
 * Set whether the chart is a bubble chart
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isBubbleChart</code>
 * @public
 * @deprecated Since version 1.22. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getIsBubbleChart
 * @function
 */

/**
 * Setter for property <code>isBubbleChart</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsBubbleChart  new value for property <code>isBubbleChart</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.22. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setIsBubbleChart
 * @function
 */


/**
 * Getter for property <code>isStackMode</code>.
 * Set whether the chart is a stack chart. Set for stack chart only.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isStackMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getIsStackMode
 * @function
 */

/**
 * Setter for property <code>isStackMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsStackMode  new value for property <code>isStackMode</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setIsStackMode
 * @function
 */


/**
 * Getter for property <code>isPercentMode</code>.
 * Set whether the chart is a percent chart. Set for percent chart only.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isPercentMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getIsPercentMode
 * @function
 */

/**
 * Setter for property <code>isPercentMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsPercentMode  new value for property <code>isPercentMode</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setIsPercentMode
 * @function
 */


/**
 * Getter for property <code>positionPreference</code>.
 * If set to 'true', the data label position is defined by the property 'outsidePosition', regardless of whether the data label value is negative
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>positionPreference</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getPositionPreference
 * @function
 */

/**
 * Setter for property <code>positionPreference</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPositionPreference  new value for property <code>positionPreference</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setPositionPreference
 * @function
 */


/**
 * Getter for property <code>outsideVisible</code>.
 * If set to 'true', the data label is visible when it is outside
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>outsideVisible</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getOutsideVisible
 * @function
 */

/**
 * Setter for property <code>outsideVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bOutsideVisible  new value for property <code>outsideVisible</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setOutsideVisible
 * @function
 */


/**
 * Getter for property <code>outsidePosition</code>.
 * If set to 'true', the data label is positioned above the element when it is outside
 *
 * Default value is <code>up</code>
 *
 * @return {sap.viz.ui5.types.Datalabel_outsidePosition} the value of property <code>outsidePosition</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getOutsidePosition
 * @function
 */

/**
 * Setter for property <code>outsidePosition</code>.
 *
 * Default value is <code>up</code> 
 *
 * @param {sap.viz.ui5.types.Datalabel_outsidePosition} oOutsidePosition  new value for property <code>outsidePosition</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setOutsidePosition
 * @function
 */


/**
 * Getter for property <code>paintingMode</code>.
 * Set painting mode of data labels
 *
 * Default value is <code>rectCoordinate</code>
 *
 * @return {sap.viz.ui5.types.Datalabel_paintingMode} the value of property <code>paintingMode</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getPaintingMode
 * @function
 */

/**
 * Setter for property <code>paintingMode</code>.
 *
 * Default value is <code>rectCoordinate</code> 
 *
 * @param {sap.viz.ui5.types.Datalabel_paintingMode} oPaintingMode  new value for property <code>paintingMode</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setPaintingMode
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * Set position of data labels
 *
 * Default value is <code>inside</code>
 *
 * @return {sap.viz.ui5.types.Datalabel_position} the value of property <code>position</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is <code>inside</code> 
 *
 * @param {sap.viz.ui5.types.Datalabel_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setPosition
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set orientation of data labels
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.Datalabel_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.Datalabel_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setOrientation
 * @function
 */


/**
 * Getter for property <code>respectShapeWidth</code>.
 * If set to 'true', the data label is automatically hidden when bubble width isn't enough to show the whole label in single bubble chart.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>respectShapeWidth</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#getRespectShapeWidth
 * @function
 */

/**
 * Setter for property <code>respectShapeWidth</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRespectShapeWidth  new value for property <code>respectShapeWidth</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Datalabel#setRespectShapeWidth
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * Set the format strings for the data labels. For dual axis charts, the first array is applied to the primary axis and the second array is applied to the second axis. If you enter fewer format strings into an array than there are measures in the respective axis, then the last format string is applied to all remaining measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The following is a simple example: [["0.00%"],["0.00%"]].
 *
 * Default value is <code>null</code>
 *
 * @return {any[][]} the value of property <code>formatString</code>
 * @public
 * @name sap.viz.ui5.types.Datalabel#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {any[][]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Datalabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datalabel#setFormatString
 * @function
 */

// Start of sap/viz/ui5/types/Datalabel.js

}; // end of sap/viz/ui5/types/Datalabel.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Datatransform') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Datatransform.
jQuery.sap.declare("sap.viz.ui5.types.Datatransform");




/**
 * Constructor for a new ui5/types/Datatransform.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAutoBinning autoBinning} : sap.viz.ui5.types.Datatransform_autoBinning</li>
 * <li>{@link #getDataSampling dataSampling} : sap.viz.ui5.types.Datatransform_dataSampling</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Datatransform
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Datatransform
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Datatransform", { metadata : {

	library : "sap.viz",
	aggregations : {
		"autoBinning" : {type : "sap.viz.ui5.types.Datatransform_autoBinning", multiple : false}, 
		"dataSampling" : {type : "sap.viz.ui5.types.Datatransform_dataSampling", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Datatransform.extend
 * @function
 */


/**
 * Getter for aggregation <code>autoBinning</code>.<br/>
 * Settings for the auto-binning algorithm
 * 
 * @return {sap.viz.ui5.types.Datatransform_autoBinning}
 * @public
 * @name sap.viz.ui5.types.Datatransform#getAutoBinning
 * @function
 */


/**
 * Setter for the aggregated <code>autoBinning</code>.
 * @param {sap.viz.ui5.types.Datatransform_autoBinning} oAutoBinning
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform#setAutoBinning
 * @function
 */
	

/**
 * Destroys the autoBinning in the aggregation 
 * named <code>autoBinning</code>.
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform#destroyAutoBinning
 * @function
 */


/**
 * Getter for aggregation <code>dataSampling</code>.<br/>
 * Settings for the data sampling algorithm
 * 
 * @return {sap.viz.ui5.types.Datatransform_dataSampling}
 * @public
 * @name sap.viz.ui5.types.Datatransform#getDataSampling
 * @function
 */


/**
 * Setter for the aggregated <code>dataSampling</code>.
 * @param {sap.viz.ui5.types.Datatransform_dataSampling} oDataSampling
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform#setDataSampling
 * @function
 */
	

/**
 * Destroys the dataSampling in the aggregation 
 * named <code>dataSampling</code>.
 * @return {sap.viz.ui5.types.Datatransform} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform#destroyDataSampling
 * @function
 */

// Start of sap/viz/ui5/types/Datatransform.js
sap.viz.ui5.types.Datatransform.prototype.getAutoBinning = function() {
  return this._getOrCreate("autoBinning");
}
sap.viz.ui5.types.Datatransform.prototype.getDataSampling = function() {
  return this._getOrCreate("dataSampling");
}

}; // end of sap/viz/ui5/types/Datatransform.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Datatransform_autoBinning') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Datatransform_autoBinning.
jQuery.sap.declare("sap.viz.ui5.types.Datatransform_autoBinning");




/**
 * Constructor for a new ui5/types/Datatransform_autoBinning.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnable enable} : boolean (default: false)</li>
 * <li>{@link #getBinNumber binNumber} : int (default: 10)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the auto-binning algorithm
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Datatransform_autoBinning
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Datatransform_autoBinning", { metadata : {

	library : "sap.viz",
	properties : {
		"enable" : {type : "boolean", group : "", defaultValue : false},
		"binNumber" : {type : "int", group : "", defaultValue : 10}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform_autoBinning with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Datatransform_autoBinning.extend
 * @function
 */


/**
 * Getter for property <code>enable</code>.
 * Set whether data auto-binning is enabled.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * @name sap.viz.ui5.types.Datatransform_autoBinning#getEnable
 * @function
 */

/**
 * Setter for property <code>enable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.viz.ui5.types.Datatransform_autoBinning} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_autoBinning#setEnable
 * @function
 */


/**
 * Getter for property <code>binNumber</code>.
 * Set the bin number.
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>binNumber</code>
 * @public
 * @name sap.viz.ui5.types.Datatransform_autoBinning#getBinNumber
 * @function
 */

/**
 * Setter for property <code>binNumber</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iBinNumber  new value for property <code>binNumber</code>
 * @return {sap.viz.ui5.types.Datatransform_autoBinning} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_autoBinning#setBinNumber
 * @function
 */

// Start of sap/viz/ui5/types/Datatransform_autoBinning.js

}; // end of sap/viz/ui5/types/Datatransform_autoBinning.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Datatransform_dataSampling') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Datatransform_dataSampling.
jQuery.sap.declare("sap.viz.ui5.types.Datatransform_dataSampling");




/**
 * Constructor for a new ui5/types/Datatransform_dataSampling.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnable enable} : boolean (default: false)</li>
 * <li>{@link #getSizeFactor sizeFactor} : int (default: 1)</li>
 * <li>{@link #getNumberPrecondition numberPrecondition} : int (default: 3000)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGrid grid} : sap.viz.ui5.types.Datatransform_dataSampling_grid</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the data sampling algorithm
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Datatransform_dataSampling
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Datatransform_dataSampling", { metadata : {

	library : "sap.viz",
	properties : {
		"enable" : {type : "boolean", group : "", defaultValue : false},
		"sizeFactor" : {type : "int", group : "", defaultValue : 1},
		"numberPrecondition" : {type : "int", group : "", defaultValue : 3000}
	},
	aggregations : {
		"grid" : {type : "sap.viz.ui5.types.Datatransform_dataSampling_grid", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform_dataSampling with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Datatransform_dataSampling.extend
 * @function
 */


/**
 * Getter for property <code>enable</code>.
 * Set whether data sampling is enabled.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#getEnable
 * @function
 */

/**
 * Setter for property <code>enable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#setEnable
 * @function
 */


/**
 * Getter for property <code>sizeFactor</code>.
 * Set the data point percentage in the original dataset
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>sizeFactor</code>
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#getSizeFactor
 * @function
 */

/**
 * Setter for property <code>sizeFactor</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iSizeFactor  new value for property <code>sizeFactor</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#setSizeFactor
 * @function
 */


/**
 * Getter for property <code>numberPrecondition</code>.
 * If the data point is larger than this value, data sampling is triggered.
 *
 * Default value is <code>3000</code>
 *
 * @return {int} the value of property <code>numberPrecondition</code>
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#getNumberPrecondition
 * @function
 */

/**
 * Setter for property <code>numberPrecondition</code>.
 *
 * Default value is <code>3000</code> 
 *
 * @param {int} iNumberPrecondition  new value for property <code>numberPrecondition</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#setNumberPrecondition
 * @function
 */


/**
 * Getter for aggregation <code>grid</code>.<br/>
 * add documentation for aggregation grid
 * 
 * @return {sap.viz.ui5.types.Datatransform_dataSampling_grid}
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#getGrid
 * @function
 */


/**
 * Setter for the aggregated <code>grid</code>.
 * @param {sap.viz.ui5.types.Datatransform_dataSampling_grid} oGrid
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#setGrid
 * @function
 */
	

/**
 * Destroys the grid in the aggregation 
 * named <code>grid</code>.
 * @return {sap.viz.ui5.types.Datatransform_dataSampling} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling#destroyGrid
 * @function
 */

// Start of sap/viz/ui5/types/Datatransform_dataSampling.js
sap.viz.ui5.types.Datatransform_dataSampling.prototype.getGrid = function() {
  return this._getOrCreate("grid");
}

}; // end of sap/viz/ui5/types/Datatransform_dataSampling.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Datatransform_dataSampling_grid') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Datatransform_dataSampling_grid.
jQuery.sap.declare("sap.viz.ui5.types.Datatransform_dataSampling_grid");




/**
 * Constructor for a new ui5/types/Datatransform_dataSampling_grid.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRow row} : int (default: 3)</li>
 * <li>{@link #getColumn column} : int (default: 3)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Structured Type ui5/types/Datatransform_dataSampling_grid
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Datatransform_dataSampling_grid
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Datatransform_dataSampling_grid", { metadata : {

	library : "sap.viz",
	properties : {
		"row" : {type : "int", group : "", defaultValue : 3},
		"column" : {type : "int", group : "", defaultValue : 3}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Datatransform_dataSampling_grid with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Datatransform_dataSampling_grid.extend
 * @function
 */


/**
 * Getter for property <code>row</code>.
 * Set the number of rows in the grid.
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>row</code>
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling_grid#getRow
 * @function
 */

/**
 * Setter for property <code>row</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iRow  new value for property <code>row</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling_grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling_grid#setRow
 * @function
 */


/**
 * Getter for property <code>column</code>.
 * Set the number of columns in the grid.
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>column</code>
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling_grid#getColumn
 * @function
 */

/**
 * Setter for property <code>column</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iColumn  new value for property <code>column</code>
 * @return {sap.viz.ui5.types.Datatransform_dataSampling_grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Datatransform_dataSampling_grid#setColumn
 * @function
 */

// Start of sap/viz/ui5/types/Datatransform_dataSampling_grid.js

}; // end of sap/viz/ui5/types/Datatransform_dataSampling_grid.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Heatmap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Heatmap.
jQuery.sap.declare("sap.viz.ui5.types.Heatmap");




/**
 * Constructor for a new ui5/types/Heatmap.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStartColor startColor} : string (default: '#C2E3A9')</li>
 * <li>{@link #getEndColor endColor} : string (default: '#73C03C')</li>
 * <li>{@link #getColorPalette colorPalette} : string[]</li>
 * <li>{@link #getLegendValues legendValues} : int[]</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBorder border} : sap.viz.ui5.types.Heatmap_border</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Heatmap_animation</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Heatmap_tooltip</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Heatmap
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Heatmap
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Heatmap", { metadata : {

	library : "sap.viz",
	properties : {
		"startColor" : {type : "string", group : "", defaultValue : '#C2E3A9'},
		"endColor" : {type : "string", group : "", defaultValue : '#73C03C'},
		"colorPalette" : {type : "string[]", group : "", defaultValue : null},
		"legendValues" : {type : "int[]", group : "", defaultValue : null},
		"formatRules" : {type : "object[]", group : "", defaultValue : null}
	},
	aggregations : {
		"border" : {type : "sap.viz.ui5.types.Heatmap_border", multiple : false}, 
		"animation" : {type : "sap.viz.ui5.types.Heatmap_animation", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Heatmap_tooltip", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Heatmap.extend
 * @function
 */


/**
 * Getter for property <code>startColor</code>.
 * Set the starting color of the heat map
 *
 * Default value is <code>#C2E3A9</code>
 *
 * @return {string} the value of property <code>startColor</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap#getStartColor
 * @function
 */

/**
 * Setter for property <code>startColor</code>.
 *
 * Default value is <code>#C2E3A9</code> 
 *
 * @param {string} sStartColor  new value for property <code>startColor</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#setStartColor
 * @function
 */


/**
 * Getter for property <code>endColor</code>.
 * Set the end color of the heat map
 *
 * Default value is <code>#73C03C</code>
 *
 * @return {string} the value of property <code>endColor</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap#getEndColor
 * @function
 */

/**
 * Setter for property <code>endColor</code>.
 *
 * Default value is <code>#73C03C</code> 
 *
 * @param {string} sEndColor  new value for property <code>endColor</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#setEndColor
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C"].
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#setColorPalette
 * @function
 */


/**
 * Getter for property <code>legendValues</code>.
 * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend automatically calculates the values according to the data. If the number of values in the legendValues array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int[]} the value of property <code>legendValues</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap#getLegendValues
 * @function
 */

/**
 * Setter for property <code>legendValues</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int[]} aLegendValues  new value for property <code>legendValues</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#setLegendValues
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#setFormatRules
 * @function
 */


/**
 * Getter for aggregation <code>border</code>.<br/>
 * Settings for the border
 * 
 * @return {sap.viz.ui5.types.Heatmap_border}
 * @public
 * @name sap.viz.ui5.types.Heatmap#getBorder
 * @function
 */


/**
 * Setter for the aggregated <code>border</code>.
 * @param {sap.viz.ui5.types.Heatmap_border} oBorder
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#setBorder
 * @function
 */
	

/**
 * Destroys the border in the aggregation 
 * named <code>border</code>.
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#destroyBorder
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.Heatmap_animation}
 * @public
 * @name sap.viz.ui5.types.Heatmap#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Heatmap_animation} oAnimation
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip
 * 
 * @return {sap.viz.ui5.types.Heatmap_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Heatmap#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Heatmap_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Heatmap#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Heatmap#destroyToolTip
 * @function
 */

// Start of sap/viz/ui5/types/Heatmap.js
sap.viz.ui5.types.Heatmap.prototype.getBorder = function() {
  return this._getOrCreate("border");
}
sap.viz.ui5.types.Heatmap.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Heatmap.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}

}; // end of sap/viz/ui5/types/Heatmap.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Heatmap_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Heatmap_animation.
jQuery.sap.declare("sap.viz.ui5.types.Heatmap_animation");




/**
 * Constructor for a new ui5/types/Heatmap_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Heatmap_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Heatmap_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Heatmap_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Heatmap_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Heatmap_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Heatmap_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Heatmap_animation.js

}; // end of sap/viz/ui5/types/Heatmap_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Heatmap_border') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Heatmap_border.
jQuery.sap.declare("sap.viz.ui5.types.Heatmap_border");




/**
 * Constructor for a new ui5/types/Heatmap_border.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the border
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Heatmap_border
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Heatmap_border", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap_border with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Heatmap_border.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the zone edge
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap_border#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Heatmap_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap_border#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Heatmap_border.js

}; // end of sap/viz/ui5/types/Heatmap_border.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Heatmap_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Heatmap_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Heatmap_tooltip");




/**
 * Constructor for a new ui5/types/Heatmap_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for tooltip
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Heatmap_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Heatmap_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Heatmap_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Heatmap_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.Heatmap_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Heatmap_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Heatmap_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/Heatmap_tooltip.js

}; // end of sap/viz/ui5/types/Heatmap_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Legend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Legend.
jQuery.sap.declare("sap.viz.ui5.types.Legend");




/**
 * Constructor for a new ui5/types/Legend.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLayout layout} : sap.viz.ui5.types.Legend_layout</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Legend
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Legend
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Legend", { metadata : {

	library : "sap.viz",
	aggregations : {
		"layout" : {type : "sap.viz.ui5.types.Legend_layout", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Legend with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Legend.extend
 * @function
 */


/**
 * Getter for aggregation <code>layout</code>.<br/>
 * Settings for the layout of the legend area
 * 
 * @return {sap.viz.ui5.types.Legend_layout}
 * @public
 * @name sap.viz.ui5.types.Legend#getLayout
 * @function
 */


/**
 * Setter for the aggregated <code>layout</code>.
 * @param {sap.viz.ui5.types.Legend_layout} oLayout
 * @return {sap.viz.ui5.types.Legend} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Legend#setLayout
 * @function
 */
	

/**
 * Destroys the layout in the aggregation 
 * named <code>layout</code>.
 * @return {sap.viz.ui5.types.Legend} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Legend#destroyLayout
 * @function
 */

// Start of sap/viz/ui5/types/Legend.js
sap.viz.ui5.types.Legend.prototype.getLayout = function() {
  return this._getOrCreate("layout");
}

}; // end of sap/viz/ui5/types/Legend.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Legend_layout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Legend_layout.
jQuery.sap.declare("sap.viz.ui5.types.Legend_layout");




/**
 * Constructor for a new ui5/types/Legend_layout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.Legend_layout_position (default: sap.viz.ui5.types.Legend_layout_position.right)</li>
 * <li>{@link #getPriority priority} : int (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the layout of the legend area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Legend_layout
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Legend_layout", { metadata : {

	library : "sap.viz",
	properties : {
		"position" : {type : "sap.viz.ui5.types.Legend_layout_position", group : "", defaultValue : sap.viz.ui5.types.Legend_layout_position.right},
		"priority" : {type : "int", group : "", defaultValue : 1, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Legend_layout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Legend_layout.extend
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * Set the position of the legend area
 *
 * Default value is <code>right</code>
 *
 * @return {sap.viz.ui5.types.Legend_layout_position} the value of property <code>position</code>
 * @public
 * @name sap.viz.ui5.types.Legend_layout#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is <code>right</code> 
 *
 * @param {sap.viz.ui5.types.Legend_layout_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Legend_layout} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Legend_layout#setPosition
 * @function
 */


/**
 * Getter for property <code>priority</code>.
 * Set the priority of the position for the legend area
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>priority</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Legend_layout#getPriority
 * @function
 */

/**
 * Setter for property <code>priority</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iPriority  new value for property <code>priority</code>
 * @return {sap.viz.ui5.types.Legend_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Legend_layout#setPriority
 * @function
 */

// Start of sap/viz/ui5/types/Legend_layout.js

}; // end of sap/viz/ui5/types/Legend_layout.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Line') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Line.
jQuery.sap.declare("sap.viz.ui5.types.Line");




/**
 * Constructor for a new ui5/types/Line.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.Line_orientation (default: sap.viz.ui5.types.Line_orientation.vertical)</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Line_drawingEffect (default: sap.viz.ui5.types.Line_drawingEffect.normal)</li>
 * <li>{@link #getWidth width} : int (default: 2)</li>
 * <li>{@link #getShowGroupDetail showGroupDetail} : boolean (default: false)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Line_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Line_animation</li>
 * <li>{@link #getMarker marker} : sap.viz.ui5.types.Line_marker</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Line_hoverline</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Line
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Line
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Line", { metadata : {

	library : "sap.viz",
	properties : {
		"orientation" : {type : "sap.viz.ui5.types.Line_orientation", group : "", defaultValue : sap.viz.ui5.types.Line_orientation.vertical, deprecated: true},
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"primaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1']},
		"secondaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B']},
		"drawingEffect" : {type : "sap.viz.ui5.types.Line_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Line_drawingEffect.normal},
		"width" : {type : "int", group : "", defaultValue : 2},
		"showGroupDetail" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"formatRules" : {type : "object[]", group : "", defaultValue : null}
	},
	aggregations : {
		"toolTip" : {type : "sap.viz.ui5.types.Line_tooltip", multiple : false, deprecated: true}, 
		"animation" : {type : "sap.viz.ui5.types.Line_animation", multiple : false}, 
		"marker" : {type : "sap.viz.ui5.types.Line_marker", multiple : false}, 
		"hoverline" : {type : "sap.viz.ui5.types.Line_hoverline", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Line with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Line.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set the orientation of the plot area.
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.Line_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.Line_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#setOrientation
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Line#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setColorPalette
 * @function
 */


/**
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set the color palette for axis 1 in dual charts.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 *
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Line#getPrimaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryValuesColorPalette</code>.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 *
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setPrimaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set the color palette for axis 2 in dual chart.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 *
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Line#getSecondaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryValuesColorPalette</code>.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 *
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setSecondaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Line_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Line#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Line_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Set the width of the lines, ranging from '1' to '7'. If you enter a value outside that range, the line width defaults to '2'.
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>width</code>
 * @public
 * @name sap.viz.ui5.types.Line#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setWidth
 * @function
 */


/**
 * Getter for property <code>showGroupDetail</code>.
 * mouse over show one catergory detail
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showGroupDetail</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#getShowGroupDetail
 * @function
 */

/**
 * Setter for property <code>showGroupDetail</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowGroupDetail  new value for property <code>showGroupDetail</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#setShowGroupDetail
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Line#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setFormatRules
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for the tooltip
 * 
 * @return {sap.viz.ui5.types.Line_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Line_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations.
 * 
 * @return {sap.viz.ui5.types.Line_animation}
 * @public
 * @name sap.viz.ui5.types.Line#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Line_animation} oAnimation
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>marker</code>.<br/>
 * Settings for marker/data point graphics
 * 
 * @return {sap.viz.ui5.types.Line_marker}
 * @public
 * @name sap.viz.ui5.types.Line#getMarker
 * @function
 */


/**
 * Setter for the aggregated <code>marker</code>.
 * @param {sap.viz.ui5.types.Line_marker} oMarker
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#setMarker
 * @function
 */
	

/**
 * Destroys the marker in the aggregation 
 * named <code>marker</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line#destroyMarker
 * @function
 */


/**
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for the hoverline.
 * 
 * @return {sap.viz.ui5.types.Line_hoverline}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#getHoverline
 * @function
 */


/**
 * Setter for the aggregated <code>hoverline</code>.
 * @param {sap.viz.ui5.types.Line_hoverline} oHoverline
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#setHoverline
 * @function
 */
	

/**
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line#destroyHoverline
 * @function
 */

// Start of sap/viz/ui5/types/Line.js
sap.viz.ui5.types.Line.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.types.Line.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Line.prototype.getMarker = function() {
  return this._getOrCreate("marker");
}
sap.viz.ui5.types.Line.prototype.getHoverline = function() {
  return this._getOrCreate("hoverline");
}

}; // end of sap/viz/ui5/types/Line.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Line_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Line_animation.
jQuery.sap.declare("sap.viz.ui5.types.Line_animation");




/**
 * Constructor for a new ui5/types/Line_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Line_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Line_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Line_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Line_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Line_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Line_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Line_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Line_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Line_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Line_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Line_animation.js

}; // end of sap/viz/ui5/types/Line_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Line_hoverline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Line_hoverline.
jQuery.sap.declare("sap.viz.ui5.types.Line_hoverline");




/**
 * Constructor for a new ui5/types/Line_hoverline.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the hoverline.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line_hoverline
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Line_hoverline", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Line_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Line_hoverline.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the hoverline.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Line_hoverline#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Line_hoverline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_hoverline#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Line_hoverline.js

}; // end of sap/viz/ui5/types/Line_hoverline.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Line_marker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Line_marker.
jQuery.sap.declare("sap.viz.ui5.types.Line_marker");




/**
 * Constructor for a new ui5/types/Line_marker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShape shape} : sap.viz.ui5.types.Line_marker_shape (default: sap.viz.ui5.types.Line_marker_shape.circle)</li>
 * <li>{@link #getSize size} : int (default: 6)</li>
 * <li>{@link #getNumber number} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for marker/data point graphics
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Line_marker
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Line_marker", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"shape" : {type : "sap.viz.ui5.types.Line_marker_shape", group : "", defaultValue : sap.viz.ui5.types.Line_marker_shape.circle},
		"size" : {type : "int", group : "", defaultValue : 6},
		"number" : {type : "int", group : "", defaultValue : null, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Line_marker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Line_marker.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the markers
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Line_marker#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Line_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_marker#setVisible
 * @function
 */


/**
 * Getter for property <code>shape</code>.
 * Set the shape of the markers
 *
 * Default value is <code>circle</code>
 *
 * @return {sap.viz.ui5.types.Line_marker_shape} the value of property <code>shape</code>
 * @public
 * @name sap.viz.ui5.types.Line_marker#getShape
 * @function
 */

/**
 * Setter for property <code>shape</code>.
 *
 * Default value is <code>circle</code> 
 *
 * @param {sap.viz.ui5.types.Line_marker_shape} oShape  new value for property <code>shape</code>
 * @return {sap.viz.ui5.types.Line_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_marker#setShape
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Set the marker size for data points, ranging from '4' to '32'. If you enter a value outside that range, the marker size defaults to '6'.
 *
 * Default value is <code>6</code>
 *
 * @return {int} the value of property <code>size</code>
 * @public
 * @name sap.viz.ui5.types.Line_marker#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>6</code> 
 *
 * @param {int} iSize  new value for property <code>size</code>
 * @return {sap.viz.ui5.types.Line_marker} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_marker#setSize
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Set the number to enable events for markers when they are invisible. If the total amount of markers is bigger than this value, markers will remain hidden when selected or hovered over. The default value is Number.POSITIVE_INFINITY, which is the largest possible value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>number</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line_marker#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumber  new value for property <code>number</code>
 * @return {sap.viz.ui5.types.Line_marker} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line_marker#setNumber
 * @function
 */

// Start of sap/viz/ui5/types/Line_marker.js

}; // end of sap/viz/ui5/types/Line_marker.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Line_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Line_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Line_tooltip");




/**
 * Constructor for a new ui5/types/Line_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the tooltip
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Line_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Line_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Line_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Line_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.Line_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Line_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Line_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/Line_tooltip.js

}; // end of sap/viz/ui5/types/Line_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Pie') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Pie.
jQuery.sap.declare("sap.viz.ui5.types.Pie");




/**
 * Constructor for a new ui5/types/Pie.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getIsDonut isDonut} : boolean (default: false)</li>
 * <li>{@link #getIsGeoPie isGeoPie} : boolean (default: false)</li>
 * <li>{@link #getValign valign} : sap.viz.ui5.types.Pie_valign (default: sap.viz.ui5.types.Pie_valign.top)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Pie_drawingEffect (default: sap.viz.ui5.types.Pie_drawingEffect.normal)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li>
 * <li>{@link #getPlotScale plotScale} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Pie_animation</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Pie_tooltip</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Pie
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Pie
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Pie", { metadata : {

	library : "sap.viz",
	properties : {
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"isDonut" : {type : "boolean", group : "", defaultValue : false},
		"isGeoPie" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"valign" : {type : "sap.viz.ui5.types.Pie_valign", group : "", defaultValue : sap.viz.ui5.types.Pie_valign.top, deprecated: true},
		"drawingEffect" : {type : "sap.viz.ui5.types.Pie_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Pie_drawingEffect.normal},
		"formatRules" : {type : "object[]", group : "", defaultValue : null},
		"plotScale" : {type : "float", group : "", defaultValue : 1, deprecated: true}
	},
	aggregations : {
		"animation" : {type : "sap.viz.ui5.types.Pie_animation", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Pie_tooltip", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Pie with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Pie.extend
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the sectors of the pie chart
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Pie#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie#setColorPalette
 * @function
 */


/**
 * Getter for property <code>isDonut</code>.
 * Set the chart to display as a donut or a pie. If this value is set to 'true', the chart displays as a donut. If this value is set to 'false', the chart displays as a pie.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isDonut</code>
 * @public
 * @name sap.viz.ui5.types.Pie#getIsDonut
 * @function
 */

/**
 * Setter for property <code>isDonut</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsDonut  new value for property <code>isDonut</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie#setIsDonut
 * @function
 */


/**
 * Getter for property <code>isGeoPie</code>.
 * Set whether the chart displays as a geo pie chart. If this value is set to 'true', the chart displays as a geo pie chart. If this value is set to 'false', the chart does not display as a geo pie chart.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isGeoPie</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#getIsGeoPie
 * @function
 */

/**
 * Setter for property <code>isGeoPie</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsGeoPie  new value for property <code>isGeoPie</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#setIsGeoPie
 * @function
 */


/**
 * Getter for property <code>valign</code>.
 * Set the vertical aligment of the chart
 *
 * Default value is <code>top</code>
 *
 * @return {sap.viz.ui5.types.Pie_valign} the value of property <code>valign</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#getValign
 * @function
 */

/**
 * Setter for property <code>valign</code>.
 *
 * Default value is <code>top</code> 
 *
 * @param {sap.viz.ui5.types.Pie_valign} oValign  new value for property <code>valign</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#setValign
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect of the pie
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Pie_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Pie#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Pie_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Rules to format data points, sample: [{condition: [{Key1:"Value1", Key2:"Value2"}], color:"#00ff00"}, {condition: [{Key3:"Value3"}], color:"#00ffff"}]. Each rule has two properties: "condition" and "color". The relation among the condition object in "condition" array is "OR", which means the data point that met any condition in the array will apply the "color". If multiple rules could apply on the same data point, the last rule would take effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Pie#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie#setFormatRules
 * @function
 */


/**
 * Getter for property <code>plotScale</code>.
 * Set the plot scale of the pie
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>plotScale</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#getPlotScale
 * @function
 */

/**
 * Setter for property <code>plotScale</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fPlotScale  new value for property <code>plotScale</code>
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#setPlotScale
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.Pie_animation}
 * @public
 * @name sap.viz.ui5.types.Pie#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Pie_animation} oAnimation
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties
 * 
 * @return {sap.viz.ui5.types.Pie_tooltip}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Pie_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie#destroyToolTip
 * @function
 */

// Start of sap/viz/ui5/types/Pie.js
sap.viz.ui5.types.Pie.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Pie.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}

}; // end of sap/viz/ui5/types/Pie.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Pie_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Pie_animation.
jQuery.sap.declare("sap.viz.ui5.types.Pie_animation");




/**
 * Constructor for a new ui5/types/Pie_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Pie_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Pie_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Pie_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Pie_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Pie_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Pie_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Pie_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Pie_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Pie_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Pie_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Pie_animation.js

}; // end of sap/viz/ui5/types/Pie_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Pie_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Pie_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Pie_tooltip");




/**
 * Constructor for a new ui5/types/Pie_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getValueFormat valueFormat} : string (default: 'n')</li>
 * <li>{@link #getPercentageFormat percentageFormat} : string (default: '.0%')</li>
 * <li>{@link #getFormatString formatString} : string[] (default: ['null'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for tooltip related properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Pie_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"valueFormat" : {type : "string", group : "", defaultValue : 'n', deprecated: true},
		"percentageFormat" : {type : "string", group : "", defaultValue : '.0%', deprecated: true},
		"formatString" : {type : "string[]", group : "", defaultValue : ['null']}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Pie_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Pie_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set whether tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Pie_tooltip#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie_tooltip#setVisible
 * @function
 */


/**
 * Getter for property <code>valueFormat</code>.
 * Set the number format of the measure value in tooltip
 *
 * Default value is <code>n</code>
 *
 * @return {string} the value of property <code>valueFormat</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie_tooltip#getValueFormat
 * @function
 */

/**
 * Setter for property <code>valueFormat</code>.
 *
 * Default value is <code>n</code> 
 *
 * @param {string} sValueFormat  new value for property <code>valueFormat</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie_tooltip#setValueFormat
 * @function
 */


/**
 * Getter for property <code>percentageFormat</code>.
 * Set the number format of the percentage label in tooltip
 *
 * Default value is <code>.0%</code>
 *
 * @return {string} the value of property <code>percentageFormat</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie_tooltip#getPercentageFormat
 * @function
 */

/**
 * Setter for property <code>percentageFormat</code>.
 *
 * Default value is <code>.0%</code> 
 *
 * @param {string} sPercentageFormat  new value for property <code>percentageFormat</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Pie_tooltip#setPercentageFormat
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * Set format string of tooltip. The first string is applied to value and the second is applied to percentage.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
 *
 * Default value is <code>null</code>
 *
 * @return {string[]} the value of property <code>formatString</code>
 * @public
 * @name sap.viz.ui5.types.Pie_tooltip#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {string[]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Pie_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Pie_tooltip#setFormatString
 * @function
 */

// Start of sap/viz/ui5/types/Pie_tooltip.js

}; // end of sap/viz/ui5/types/Pie_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.RootContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.RootContainer.
jQuery.sap.declare("sap.viz.ui5.types.RootContainer");




/**
 * Constructor for a new ui5/types/RootContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLayout layout} : sap.viz.ui5.types.RootContainer_layout</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/RootContainer
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.RootContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.RootContainer", { metadata : {

	library : "sap.viz",
	aggregations : {
		"layout" : {type : "sap.viz.ui5.types.RootContainer_layout", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.RootContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.RootContainer.extend
 * @function
 */


/**
 * Getter for aggregation <code>layout</code>.<br/>
 * Settings for the layout of the root container
 * 
 * @return {sap.viz.ui5.types.RootContainer_layout}
 * @public
 * @name sap.viz.ui5.types.RootContainer#getLayout
 * @function
 */


/**
 * Setter for the aggregated <code>layout</code>.
 * @param {sap.viz.ui5.types.RootContainer_layout} oLayout
 * @return {sap.viz.ui5.types.RootContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.RootContainer#setLayout
 * @function
 */
	

/**
 * Destroys the layout in the aggregation 
 * named <code>layout</code>.
 * @return {sap.viz.ui5.types.RootContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.RootContainer#destroyLayout
 * @function
 */

// Start of sap/viz/ui5/types/RootContainer.js
sap.viz.ui5.types.RootContainer.prototype.getLayout = function() {
  return this._getOrCreate("layout");
}

}; // end of sap/viz/ui5/types/RootContainer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.RootContainer_layout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.RootContainer_layout.
jQuery.sap.declare("sap.viz.ui5.types.RootContainer_layout");




/**
 * Constructor for a new ui5/types/RootContainer_layout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAdjustPolicy adjustPolicy} : string</li>
 * <li>{@link #getPadding padding} : int (default: 24)</li>
 * <li>{@link #getPaddingTop paddingTop} : int</li>
 * <li>{@link #getPaddingLeft paddingLeft} : int</li>
 * <li>{@link #getPaddingRight paddingRight} : int</li>
 * <li>{@link #getPaddingBottom paddingBottom} : int</li>
 * <li>{@link #getVgap vgap} : int (default: 8)</li>
 * <li>{@link #getHgap hgap} : int (default: 8)</li>
 * <li>{@link #getHideAxisTitleFirst hideAxisTitleFirst} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the layout of the root container
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.RootContainer_layout
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.RootContainer_layout", { metadata : {

	library : "sap.viz",
	properties : {
		"adjustPolicy" : {type : "string", group : "", defaultValue : null, deprecated: true},
		"padding" : {type : "int", group : "", defaultValue : 24},
		"paddingTop" : {type : "int", group : "", defaultValue : null},
		"paddingLeft" : {type : "int", group : "", defaultValue : null},
		"paddingRight" : {type : "int", group : "", defaultValue : null},
		"paddingBottom" : {type : "int", group : "", defaultValue : null},
		"vgap" : {type : "int", group : "", defaultValue : 8, deprecated: true},
		"hgap" : {type : "int", group : "", defaultValue : 8, deprecated: true},
		"hideAxisTitleFirst" : {type : "boolean", group : "", defaultValue : true, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.RootContainer_layout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.RootContainer_layout.extend
 * @function
 */


/**
 * Getter for property <code>adjustPolicy</code>.
 * Indicates the layout adjust policy
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>adjustPolicy</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#getAdjustPolicy
 * @function
 */

/**
 * Setter for property <code>adjustPolicy</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAdjustPolicy  new value for property <code>adjustPolicy</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#setAdjustPolicy
 * @function
 */


/**
 * Getter for property <code>padding</code>.
 * Set the universal padding value. This single value is applied to all sides of the chart. Individual settings for each edge are also supported.
 *
 * Default value is <code>24</code>
 *
 * @return {int} the value of property <code>padding</code>
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#getPadding
 * @function
 */

/**
 * Setter for property <code>padding</code>.
 *
 * Default value is <code>24</code> 
 *
 * @param {int} iPadding  new value for property <code>padding</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#setPadding
 * @function
 */


/**
 * Getter for property <code>paddingTop</code>.
 * Set the padding value for the top side
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>paddingTop</code>
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#getPaddingTop
 * @function
 */

/**
 * Setter for property <code>paddingTop</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iPaddingTop  new value for property <code>paddingTop</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#setPaddingTop
 * @function
 */


/**
 * Getter for property <code>paddingLeft</code>.
 * Set the padding value for the left side
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>paddingLeft</code>
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#getPaddingLeft
 * @function
 */

/**
 * Setter for property <code>paddingLeft</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iPaddingLeft  new value for property <code>paddingLeft</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#setPaddingLeft
 * @function
 */


/**
 * Getter for property <code>paddingRight</code>.
 * Set the padding value for the right side
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>paddingRight</code>
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#getPaddingRight
 * @function
 */

/**
 * Setter for property <code>paddingRight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iPaddingRight  new value for property <code>paddingRight</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#setPaddingRight
 * @function
 */


/**
 * Getter for property <code>paddingBottom</code>.
 * Set the padding value for the bottom side
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>paddingBottom</code>
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#getPaddingBottom
 * @function
 */

/**
 * Setter for property <code>paddingBottom</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iPaddingBottom  new value for property <code>paddingBottom</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.RootContainer_layout#setPaddingBottom
 * @function
 */


/**
 * Getter for property <code>vgap</code>.
 * Vertical gap value between UI components
 *
 * Default value is <code>8</code>
 *
 * @return {int} the value of property <code>vgap</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#getVgap
 * @function
 */

/**
 * Setter for property <code>vgap</code>.
 *
 * Default value is <code>8</code> 
 *
 * @param {int} iVgap  new value for property <code>vgap</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#setVgap
 * @function
 */


/**
 * Getter for property <code>hgap</code>.
 * Horizontal gap value between UI components
 *
 * Default value is <code>8</code>
 *
 * @return {int} the value of property <code>hgap</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#getHgap
 * @function
 */

/**
 * Setter for property <code>hgap</code>.
 *
 * Default value is <code>8</code> 
 *
 * @param {int} iHgap  new value for property <code>hgap</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#setHgap
 * @function
 */


/**
 * Getter for property <code>hideAxisTitleFirst</code>.
 * Hide axis title firstly if the space is limited.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>hideAxisTitleFirst</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#getHideAxisTitleFirst
 * @function
 */

/**
 * Setter for property <code>hideAxisTitleFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHideAxisTitleFirst  new value for property <code>hideAxisTitleFirst</code>
 * @return {sap.viz.ui5.types.RootContainer_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.RootContainer_layout#setHideAxisTitleFirst
 * @function
 */

// Start of sap/viz/ui5/types/RootContainer_layout.js

}; // end of sap/viz/ui5/types/RootContainer_layout.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Scatter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Scatter.
jQuery.sap.declare("sap.viz.ui5.types.Scatter");




/**
 * Constructor for a new ui5/types/Scatter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getShapePalette shapePalette} : string[] (default: ['circle','square','diamond','triangleUp','triangleDown','triangleLeft','triangleRight','cross','intersection'])</li>
 * <li>{@link #getMaxPriValue maxPriValue} : float (default: 0)</li>
 * <li>{@link #getMinPriValue minPriValue} : float (default: 0)</li>
 * <li>{@link #getMaxSecValue maxSecValue} : float (default: 0)</li>
 * <li>{@link #getMinSecValue minSecValue} : float (default: 0)</li>
 * <li>{@link #getTimeBased timeBased} : boolean (default: false)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Scatter_drawingEffect (default: sap.viz.ui5.types.Scatter_drawingEffect.normal)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li>
 * <li>{@link #getShowNegativeValues showNegativeValues} : boolean (default: true)</li>
 * <li>{@link #getMarkerSize markerSize} : int (default: 10)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Scatter_animation</li>
 * <li>{@link #getAxisTooltip axisTooltip} : sap.viz.ui5.types.Scatter_axisTooltip</li>
 * <li>{@link #getHoverline hoverline} : sap.viz.ui5.types.Scatter_hoverline</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Scatter
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Scatter
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Scatter", { metadata : {

	library : "sap.viz",
	properties : {
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"shapePalette" : {type : "string[]", group : "", defaultValue : ['circle','square','diamond','triangleUp','triangleDown','triangleLeft','triangleRight','cross','intersection']},
		"maxPriValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"minPriValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"maxSecValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"minSecValue" : {type : "float", group : "", defaultValue : 0, deprecated: true},
		"timeBased" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"drawingEffect" : {type : "sap.viz.ui5.types.Scatter_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Scatter_drawingEffect.normal},
		"formatRules" : {type : "object[]", group : "", defaultValue : null},
		"showNegativeValues" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"markerSize" : {type : "int", group : "", defaultValue : 10}
	},
	aggregations : {
		"animation" : {type : "sap.viz.ui5.types.Scatter_animation", multiple : false}, 
		"axisTooltip" : {type : "sap.viz.ui5.types.Scatter_axisTooltip", multiple : false, deprecated: true}, 
		"hoverline" : {type : "sap.viz.ui5.types.Scatter_hoverline", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Scatter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Scatter.extend
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color of the bubbles
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Scatter#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter#setColorPalette
 * @function
 */


/**
 * Getter for property <code>shapePalette</code>.
 * Set the shape of the bubbles
 *
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code>
 *
 * @return {string[]} the value of property <code>shapePalette</code>
 * @public
 * @name sap.viz.ui5.types.Scatter#getShapePalette
 * @function
 */

/**
 * Setter for property <code>shapePalette</code>.
 *
 * Default value is <code>circle,square,diamond,triangleUp,triangleDown,triangleLeft,triangleRight,cross,intersection</code> 
 *
 * @param {string[]} aShapePalette  new value for property <code>shapePalette</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter#setShapePalette
 * @function
 */


/**
 * Getter for property <code>maxPriValue</code>.
 * Set the max value of primary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>maxPriValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getMaxPriValue
 * @function
 */

/**
 * Setter for property <code>maxPriValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMaxPriValue  new value for property <code>maxPriValue</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setMaxPriValue
 * @function
 */


/**
 * Getter for property <code>minPriValue</code>.
 * Set the minimum value of primary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>minPriValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getMinPriValue
 * @function
 */

/**
 * Setter for property <code>minPriValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMinPriValue  new value for property <code>minPriValue</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setMinPriValue
 * @function
 */


/**
 * Getter for property <code>maxSecValue</code>.
 * Set the max value of secondary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>maxSecValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getMaxSecValue
 * @function
 */

/**
 * Setter for property <code>maxSecValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMaxSecValue  new value for property <code>maxSecValue</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setMaxSecValue
 * @function
 */


/**
 * Getter for property <code>minSecValue</code>.
 * Set the minimum value of secondary values
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>minSecValue</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getMinSecValue
 * @function
 */

/**
 * Setter for property <code>minSecValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMinSecValue  new value for property <code>minSecValue</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setMinSecValue
 * @function
 */


/**
 * Getter for property <code>timeBased</code>.
 * Set whether it is time based scatter/bubble
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>timeBased</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getTimeBased
 * @function
 */

/**
 * Setter for property <code>timeBased</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTimeBased  new value for property <code>timeBased</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setTimeBased
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the bubbles
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Scatter_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.Scatter#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Scatter_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Scatter#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter#setFormatRules
 * @function
 */


/**
 * Getter for property <code>showNegativeValues</code>.
 * Show/hide the data of negetive value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showNegativeValues</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getShowNegativeValues
 * @function
 */

/**
 * Setter for property <code>showNegativeValues</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowNegativeValues  new value for property <code>showNegativeValues</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setShowNegativeValues
 * @function
 */


/**
 * Getter for property <code>markerSize</code>.
 * Set the marker size for data points. The available range is from '4' to '32'.
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>markerSize</code>
 * @public
 * @name sap.viz.ui5.types.Scatter#getMarkerSize
 * @function
 */

/**
 * Setter for property <code>markerSize</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iMarkerSize  new value for property <code>markerSize</code>
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter#setMarkerSize
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in bubble and scatter charts
 * 
 * @return {sap.viz.ui5.types.Scatter_animation}
 * @public
 * @name sap.viz.ui5.types.Scatter#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Scatter_animation} oAnimation
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>axisTooltip</code>.<br/>
 * Set tooltip related properties.
 * 
 * @return {sap.viz.ui5.types.Scatter_axisTooltip}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getAxisTooltip
 * @function
 */


/**
 * Setter for the aggregated <code>axisTooltip</code>.
 * @param {sap.viz.ui5.types.Scatter_axisTooltip} oAxisTooltip
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setAxisTooltip
 * @function
 */
	

/**
 * Destroys the axisTooltip in the aggregation 
 * named <code>axisTooltip</code>.
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#destroyAxisTooltip
 * @function
 */


/**
 * Getter for aggregation <code>hoverline</code>.<br/>
 * Settings for hoverline properties.
 * 
 * @return {sap.viz.ui5.types.Scatter_hoverline}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#getHoverline
 * @function
 */


/**
 * Setter for the aggregated <code>hoverline</code>.
 * @param {sap.viz.ui5.types.Scatter_hoverline} oHoverline
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#setHoverline
 * @function
 */
	

/**
 * Destroys the hoverline in the aggregation 
 * named <code>hoverline</code>.
 * @return {sap.viz.ui5.types.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter#destroyHoverline
 * @function
 */

// Start of sap/viz/ui5/types/Scatter.js
sap.viz.ui5.types.Scatter.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Scatter.prototype.getAxisTooltip = function() {
  return this._getOrCreate("axisTooltip");
}
sap.viz.ui5.types.Scatter.prototype.getHoverline = function() {
  return this._getOrCreate("hoverline");
}

}; // end of sap/viz/ui5/types/Scatter.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Scatter_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Scatter_animation.
jQuery.sap.declare("sap.viz.ui5.types.Scatter_animation");




/**
 * Constructor for a new ui5/types/Scatter_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in bubble and scatter charts
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Scatter_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Scatter_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Scatter_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Scatter_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Scatter_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Scatter_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Scatter_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Scatter_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Scatter_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Scatter_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Scatter_animation.js

}; // end of sap/viz/ui5/types/Scatter_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Scatter_axisTooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Scatter_axisTooltip.
jQuery.sap.declare("sap.viz.ui5.types.Scatter_axisTooltip");




/**
 * Constructor for a new ui5/types/Scatter_axisTooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getFormatString formatString} : string[] (default: ['null'])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Set tooltip related properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter_axisTooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Scatter_axisTooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"formatString" : {type : "string[]", group : "", defaultValue : ['null']}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Scatter_axisTooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Scatter_axisTooltip.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * enabled/disabled tooltip.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Scatter_axisTooltip#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Scatter_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter_axisTooltip#setVisible
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.
 *
 * Default value is <code>null</code>
 *
 * @return {string[]} the value of property <code>formatString</code>
 * @public
 * @name sap.viz.ui5.types.Scatter_axisTooltip#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {string[]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Scatter_axisTooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter_axisTooltip#setFormatString
 * @function
 */

// Start of sap/viz/ui5/types/Scatter_axisTooltip.js

}; // end of sap/viz/ui5/types/Scatter_axisTooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Scatter_hoverline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Scatter_hoverline.
jQuery.sap.declare("sap.viz.ui5.types.Scatter_hoverline");




/**
 * Constructor for a new ui5/types/Scatter_hoverline.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for hoverline properties.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Scatter_hoverline
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Scatter_hoverline", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Scatter_hoverline with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Scatter_hoverline.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set to enabled/disabled hoverline or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Scatter_hoverline#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Scatter_hoverline} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Scatter_hoverline#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Scatter_hoverline.js

}; // end of sap/viz/ui5/types/Scatter_hoverline.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.StackedVerticalBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.StackedVerticalBar.
jQuery.sap.declare("sap.viz.ui5.types.StackedVerticalBar");




/**
 * Constructor for a new ui5/types/StackedVerticalBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.StackedVerticalBar_orientation (default: sap.viz.ui5.types.StackedVerticalBar_orientation.vertical)</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.StackedVerticalBar_drawingEffect (default: sap.viz.ui5.types.StackedVerticalBar_drawingEffect.normal)</li>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li>
 * <li>{@link #getMode mode} : sap.viz.ui5.types.StackedVerticalBar_mode (default: sap.viz.ui5.types.StackedVerticalBar_mode.comparison)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.StackedVerticalBar_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.StackedVerticalBar_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/StackedVerticalBar
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.StackedVerticalBar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.StackedVerticalBar", { metadata : {

	library : "sap.viz",
	properties : {
		"orientation" : {type : "sap.viz.ui5.types.StackedVerticalBar_orientation", group : "", defaultValue : sap.viz.ui5.types.StackedVerticalBar_orientation.vertical, deprecated: true},
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"primaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1']},
		"secondaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B']},
		"drawingEffect" : {type : "sap.viz.ui5.types.StackedVerticalBar_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.StackedVerticalBar_drawingEffect.normal},
		"isRoundCorner" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"formatRules" : {type : "object[]", group : "", defaultValue : null},
		"mode" : {type : "sap.viz.ui5.types.StackedVerticalBar_mode", group : "", defaultValue : sap.viz.ui5.types.StackedVerticalBar_mode.comparison}
	},
	aggregations : {
		"toolTip" : {type : "sap.viz.ui5.types.StackedVerticalBar_tooltip", multiple : false, deprecated: true}, 
		"animation" : {type : "sap.viz.ui5.types.StackedVerticalBar_animation", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.StackedVerticalBar.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set the orientation of the plot area.
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.StackedVerticalBar_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.StackedVerticalBar_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar#setOrientation
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#setColorPalette
 * @function
 */


/**
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set the color palette for axis 1 in dual charts.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 *
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#getPrimaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryValuesColorPalette</code>.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 *
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#setPrimaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set the color palette for axis 2 in dual chart.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 *
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#getSecondaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryValuesColorPalette</code>.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 *
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#setSecondaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.StackedVerticalBar_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.StackedVerticalBar_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>isRoundCorner</code>.
 * Set whether bars have rounded corners
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar#getIsRoundCorner
 * @function
 */

/**
 * Setter for property <code>isRoundCorner</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar#setIsRoundCorner
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#setFormatRules
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * Set the display mode for stacked vertical bar charts
 *
 * Default value is <code>comparison</code>
 *
 * @return {sap.viz.ui5.types.StackedVerticalBar_mode} the value of property <code>mode</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>comparison</code> 
 *
 * @param {sap.viz.ui5.types.StackedVerticalBar_mode} oMode  new value for property <code>mode</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#setMode
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties
 * 
 * @return {sap.viz.ui5.types.StackedVerticalBar_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.StackedVerticalBar_tooltip} oToolTip
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation}
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.StackedVerticalBar_animation} oAnimation
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.StackedVerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar#destroyAnimation
 * @function
 */

// Start of sap/viz/ui5/types/StackedVerticalBar.js
sap.viz.ui5.types.StackedVerticalBar.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.types.StackedVerticalBar.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}

}; // end of sap/viz/ui5/types/StackedVerticalBar.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.StackedVerticalBar_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.StackedVerticalBar_animation.
jQuery.sap.declare("sap.viz.ui5.types.StackedVerticalBar_animation");




/**
 * Constructor for a new ui5/types/StackedVerticalBar_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.StackedVerticalBar_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.StackedVerticalBar_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.StackedVerticalBar_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/StackedVerticalBar_animation.js

}; // end of sap/viz/ui5/types/StackedVerticalBar_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.StackedVerticalBar_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.StackedVerticalBar_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.StackedVerticalBar_tooltip");




/**
 * Constructor for a new ui5/types/StackedVerticalBar_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for tooltip related properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.StackedVerticalBar_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.StackedVerticalBar_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.StackedVerticalBar_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.StackedVerticalBar_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.StackedVerticalBar_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.StackedVerticalBar_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/StackedVerticalBar_tooltip.js

}; // end of sap/viz/ui5/types/StackedVerticalBar_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Title') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Title.
jQuery.sap.declare("sap.viz.ui5.types.Title");




/**
 * Constructor for a new ui5/types/Title.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getText text} : string (default: 'null')</li>
 * <li>{@link #getAlignment alignment} : sap.viz.ui5.types.Title_alignment (default: sap.viz.ui5.types.Title_alignment.center)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLayout layout} : sap.viz.ui5.types.Title_layout</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Title
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Title
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Title", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : false},
		"text" : {type : "string", group : "", defaultValue : 'null'},
		"alignment" : {type : "sap.viz.ui5.types.Title_alignment", group : "", defaultValue : sap.viz.ui5.types.Title_alignment.center}
	},
	aggregations : {
		"layout" : {type : "sap.viz.ui5.types.Title_layout", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Title.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the main title
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Title#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Title#setVisible
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Set the text of the main title
 *
 * Default value is <code>null</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.viz.ui5.types.Title#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Title#setText
 * @function
 */


/**
 * Getter for property <code>alignment</code>.
 * Set the alignment of the main title
 *
 * Default value is <code>center</code>
 *
 * @return {sap.viz.ui5.types.Title_alignment} the value of property <code>alignment</code>
 * @public
 * @name sap.viz.ui5.types.Title#getAlignment
 * @function
 */

/**
 * Setter for property <code>alignment</code>.
 *
 * Default value is <code>center</code> 
 *
 * @param {sap.viz.ui5.types.Title_alignment} oAlignment  new value for property <code>alignment</code>
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Title#setAlignment
 * @function
 */


/**
 * Getter for aggregation <code>layout</code>.<br/>
 * Settings for layout of title
 * 
 * @return {sap.viz.ui5.types.Title_layout}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Title#getLayout
 * @function
 */


/**
 * Setter for the aggregated <code>layout</code>.
 * @param {sap.viz.ui5.types.Title_layout} oLayout
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Title#setLayout
 * @function
 */
	

/**
 * Destroys the layout in the aggregation 
 * named <code>layout</code>.
 * @return {sap.viz.ui5.types.Title} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Title#destroyLayout
 * @function
 */

// Start of sap/viz/ui5/types/Title.js
sap.viz.ui5.types.Title.prototype.getLayout = function() {
  return this._getOrCreate("layout");
}

}; // end of sap/viz/ui5/types/Title.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Title_layout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Title_layout.
jQuery.sap.declare("sap.viz.ui5.types.Title_layout");




/**
 * Constructor for a new ui5/types/Title_layout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPosition position} : string (default: 'right')</li>
 * <li>{@link #getPriority priority} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for layout of title
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Title_layout
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Title_layout", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"position" : {type : "string", group : "", defaultValue : 'right'},
		"priority" : {type : "int", group : "", defaultValue : 0, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Title_layout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Title_layout.extend
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * Set the position of the title
 *
 * Default value is <code>right</code>
 *
 * @return {string} the value of property <code>position</code>
 * @public
 * @name sap.viz.ui5.types.Title_layout#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is <code>right</code> 
 *
 * @param {string} sPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.Title_layout} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Title_layout#setPosition
 * @function
 */


/**
 * Getter for property <code>priority</code>.
 * Set the priority of the position for the title
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>priority</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Title_layout#getPriority
 * @function
 */

/**
 * Setter for property <code>priority</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iPriority  new value for property <code>priority</code>
 * @return {sap.viz.ui5.types.Title_layout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Title_layout#setPriority
 * @function
 */

// Start of sap/viz/ui5/types/Title_layout.js

}; // end of sap/viz/ui5/types/Title_layout.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip");




/**
 * Constructor for a new ui5/types/Tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPreRender preRender} : any (default: null)</li>
 * <li>{@link #getPostRender postRender} : any (default: null)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.Tooltip_drawingEffect (default: sap.viz.ui5.types.Tooltip_drawingEffect.normal)</li>
 * <li>{@link #getFormatString formatString} : any[][] (default: [[null]])</li>
 * <li>{@link #getLayinChart layinChart} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Tooltip_background</li>
 * <li>{@link #getFooterLabel footerLabel} : sap.viz.ui5.types.Tooltip_footerLabel</li>
 * <li>{@link #getSeparationLine separationLine} : sap.viz.ui5.types.Tooltip_separationLine</li>
 * <li>{@link #getBodyDimensionLabel bodyDimensionLabel} : sap.viz.ui5.types.Tooltip_bodyDimensionLabel</li>
 * <li>{@link #getBodyDimensionValue bodyDimensionValue} : sap.viz.ui5.types.Tooltip_bodyDimensionValue</li>
 * <li>{@link #getBodyMeasureLabel bodyMeasureLabel} : sap.viz.ui5.types.Tooltip_bodyMeasureLabel</li>
 * <li>{@link #getBodyMeasureValue bodyMeasureValue} : sap.viz.ui5.types.Tooltip_bodyMeasureValue</li>
 * <li>{@link #getCloseButton closeButton} : sap.viz.ui5.types.Tooltip_closeButton</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Tooltip
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip", { metadata : {

	library : "sap.viz",
	properties : {
		"preRender" : {type : "any", group : "", defaultValue : null},
		"postRender" : {type : "any", group : "", defaultValue : null},
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"drawingEffect" : {type : "sap.viz.ui5.types.Tooltip_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.Tooltip_drawingEffect.normal, deprecated: true},
		"formatString" : {type : "any[][]", group : "", defaultValue : [[null]]},
		"layinChart" : {type : "boolean", group : "", defaultValue : true}
	},
	aggregations : {
		"background" : {type : "sap.viz.ui5.types.Tooltip_background", multiple : false}, 
		"footerLabel" : {type : "sap.viz.ui5.types.Tooltip_footerLabel", multiple : false, deprecated: true}, 
		"separationLine" : {type : "sap.viz.ui5.types.Tooltip_separationLine", multiple : false, deprecated: true}, 
		"bodyDimensionLabel" : {type : "sap.viz.ui5.types.Tooltip_bodyDimensionLabel", multiple : false, deprecated: true}, 
		"bodyDimensionValue" : {type : "sap.viz.ui5.types.Tooltip_bodyDimensionValue", multiple : false, deprecated: true}, 
		"bodyMeasureLabel" : {type : "sap.viz.ui5.types.Tooltip_bodyMeasureLabel", multiple : false, deprecated: true}, 
		"bodyMeasureValue" : {type : "sap.viz.ui5.types.Tooltip_bodyMeasureValue", multiple : false, deprecated: true}, 
		"closeButton" : {type : "sap.viz.ui5.types.Tooltip_closeButton", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip.extend
 * @function
 */


/**
 * Getter for property <code>preRender</code>.
 * A callback function can be specified as a parameter and passed to chart options when the user calls the createViz function. This callback function is called before the tooltip is rendered. The input parameter is a dom element, which is at the bottom of the tooltip. Any dom element such as a button can be appended to this parent node. It can only be called when the tooltip is in actionMode.
 *
 * Default value is <code>null</code>
 *
 * @return {any} the value of property <code>preRender</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip#getPreRender
 * @function
 */

/**
 * Setter for property <code>preRender</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {any} oPreRender  new value for property <code>preRender</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip#setPreRender
 * @function
 */


/**
 * Getter for property <code>postRender</code>.
 * A callback function can be specified as a parameter and passed to chart options when the user calls the createViz function. This callback function is called after the tooltip is rendered. The user can select and change dom elements' properties under the tooltip element.
 *
 * Default value is <code>null</code>
 *
 * @return {any} the value of property <code>postRender</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip#getPostRender
 * @function
 */

/**
 * Setter for property <code>postRender</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {any} oPostRender  new value for property <code>postRender</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip#setPostRender
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the tooltip
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip#setVisible
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the tooltip
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.Tooltip_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.Tooltip_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * Set the format strings for text in the tooltip. For dual axis charts, the first array is applied to the primary axis and the second array is applied to the second axis. If you enter fewer format strings into an array than there are measures in the respective axis, then the last format string is applied to all remaining measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.The following is an example of an array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].
 *
 * Default value is <code>null</code>
 *
 * @return {any[][]} the value of property <code>formatString</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {any[][]} aFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip#setFormatString
 * @function
 */


/**
 * Getter for property <code>layinChart</code>.
 * Set whether the tooltip appears in the chart area
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>layinChart</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip#getLayinChart
 * @function
 */

/**
 * Setter for property <code>layinChart</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLayinChart  new value for property <code>layinChart</code>
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip#setLayinChart
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Define the background style of the tooltip.
 * 
 * @return {sap.viz.ui5.types.Tooltip_background}
 * @public
 * @name sap.viz.ui5.types.Tooltip#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Tooltip_background} oBackground
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>footerLabel</code>.<br/>
 * Define the style of the label of the tooltip footer.
 * 
 * @return {sap.viz.ui5.types.Tooltip_footerLabel}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getFooterLabel
 * @function
 */


/**
 * Setter for the aggregated <code>footerLabel</code>.
 * @param {sap.viz.ui5.types.Tooltip_footerLabel} oFooterLabel
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setFooterLabel
 * @function
 */
	

/**
 * Destroys the footerLabel in the aggregation 
 * named <code>footerLabel</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#destroyFooterLabel
 * @function
 */


/**
 * Getter for aggregation <code>separationLine</code>.<br/>
 * Define the color of the value of the tooltip separation line.
 * 
 * @return {sap.viz.ui5.types.Tooltip_separationLine}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getSeparationLine
 * @function
 */


/**
 * Setter for the aggregated <code>separationLine</code>.
 * @param {sap.viz.ui5.types.Tooltip_separationLine} oSeparationLine
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setSeparationLine
 * @function
 */
	

/**
 * Destroys the separationLine in the aggregation 
 * named <code>separationLine</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#destroySeparationLine
 * @function
 */


/**
 * Getter for aggregation <code>bodyDimensionLabel</code>.<br/>
 * Define the color of the dimension name of the tooltip body.
 * 
 * @return {sap.viz.ui5.types.Tooltip_bodyDimensionLabel}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getBodyDimensionLabel
 * @function
 */


/**
 * Setter for the aggregated <code>bodyDimensionLabel</code>.
 * @param {sap.viz.ui5.types.Tooltip_bodyDimensionLabel} oBodyDimensionLabel
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setBodyDimensionLabel
 * @function
 */
	

/**
 * Destroys the bodyDimensionLabel in the aggregation 
 * named <code>bodyDimensionLabel</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#destroyBodyDimensionLabel
 * @function
 */


/**
 * Getter for aggregation <code>bodyDimensionValue</code>.<br/>
 * Define the color of the dimension value of the tooltip body.
 * 
 * @return {sap.viz.ui5.types.Tooltip_bodyDimensionValue}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getBodyDimensionValue
 * @function
 */


/**
 * Setter for the aggregated <code>bodyDimensionValue</code>.
 * @param {sap.viz.ui5.types.Tooltip_bodyDimensionValue} oBodyDimensionValue
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setBodyDimensionValue
 * @function
 */
	

/**
 * Destroys the bodyDimensionValue in the aggregation 
 * named <code>bodyDimensionValue</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#destroyBodyDimensionValue
 * @function
 */


/**
 * Getter for aggregation <code>bodyMeasureLabel</code>.<br/>
 * Define the color of the measure name of the tooltip body.
 * 
 * @return {sap.viz.ui5.types.Tooltip_bodyMeasureLabel}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getBodyMeasureLabel
 * @function
 */


/**
 * Setter for the aggregated <code>bodyMeasureLabel</code>.
 * @param {sap.viz.ui5.types.Tooltip_bodyMeasureLabel} oBodyMeasureLabel
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setBodyMeasureLabel
 * @function
 */
	

/**
 * Destroys the bodyMeasureLabel in the aggregation 
 * named <code>bodyMeasureLabel</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#destroyBodyMeasureLabel
 * @function
 */


/**
 * Getter for aggregation <code>bodyMeasureValue</code>.<br/>
 * Define the color of the measure value of the tooltip body.
 * 
 * @return {sap.viz.ui5.types.Tooltip_bodyMeasureValue}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getBodyMeasureValue
 * @function
 */


/**
 * Setter for the aggregated <code>bodyMeasureValue</code>.
 * @param {sap.viz.ui5.types.Tooltip_bodyMeasureValue} oBodyMeasureValue
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setBodyMeasureValue
 * @function
 */
	

/**
 * Destroys the bodyMeasureValue in the aggregation 
 * named <code>bodyMeasureValue</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#destroyBodyMeasureValue
 * @function
 */


/**
 * Getter for aggregation <code>closeButton</code>.<br/>
 * Define the background and border color of tooltip close button.
 * 
 * @return {sap.viz.ui5.types.Tooltip_closeButton}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#getCloseButton
 * @function
 */


/**
 * Setter for the aggregated <code>closeButton</code>.
 * @param {sap.viz.ui5.types.Tooltip_closeButton} oCloseButton
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#setCloseButton
 * @function
 */
	

/**
 * Destroys the closeButton in the aggregation 
 * named <code>closeButton</code>.
 * @return {sap.viz.ui5.types.Tooltip} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip#destroyCloseButton
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip.js
sap.viz.ui5.types.Tooltip.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.types.Tooltip.prototype.getFooterLabel = function() {
  return this._getOrCreate("footerLabel");
}
sap.viz.ui5.types.Tooltip.prototype.getSeparationLine = function() {
  return this._getOrCreate("separationLine");
}
sap.viz.ui5.types.Tooltip.prototype.getBodyDimensionLabel = function() {
  return this._getOrCreate("bodyDimensionLabel");
}
sap.viz.ui5.types.Tooltip.prototype.getBodyDimensionValue = function() {
  return this._getOrCreate("bodyDimensionValue");
}
sap.viz.ui5.types.Tooltip.prototype.getBodyMeasureLabel = function() {
  return this._getOrCreate("bodyMeasureLabel");
}
sap.viz.ui5.types.Tooltip.prototype.getBodyMeasureValue = function() {
  return this._getOrCreate("bodyMeasureValue");
}
sap.viz.ui5.types.Tooltip.prototype.getCloseButton = function() {
  return this._getOrCreate("closeButton");
}

}; // end of sap/viz/ui5/types/Tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_background') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_background.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_background");




/**
 * Constructor for a new ui5/types/Tooltip_background.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColor color} : string (default: '#ffffff')</li>
 * <li>{@link #getBorderColor borderColor} : string (default: '#cccccc')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the background style of the tooltip.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Tooltip_background
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_background", { metadata : {

	library : "sap.viz",
	properties : {
		"color" : {type : "string", group : "", defaultValue : '#ffffff'},
		"borderColor" : {type : "string", group : "", defaultValue : '#cccccc'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_background with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_background.extend
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Define the background color of the tooltip.
 *
 * Default value is <code>#ffffff</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_background#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#ffffff</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Tooltip_background} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_background#setColor
 * @function
 */


/**
 * Getter for property <code>borderColor</code>.
 * Define the background border color of the tooltip.
 *
 * Default value is <code>#cccccc</code>
 *
 * @return {string} the value of property <code>borderColor</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_background#getBorderColor
 * @function
 */

/**
 * Setter for property <code>borderColor</code>.
 *
 * Default value is <code>#cccccc</code> 
 *
 * @param {string} sBorderColor  new value for property <code>borderColor</code>
 * @return {sap.viz.ui5.types.Tooltip_background} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_background#setBorderColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_background.js

}; // end of sap/viz/ui5/types/Tooltip_background.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_bodyDimensionLabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_bodyDimensionLabel.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_bodyDimensionLabel");




/**
 * Constructor for a new ui5/types/Tooltip_bodyDimensionLabel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColor color} : string (default: '#666666')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the color of the dimension name of the tooltip body.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionLabel
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_bodyDimensionLabel", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"color" : {type : "string", group : "", defaultValue : '#666666'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyDimensionLabel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionLabel.extend
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Property color
 *
 * Default value is <code>#666666</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionLabel#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#666666</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Tooltip_bodyDimensionLabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionLabel#setColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_bodyDimensionLabel.js

}; // end of sap/viz/ui5/types/Tooltip_bodyDimensionLabel.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_bodyDimensionValue') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_bodyDimensionValue.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_bodyDimensionValue");




/**
 * Constructor for a new ui5/types/Tooltip_bodyDimensionValue.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColor color} : string (default: '#666666')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the color of the dimension value of the tooltip body.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionValue
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_bodyDimensionValue", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"color" : {type : "string", group : "", defaultValue : '#666666'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyDimensionValue with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionValue.extend
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Property color
 *
 * Default value is <code>#666666</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionValue#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#666666</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Tooltip_bodyDimensionValue} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyDimensionValue#setColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_bodyDimensionValue.js

}; // end of sap/viz/ui5/types/Tooltip_bodyDimensionValue.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_bodyMeasureLabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_bodyMeasureLabel.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_bodyMeasureLabel");




/**
 * Constructor for a new ui5/types/Tooltip_bodyMeasureLabel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColor color} : string (default: '#666666')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the color of the measure name of the tooltip body.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureLabel
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_bodyMeasureLabel", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"color" : {type : "string", group : "", defaultValue : '#666666'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyMeasureLabel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureLabel.extend
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Property color
 *
 * Default value is <code>#666666</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureLabel#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#666666</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Tooltip_bodyMeasureLabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureLabel#setColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_bodyMeasureLabel.js

}; // end of sap/viz/ui5/types/Tooltip_bodyMeasureLabel.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_bodyMeasureValue') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_bodyMeasureValue.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_bodyMeasureValue");




/**
 * Constructor for a new ui5/types/Tooltip_bodyMeasureValue.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColor color} : string (default: '#000000')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the color of the measure value of the tooltip body.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureValue
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_bodyMeasureValue", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"color" : {type : "string", group : "", defaultValue : '#000000'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_bodyMeasureValue with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureValue.extend
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Property color
 *
 * Default value is <code>#000000</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureValue#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#000000</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Tooltip_bodyMeasureValue} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_bodyMeasureValue#setColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_bodyMeasureValue.js

}; // end of sap/viz/ui5/types/Tooltip_bodyMeasureValue.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_closeButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_closeButton.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_closeButton");




/**
 * Constructor for a new ui5/types/Tooltip_closeButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundColor backgroundColor} : string (default: '#ffffff')</li>
 * <li>{@link #getBorderColor borderColor} : string (default: '#cccccc')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the background and border color of tooltip close button.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip_closeButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_closeButton", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"backgroundColor" : {type : "string", group : "", defaultValue : '#ffffff'},
		"borderColor" : {type : "string", group : "", defaultValue : '#cccccc'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_closeButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_closeButton.extend
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Property backgroundColor
 *
 * Default value is <code>#ffffff</code>
 *
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_closeButton#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is <code>#ffffff</code> 
 *
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.viz.ui5.types.Tooltip_closeButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_closeButton#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>borderColor</code>.
 * Property borderColor
 *
 * Default value is <code>#cccccc</code>
 *
 * @return {string} the value of property <code>borderColor</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_closeButton#getBorderColor
 * @function
 */

/**
 * Setter for property <code>borderColor</code>.
 *
 * Default value is <code>#cccccc</code> 
 *
 * @param {string} sBorderColor  new value for property <code>borderColor</code>
 * @return {sap.viz.ui5.types.Tooltip_closeButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_closeButton#setBorderColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_closeButton.js

}; // end of sap/viz/ui5/types/Tooltip_closeButton.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_footerLabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_footerLabel.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_footerLabel");




/**
 * Constructor for a new ui5/types/Tooltip_footerLabel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColor color} : string (default: '#000000')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the style of the label of the tooltip footer.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip_footerLabel
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_footerLabel", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"color" : {type : "string", group : "", defaultValue : '#000000'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_footerLabel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_footerLabel.extend
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Define the color of the label of the tooltip footer.
 *
 * Default value is <code>#000000</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_footerLabel#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>#000000</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.viz.ui5.types.Tooltip_footerLabel} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_footerLabel#setColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_footerLabel.js

}; // end of sap/viz/ui5/types/Tooltip_footerLabel.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Tooltip_separationLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Tooltip_separationLine.
jQuery.sap.declare("sap.viz.ui5.types.Tooltip_separationLine");




/**
 * Constructor for a new ui5/types/Tooltip_separationLine.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBorderBottomColor borderBottomColor} : string (default: '#a7a9ac')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Define the color of the value of the tooltip separation line.
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Tooltip_separationLine
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Tooltip_separationLine", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"borderBottomColor" : {type : "string", group : "", defaultValue : '#a7a9ac'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Tooltip_separationLine with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Tooltip_separationLine.extend
 * @function
 */


/**
 * Getter for property <code>borderBottomColor</code>.
 * Property borderBottomColor
 *
 * Default value is <code>#a7a9ac</code>
 *
 * @return {string} the value of property <code>borderBottomColor</code>
 * @public
 * @name sap.viz.ui5.types.Tooltip_separationLine#getBorderBottomColor
 * @function
 */

/**
 * Setter for property <code>borderBottomColor</code>.
 *
 * Default value is <code>#a7a9ac</code> 
 *
 * @param {string} sBorderBottomColor  new value for property <code>borderBottomColor</code>
 * @return {sap.viz.ui5.types.Tooltip_separationLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Tooltip_separationLine#setBorderBottomColor
 * @function
 */

// Start of sap/viz/ui5/types/Tooltip_separationLine.js

}; // end of sap/viz/ui5/types/Tooltip_separationLine.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Treemap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Treemap.
jQuery.sap.declare("sap.viz.ui5.types.Treemap");




/**
 * Constructor for a new ui5/types/Treemap.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStartColor startColor} : string (default: '#C2E3A9')</li>
 * <li>{@link #getEndColor endColor} : string (default: '#73C03C')</li>
 * <li>{@link #getColorPalette colorPalette} : string[]</li>
 * <li>{@link #getLegendValues legendValues} : int[]</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBorder border} : sap.viz.ui5.types.Treemap_border</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.Treemap_animation</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Treemap_tooltip</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/Treemap
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Treemap
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Treemap", { metadata : {

	library : "sap.viz",
	properties : {
		"startColor" : {type : "string", group : "", defaultValue : '#C2E3A9'},
		"endColor" : {type : "string", group : "", defaultValue : '#73C03C'},
		"colorPalette" : {type : "string[]", group : "", defaultValue : null},
		"legendValues" : {type : "int[]", group : "", defaultValue : null},
		"formatRules" : {type : "object[]", group : "", defaultValue : null}
	},
	aggregations : {
		"border" : {type : "sap.viz.ui5.types.Treemap_border", multiple : false}, 
		"animation" : {type : "sap.viz.ui5.types.Treemap_animation", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Treemap_tooltip", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Treemap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Treemap.extend
 * @function
 */


/**
 * Getter for property <code>startColor</code>.
 * Set the starting color of the tree map
 *
 * Default value is <code>#C2E3A9</code>
 *
 * @return {string} the value of property <code>startColor</code>
 * @public
 * @name sap.viz.ui5.types.Treemap#getStartColor
 * @function
 */

/**
 * Setter for property <code>startColor</code>.
 *
 * Default value is <code>#C2E3A9</code> 
 *
 * @param {string} sStartColor  new value for property <code>startColor</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#setStartColor
 * @function
 */


/**
 * Getter for property <code>endColor</code>.
 * Set the end color of the tree map
 *
 * Default value is <code>#73C03C</code>
 *
 * @return {string} the value of property <code>endColor</code>
 * @public
 * @name sap.viz.ui5.types.Treemap#getEndColor
 * @function
 */

/**
 * Setter for property <code>endColor</code>.
 *
 * Default value is <code>#73C03C</code> 
 *
 * @param {string} sEndColor  new value for property <code>endColor</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#setEndColor
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C"].
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.Treemap#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#setColorPalette
 * @function
 */


/**
 * Getter for property <code>legendValues</code>.
 * Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend automatically calculates the values according to the data. If the number of values in the legendValues array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int[]} the value of property <code>legendValues</code>
 * @public
 * @name sap.viz.ui5.types.Treemap#getLegendValues
 * @function
 */

/**
 * Setter for property <code>legendValues</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int[]} aLegendValues  new value for property <code>legendValues</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#setLegendValues
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.Treemap#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#setFormatRules
 * @function
 */


/**
 * Getter for aggregation <code>border</code>.<br/>
 * Settings for the border
 * 
 * @return {sap.viz.ui5.types.Treemap_border}
 * @public
 * @name sap.viz.ui5.types.Treemap#getBorder
 * @function
 */


/**
 * Setter for the aggregated <code>border</code>.
 * @param {sap.viz.ui5.types.Treemap_border} oBorder
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#setBorder
 * @function
 */
	

/**
 * Destroys the border in the aggregation 
 * named <code>border</code>.
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#destroyBorder
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.Treemap_animation}
 * @public
 * @name sap.viz.ui5.types.Treemap#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.Treemap_animation} oAnimation
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap#destroyAnimation
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip
 * 
 * @return {sap.viz.ui5.types.Treemap_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Treemap#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Treemap_tooltip} oToolTip
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Treemap#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Treemap#destroyToolTip
 * @function
 */

// Start of sap/viz/ui5/types/Treemap.js
sap.viz.ui5.types.Treemap.prototype.getBorder = function() {
  return this._getOrCreate("border");
}
sap.viz.ui5.types.Treemap.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}
sap.viz.ui5.types.Treemap.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}

}; // end of sap/viz/ui5/types/Treemap.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Treemap_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Treemap_animation.
jQuery.sap.declare("sap.viz.ui5.types.Treemap_animation");




/**
 * Constructor for a new ui5/types/Treemap_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Treemap_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Treemap_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Treemap_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Treemap_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.Treemap_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.Treemap_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.Treemap_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.Treemap_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.Treemap_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.Treemap_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/Treemap_animation.js

}; // end of sap/viz/ui5/types/Treemap_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Treemap_border') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Treemap_border.
jQuery.sap.declare("sap.viz.ui5.types.Treemap_border");




/**
 * Constructor for a new ui5/types/Treemap_border.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the border
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.Treemap_border
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Treemap_border", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Treemap_border with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Treemap_border.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the zone edge
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.Treemap_border#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.Treemap_border} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap_border#setVisible
 * @function
 */

// Start of sap/viz/ui5/types/Treemap_border.js

}; // end of sap/viz/ui5/types/Treemap_border.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.Treemap_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.Treemap_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.Treemap_tooltip");




/**
 * Constructor for a new ui5/types/Treemap_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for tooltip
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.Treemap_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.Treemap_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.Treemap_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.Treemap_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.Treemap_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.Treemap_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.Treemap_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/Treemap_tooltip.js

}; // end of sap/viz/ui5/types/Treemap_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.VerticalBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.VerticalBar.
jQuery.sap.declare("sap.viz.ui5.types.VerticalBar");




/**
 * Constructor for a new ui5/types/VerticalBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.VerticalBar_orientation (default: sap.viz.ui5.types.VerticalBar_orientation.vertical)</li>
 * <li>{@link #getColorPalette colorPalette} : string[] (default: ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4'])</li>
 * <li>{@link #getPrimaryValuesColorPalette primaryValuesColorPalette} : string[] (default: ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1'])</li>
 * <li>{@link #getSecondaryValuesColorPalette secondaryValuesColorPalette} : string[] (default: ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B'])</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.VerticalBar_drawingEffect (default: sap.viz.ui5.types.VerticalBar_drawingEffect.normal)</li>
 * <li>{@link #getIsRoundCorner isRoundCorner} : boolean (default: false)</li>
 * <li>{@link #getFormatRules formatRules} : object[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.VerticalBar_tooltip</li>
 * <li>{@link #getAnimation animation} : sap.viz.ui5.types.VerticalBar_animation</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/VerticalBar
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.VerticalBar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.VerticalBar", { metadata : {

	library : "sap.viz",
	properties : {
		"orientation" : {type : "sap.viz.ui5.types.VerticalBar_orientation", group : "", defaultValue : sap.viz.ui5.types.VerticalBar_orientation.vertical, deprecated: true},
		"colorPalette" : {type : "string[]", group : "", defaultValue : ['#748CB2','#9CC677','#EACF5E','#F9AD79','#D16A7C','#8873A2','#3A95B3','#B6D949','#FDD36C','#F47958','#A65084','#0063B1','#0DA841','#FCB71D','#F05620','#B22D6E','#3C368E','#8FB2CF','#95D4AB','#EAE98F','#F9BE92','#EC9A99','#BC98BD','#1EB7B2','#73C03C','#F48323','#EB271B','#D9B5CA','#AED1DA','#DFECB2','#FCDAB0','#F5BCB4']},
		"primaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#8FBADD','#B8D4E9','#7AAED6','#A3C7E3','#3D88C4','#66A1D0','#297CBE','#5295CA','#005BA3','#146FB7','#005395','#0063B1']},
		"secondaryValuesColorPalette" : {type : "string[]", group : "", defaultValue : ['#F6A09B','#F9C3C0','#F58E88','#F8B1AD','#F05B52','#F37D76','#EE4A40','#F16C64','#D92419','#ED382D','#C52117','#EB271B']},
		"drawingEffect" : {type : "sap.viz.ui5.types.VerticalBar_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.VerticalBar_drawingEffect.normal},
		"isRoundCorner" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"formatRules" : {type : "object[]", group : "", defaultValue : null}
	},
	aggregations : {
		"toolTip" : {type : "sap.viz.ui5.types.VerticalBar_tooltip", multiple : false, deprecated: true}, 
		"animation" : {type : "sap.viz.ui5.types.VerticalBar_animation", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.VerticalBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.VerticalBar.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set the orientation of the plot area.
 *
 * Default value is <code>vertical</code>
 *
 * @return {sap.viz.ui5.types.VerticalBar_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>vertical</code> 
 *
 * @param {sap.viz.ui5.types.VerticalBar_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar#setOrientation
 * @function
 */


/**
 * Getter for property <code>colorPalette</code>.
 * Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code>
 *
 * @return {string[]} the value of property <code>colorPalette</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar#getColorPalette
 * @function
 */

/**
 * Setter for property <code>colorPalette</code>.
 *
 * Default value is <code>#748CB2,#9CC677,#EACF5E,#F9AD79,#D16A7C,#8873A2,#3A95B3,#B6D949,#FDD36C,#F47958,#A65084,#0063B1,#0DA841,#FCB71D,#F05620,#B22D6E,#3C368E,#8FB2CF,#95D4AB,#EAE98F,#F9BE92,#EC9A99,#BC98BD,#1EB7B2,#73C03C,#F48323,#EB271B,#D9B5CA,#AED1DA,#DFECB2,#FCDAB0,#F5BCB4</code> 
 *
 * @param {string[]} aColorPalette  new value for property <code>colorPalette</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar#setColorPalette
 * @function
 */


/**
 * Getter for property <code>primaryValuesColorPalette</code>.
 * Set the color palette for axis 1 in dual charts.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code>
 *
 * @return {string[]} the value of property <code>primaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar#getPrimaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryValuesColorPalette</code>.
 *
 * Default value is <code>#8FBADD,#B8D4E9,#7AAED6,#A3C7E3,#3D88C4,#66A1D0,#297CBE,#5295CA,#005BA3,#146FB7,#005395,#0063B1</code> 
 *
 * @param {string[]} aPrimaryValuesColorPalette  new value for property <code>primaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar#setPrimaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryValuesColorPalette</code>.
 * Set the color palette for axis 2 in dual chart.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code>
 *
 * @return {string[]} the value of property <code>secondaryValuesColorPalette</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar#getSecondaryValuesColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryValuesColorPalette</code>.
 *
 * Default value is <code>#F6A09B,#F9C3C0,#F58E88,#F8B1AD,#F05B52,#F37D76,#EE4A40,#F16C64,#D92419,#ED382D,#C52117,#EB271B</code> 
 *
 * @param {string[]} aSecondaryValuesColorPalette  new value for property <code>secondaryValuesColorPalette</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar#setSecondaryValuesColorPalette
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.VerticalBar_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.VerticalBar_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar#setDrawingEffect
 * @function
 */


/**
 * Getter for property <code>isRoundCorner</code>.
 * Set whether bars have rounded corners
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isRoundCorner</code>
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar#getIsRoundCorner
 * @function
 */

/**
 * Setter for property <code>isRoundCorner</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsRoundCorner  new value for property <code>isRoundCorner</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar#setIsRoundCorner
 * @function
 */


/**
 * Getter for property <code>formatRules</code>.
 * Sample value for formatRules: [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}]. Each rule has two properties: the "condition" and the "color". Value1, Value2 and Value3 are values. <br /> The value of a dimension may be <br /> 1, Single value (string), like "China" . <br /> 2. Array (enumeration), like ["UK","USA"] . <br /> The value of a measure may be <br /> 1, Single value (number), like 20 . <br /> 2. Arry (enumeration), like [121,122] . <br /> 3. Object (range), like {min:100, max 200} . Min and max are inclusive. If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}. If users want values larger than 100, they may write {min:100}. <br /> The color is applied if one or more conditions in the condition array is met. If multiple rules could apply on the same data point, it is the last rule that takes effect.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>formatRules</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar#getFormatRules
 * @function
 */

/**
 * Setter for property <code>formatRules</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFormatRules  new value for property <code>formatRules</code>
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar#setFormatRules
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Settings for tooltip related properties
 * 
 * @return {sap.viz.ui5.types.VerticalBar_tooltip}
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.VerticalBar_tooltip} oToolTip
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>animation</code>.<br/>
 * Settings for animations in the plot area
 * 
 * @return {sap.viz.ui5.types.VerticalBar_animation}
 * @public
 * @name sap.viz.ui5.types.VerticalBar#getAnimation
 * @function
 */


/**
 * Setter for the aggregated <code>animation</code>.
 * @param {sap.viz.ui5.types.VerticalBar_animation} oAnimation
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar#setAnimation
 * @function
 */
	

/**
 * Destroys the animation in the aggregation 
 * named <code>animation</code>.
 * @return {sap.viz.ui5.types.VerticalBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar#destroyAnimation
 * @function
 */

// Start of sap/viz/ui5/types/VerticalBar.js
sap.viz.ui5.types.VerticalBar.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.types.VerticalBar.prototype.getAnimation = function() {
  return this._getOrCreate("animation");
}

}; // end of sap/viz/ui5/types/VerticalBar.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.VerticalBar_animation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.VerticalBar_animation.
jQuery.sap.declare("sap.viz.ui5.types.VerticalBar_animation");




/**
 * Constructor for a new ui5/types/VerticalBar_animation.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDataLoading dataLoading} : boolean (default: true)</li>
 * <li>{@link #getDataUpdating dataUpdating} : boolean (default: true)</li>
 * <li>{@link #getResizing resizing} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for animations in the plot area
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.VerticalBar_animation
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.VerticalBar_animation", { metadata : {

	library : "sap.viz",
	properties : {
		"dataLoading" : {type : "boolean", group : "", defaultValue : true},
		"dataUpdating" : {type : "boolean", group : "", defaultValue : true},
		"resizing" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.VerticalBar_animation with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.VerticalBar_animation.extend
 * @function
 */


/**
 * Getter for property <code>dataLoading</code>.
 * Set whether the data loading animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataLoading</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar_animation#getDataLoading
 * @function
 */

/**
 * Setter for property <code>dataLoading</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataLoading  new value for property <code>dataLoading</code>
 * @return {sap.viz.ui5.types.VerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar_animation#setDataLoading
 * @function
 */


/**
 * Getter for property <code>dataUpdating</code>.
 * Set whether the data updating animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataUpdating</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar_animation#getDataUpdating
 * @function
 */

/**
 * Setter for property <code>dataUpdating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataUpdating  new value for property <code>dataUpdating</code>
 * @return {sap.viz.ui5.types.VerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar_animation#setDataUpdating
 * @function
 */


/**
 * Getter for property <code>resizing</code>.
 * Set whether the resizing animation is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizing</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar_animation#getResizing
 * @function
 */

/**
 * Setter for property <code>resizing</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizing  new value for property <code>resizing</code>
 * @return {sap.viz.ui5.types.VerticalBar_animation} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar_animation#setResizing
 * @function
 */

// Start of sap/viz/ui5/types/VerticalBar_animation.js

}; // end of sap/viz/ui5/types/VerticalBar_animation.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.VerticalBar_tooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.VerticalBar_tooltip.
jQuery.sap.declare("sap.viz.ui5.types.VerticalBar_tooltip");




/**
 * Constructor for a new ui5/types/VerticalBar_tooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for tooltip related properties
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.VerticalBar_tooltip
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.VerticalBar_tooltip", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enabled" : {type : "boolean", group : "", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.VerticalBar_tooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.VerticalBar_tooltip.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Set whether the tooltip is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.viz.ui5.types.VerticalBar_tooltip#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.viz.ui5.types.VerticalBar_tooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.VerticalBar_tooltip#setEnabled
 * @function
 */

// Start of sap/viz/ui5/types/VerticalBar_tooltip.js

}; // end of sap/viz/ui5/types/VerticalBar_tooltip.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.XYContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.XYContainer.
jQuery.sap.declare("sap.viz.ui5.types.XYContainer");




/**
 * Constructor for a new ui5/types/XYContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getYAngle yAngle} : float (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/XYContainer
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.XYContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.XYContainer", { metadata : {

	library : "sap.viz",
	properties : {
		"yAngle" : {type : "float", group : "", defaultValue : 0, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.XYContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.XYContainer.extend
 * @function
 */


/**
 * Getter for property <code>yAngle</code>.
 * Set the angle for the pie chart. This value should be between '-180' and '180'.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>yAngle</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.XYContainer#getYAngle
 * @function
 */

/**
 * Setter for property <code>yAngle</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fYAngle  new value for property <code>yAngle</code>
 * @return {sap.viz.ui5.types.XYContainer} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.XYContainer#setYAngle
 * @function
 */

// Start of sap/viz/ui5/types/XYContainer.js

}; // end of sap/viz/ui5/types/XYContainer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.controller.Interaction') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.controller.Interaction.
jQuery.sap.declare("sap.viz.ui5.types.controller.Interaction");




/**
 * Constructor for a new ui5/types/controller/Interaction.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSupportedEventNames supportedEventNames} : string[] (default: ['mouseup','mousedown','mousemove','mouseout','mouseover','touchstart'])</li>
 * <li>{@link #getEnableMouseMove enableMouseMove} : boolean (default: true)</li>
 * <li>{@link #getEnableMouseOver enableMouseOver} : boolean (default: true)</li>
 * <li>{@link #getEnableMouseOut enableMouseOut} : boolean (default: true)</li>
 * <li>{@link #getSupportLassoEvent supportLassoEvent} : boolean (default: true)</li>
 * <li>{@link #getHoldSelection holdSelection} : boolean (default: false)</li>
 * <li>{@link #getPreserveSelectionWhenDragging preserveSelectionWhenDragging} : boolean (default: false)</li>
 * <li>{@link #getDecorations decorations} : any</li>
 * <li>{@link #getTriggers triggers} : any</li>
 * <li>{@link #getHandlers handlers} : any</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSelectability selectability} : sap.viz.ui5.types.controller.Interaction_selectability</li>
 * <li>{@link #getPan pan} : sap.viz.ui5.types.controller.Interaction_pan</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/controller/Interaction
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.controller.Interaction
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.controller.Interaction", { metadata : {

	library : "sap.viz",
	properties : {
		"supportedEventNames" : {type : "string[]", group : "", defaultValue : ['mouseup','mousedown','mousemove','mouseout','mouseover','touchstart'], deprecated: true},
		"enableMouseMove" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"enableMouseOver" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"enableMouseOut" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"supportLassoEvent" : {type : "boolean", group : "", defaultValue : true, deprecated: true},
		"holdSelection" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"preserveSelectionWhenDragging" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"decorations" : {type : "any", group : "", defaultValue : null},
		"triggers" : {type : "any", group : "", defaultValue : null, deprecated: true},
		"handlers" : {type : "any", group : "", defaultValue : null, deprecated: true}
	},
	aggregations : {
		"selectability" : {type : "sap.viz.ui5.types.controller.Interaction_selectability", multiple : false}, 
		"pan" : {type : "sap.viz.ui5.types.controller.Interaction_pan", multiple : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.controller.Interaction.extend
 * @function
 */


/**
 * Getter for property <code>supportedEventNames</code>.
 * Set supported event names
 *
 * Default value is <code>mouseup,mousedown,mousemove,mouseout,mouseover,touchstart</code>
 *
 * @return {string[]} the value of property <code>supportedEventNames</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getSupportedEventNames
 * @function
 */

/**
 * Setter for property <code>supportedEventNames</code>.
 *
 * Default value is <code>mouseup,mousedown,mousemove,mouseout,mouseover,touchstart</code> 
 *
 * @param {string[]} aSupportedEventNames  new value for property <code>supportedEventNames</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setSupportedEventNames
 * @function
 */


/**
 * Getter for property <code>enableMouseMove</code>.
 * Set whether mouse move is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableMouseMove</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getEnableMouseMove
 * @function
 */

/**
 * Setter for property <code>enableMouseMove</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableMouseMove  new value for property <code>enableMouseMove</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setEnableMouseMove
 * @function
 */


/**
 * Getter for property <code>enableMouseOver</code>.
 * Set whether mouse over is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableMouseOver</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getEnableMouseOver
 * @function
 */

/**
 * Setter for property <code>enableMouseOver</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableMouseOver  new value for property <code>enableMouseOver</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setEnableMouseOver
 * @function
 */


/**
 * Getter for property <code>enableMouseOut</code>.
 * Set whether mouse out is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableMouseOut</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getEnableMouseOut
 * @function
 */

/**
 * Setter for property <code>enableMouseOut</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableMouseOut  new value for property <code>enableMouseOut</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setEnableMouseOut
 * @function
 */


/**
 * Getter for property <code>supportLassoEvent</code>.
 * Set whether support lasso event is enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>supportLassoEvent</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getSupportLassoEvent
 * @function
 */

/**
 * Setter for property <code>supportLassoEvent</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSupportLassoEvent  new value for property <code>supportLassoEvent</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setSupportLassoEvent
 * @function
 */


/**
 * Getter for property <code>holdSelection</code>.
 * Set whether hold selection is enabled
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>holdSelection</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getHoldSelection
 * @function
 */

/**
 * Setter for property <code>holdSelection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHoldSelection  new value for property <code>holdSelection</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setHoldSelection
 * @function
 */


/**
 * Getter for property <code>preserveSelectionWhenDragging</code>.
 * Set whether preserve selection when dragging is enabled
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>preserveSelectionWhenDragging</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getPreserveSelectionWhenDragging
 * @function
 */

/**
 * Setter for property <code>preserveSelectionWhenDragging</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPreserveSelectionWhenDragging  new value for property <code>preserveSelectionWhenDragging</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setPreserveSelectionWhenDragging
 * @function
 */


/**
 * Getter for property <code>decorations</code>.
 * Set decorations relating to interaction. Each item
 * that is an object of {name: 'decoration name', fn: 'decoration callback function'} is a decoration.
 * Currently two decorations are supported: showDetail and hideDetail.
 * These two decorations can be used to create a user-defined tooltip.
 * 
 * If these 2 decorations are used, the default tooltip is not used,
 * and the user should implement a custom tooltip.
 * The showDetail decoration is called when the tooltip is shown,
 * and the hideDetail decoration is called when the tooltip is hidden.
 * 
 * The arguments of showDetail are one object of {mode: 'tooltip mode',
 * data: 'data of hovering selected data point', position: 'mouse position',
 * container: 'chart container dom element', selectedNumber: 'number of selected data points'}.
 * 'tooltip mode' is either 'infoMode' or 'actionMode'. Hovering over an unselected data point displays the infoMode tooltip,
 * while hovering over a selected data point displays the actionMode tooltip.
 * 'data' is an array of dimensions and measures, where each item is an object of
 * {name: 'dimension name or measure name', value: 'dimension member or measure value',
 * type: 'literal string of dimension or measure'}. For instance,
 * {name: 'Country', value: 'China', type: 'dimension'}, or
 * {name: 'Profit', value: 159, type: 'measure'}.
 * 
 * The arguments of hideDetail are a string representing tooltip mode,
 * i.e. what kind of tooltip should be hidden.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>decorations</code>
 * @public
 * @name sap.viz.ui5.types.controller.Interaction#getDecorations
 * @function
 */

/**
 * Setter for property <code>decorations</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oDecorations  new value for property <code>decorations</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction#setDecorations
 * @function
 */


/**
 * Getter for property <code>triggers</code>.
 * Set triggers for behavior decration.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>triggers</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getTriggers
 * @function
 */

/**
 * Setter for property <code>triggers</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oTriggers  new value for property <code>triggers</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setTriggers
 * @function
 */


/**
 * Getter for property <code>handlers</code>.
 * Set handlers for behavior decration.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>handlers</code>
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getHandlers
 * @function
 */

/**
 * Setter for property <code>handlers</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oHandlers  new value for property <code>handlers</code>
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.20. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setHandlers
 * @function
 */


/**
 * Getter for aggregation <code>selectability</code>.<br/>
 * Settings for selectability
 * 
 * @return {sap.viz.ui5.types.controller.Interaction_selectability}
 * @public
 * @name sap.viz.ui5.types.controller.Interaction#getSelectability
 * @function
 */


/**
 * Setter for the aggregated <code>selectability</code>.
 * @param {sap.viz.ui5.types.controller.Interaction_selectability} oSelectability
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction#setSelectability
 * @function
 */
	

/**
 * Destroys the selectability in the aggregation 
 * named <code>selectability</code>.
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction#destroySelectability
 * @function
 */


/**
 * Getter for aggregation <code>pan</code>.<br/>
 * add documentation for aggregation pan
 * 
 * @return {sap.viz.ui5.types.controller.Interaction_pan}
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#getPan
 * @function
 */


/**
 * Setter for the aggregated <code>pan</code>.
 * @param {sap.viz.ui5.types.controller.Interaction_pan} oPan
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#setPan
 * @function
 */
	

/**
 * Destroys the pan in the aggregation 
 * named <code>pan</code>.
 * @return {sap.viz.ui5.types.controller.Interaction} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction#destroyPan
 * @function
 */

// Start of sap/viz/ui5/types/controller/Interaction.js
sap.viz.ui5.types.controller.Interaction.prototype.getSelectability = function() {
  return this._getOrCreate("selectability");
}
sap.viz.ui5.types.controller.Interaction.prototype.getPan = function() {
  return this._getOrCreate("pan");
}

}; // end of sap/viz/ui5/types/controller/Interaction.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.controller.Interaction_pan') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.controller.Interaction_pan.
jQuery.sap.declare("sap.viz.ui5.types.controller.Interaction_pan");




/**
 * Constructor for a new ui5/types/controller/Interaction_pan.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnable enable} : boolean (default: true)</li>
 * <li>{@link #getOrientation orientation} : sap.viz.ui5.types.controller.Interaction_pan_orientation (default: sap.viz.ui5.types.controller.Interaction_pan_orientation.both)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Structured Type ui5/types/controller/Interaction_pan
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction_pan
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.controller.Interaction_pan", { metadata : {

	deprecated : true,
	library : "sap.viz",
	properties : {
		"enable" : {type : "boolean", group : "", defaultValue : true},
		"orientation" : {type : "sap.viz.ui5.types.controller.Interaction_pan_orientation", group : "", defaultValue : sap.viz.ui5.types.controller.Interaction_pan_orientation.both, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction_pan with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.controller.Interaction_pan.extend
 * @function
 */


/**
 * Getter for property <code>enable</code>.
 * Enable/disable pan
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_pan#getEnable
 * @function
 */

/**
 * Setter for property <code>enable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.viz.ui5.types.controller.Interaction_pan} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_pan#setEnable
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Set orientation of pan
 *
 * Default value is <code>both</code>
 *
 * @return {sap.viz.ui5.types.controller.Interaction_pan_orientation} the value of property <code>orientation</code>
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction_pan#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>both</code> 
 *
 * @param {sap.viz.ui5.types.controller.Interaction_pan_orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.viz.ui5.types.controller.Interaction_pan} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction_pan#setOrientation
 * @function
 */

// Start of sap/viz/ui5/types/controller/Interaction_pan.js

}; // end of sap/viz/ui5/types/controller/Interaction_pan.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.controller.Interaction_selectability') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.controller.Interaction_selectability.
jQuery.sap.declare("sap.viz.ui5.types.controller.Interaction_selectability");




/**
 * Constructor for a new ui5/types/controller/Interaction_selectability.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMode mode} : sap.viz.ui5.types.controller.Interaction_selectability_mode (default: sap.viz.ui5.types.controller.Interaction_selectability_mode.inclusive)</li>
 * <li>{@link #getAxisLabelSelection axisLabelSelection} : boolean (default: true)</li>
 * <li>{@link #getLegendSelection legendSelection} : boolean (default: true)</li>
 * <li>{@link #getPlotLassoSelection plotLassoSelection} : boolean (default: true)</li>
 * <li>{@link #getPlotStdSelection plotStdSelection} : boolean (default: true)</li>
 * <li>{@link #getLassoWithCtrlKey lassoWithCtrlKey} : boolean (default: false)</li>
 * <li>{@link #getDataPointsCacheable dataPointsCacheable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for selectability
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.controller.Interaction_selectability
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.controller.Interaction_selectability", { metadata : {

	library : "sap.viz",
	properties : {
		"mode" : {type : "sap.viz.ui5.types.controller.Interaction_selectability_mode", group : "", defaultValue : sap.viz.ui5.types.controller.Interaction_selectability_mode.inclusive},
		"axisLabelSelection" : {type : "boolean", group : "", defaultValue : true},
		"legendSelection" : {type : "boolean", group : "", defaultValue : true},
		"plotLassoSelection" : {type : "boolean", group : "", defaultValue : true},
		"plotStdSelection" : {type : "boolean", group : "", defaultValue : true},
		"lassoWithCtrlKey" : {type : "boolean", group : "", defaultValue : false, deprecated: true},
		"dataPointsCacheable" : {type : "boolean", group : "", defaultValue : true, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.controller.Interaction_selectability with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.controller.Interaction_selectability.extend
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * Set the selection mode. If this value is set to 'exclusive' or 'single', only one set of data points can be selected at once. If this value is set to 'inclusive' or 'multiple', multiple sets of data points can be selected at once. If this value is set to 'none', no sets of data points can be selected. The values 'single' and 'multiple' are deprecated; please remove them from your chart.
 *
 * Default value is <code>inclusive</code>
 *
 * @return {sap.viz.ui5.types.controller.Interaction_selectability_mode} the value of property <code>mode</code>
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>inclusive</code> 
 *
 * @param {sap.viz.ui5.types.controller.Interaction_selectability_mode} oMode  new value for property <code>mode</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#setMode
 * @function
 */


/**
 * Getter for property <code>axisLabelSelection</code>.
 * Set whether axis labels can be selected
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>axisLabelSelection</code>
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#getAxisLabelSelection
 * @function
 */

/**
 * Setter for property <code>axisLabelSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAxisLabelSelection  new value for property <code>axisLabelSelection</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#setAxisLabelSelection
 * @function
 */


/**
 * Getter for property <code>legendSelection</code>.
 * Set whether the legend can be selected
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>legendSelection</code>
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#getLegendSelection
 * @function
 */

/**
 * Setter for property <code>legendSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLegendSelection  new value for property <code>legendSelection</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#setLegendSelection
 * @function
 */


/**
 * Getter for property <code>plotLassoSelection</code>.
 * Set whether lasso selection can be used in the plot area
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>plotLassoSelection</code>
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#getPlotLassoSelection
 * @function
 */

/**
 * Setter for property <code>plotLassoSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bPlotLassoSelection  new value for property <code>plotLassoSelection</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#setPlotLassoSelection
 * @function
 */


/**
 * Getter for property <code>plotStdSelection</code>.
 * Set whether selection can be done in the plot area by clicking and tapping
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>plotStdSelection</code>
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#getPlotStdSelection
 * @function
 */

/**
 * Setter for property <code>plotStdSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bPlotStdSelection  new value for property <code>plotStdSelection</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.controller.Interaction_selectability#setPlotStdSelection
 * @function
 */


/**
 * Getter for property <code>lassoWithCtrlKey</code>.
 * Set whether the user must hold the ctrl key to use lasso selection
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>lassoWithCtrlKey</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction_selectability#getLassoWithCtrlKey
 * @function
 */

/**
 * Setter for property <code>lassoWithCtrlKey</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLassoWithCtrlKey  new value for property <code>lassoWithCtrlKey</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction_selectability#setLassoWithCtrlKey
 * @function
 */


/**
 * Getter for property <code>dataPointsCacheable</code>.
 * Set whether data points can be cached. If it's true, data points might be cached by Interaction for better performance.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>dataPointsCacheable</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction_selectability#getDataPointsCacheable
 * @function
 */

/**
 * Setter for property <code>dataPointsCacheable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDataPointsCacheable  new value for property <code>dataPointsCacheable</code>
 * @return {sap.viz.ui5.types.controller.Interaction_selectability} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.controller.Interaction_selectability#setDataPointsCacheable
 * @function
 */

// Start of sap/viz/ui5/types/controller/Interaction_selectability.js

}; // end of sap/viz/ui5/types/controller/Interaction_selectability.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.layout.Dock') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.layout.Dock.
jQuery.sap.declare("sap.viz.ui5.types.layout.Dock");




/**
 * Constructor for a new ui5/types/layout/Dock.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/layout/Dock
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.layout.Dock
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.layout.Dock", { metadata : {

	library : "sap.viz"
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.layout.Dock with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.layout.Dock.extend
 * @function
 */

// Start of sap/viz/ui5/types/layout/Dock.js

}; // end of sap/viz/ui5/types/layout/Dock.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.layout.Stack') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.layout.Stack.
jQuery.sap.declare("sap.viz.ui5.types.layout.Stack");




/**
 * Constructor for a new ui5/types/layout/Stack.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/layout/Stack
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.layout.Stack
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.layout.Stack", { metadata : {

	library : "sap.viz"
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.layout.Stack with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.layout.Stack.extend
 * @function
 */

// Start of sap/viz/ui5/types/layout/Stack.js

}; // end of sap/viz/ui5/types/layout/Stack.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.legend.Common') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.legend.Common.
jQuery.sap.declare("sap.viz.ui5.types.legend.Common");




/**
 * Constructor for a new ui5/types/legend/Common.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getFormatString formatString} : string (default: 'null')</li>
 * <li>{@link #getIsHierarchical isHierarchical} : boolean (default: false)</li>
 * <li>{@link #getIsScrollable isScrollable} : boolean (default: false)</li>
 * <li>{@link #getPosition position} : sap.viz.ui5.types.legend.Common_position (default: sap.viz.ui5.types.legend.Common_position.right)</li>
 * <li>{@link #getType type} : sap.viz.ui5.types.legend.Common_type (default: sap.viz.ui5.types.legend.Common_type.ColorLegend)</li>
 * <li>{@link #getAlignment alignment} : sap.viz.ui5.types.legend.Common_alignment (default: sap.viz.ui5.types.legend.Common_alignment.start)</li>
 * <li>{@link #getDrawingEffect drawingEffect} : sap.viz.ui5.types.legend.Common_drawingEffect (default: sap.viz.ui5.types.legend.Common_drawingEffect.normal)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.legend.Common_title</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Module ui5/types/legend/Common
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.legend.Common
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.legend.Common", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"formatString" : {type : "string", group : "", defaultValue : 'null', deprecated: true},
		"isHierarchical" : {type : "boolean", group : "", defaultValue : false},
		"isScrollable" : {type : "boolean", group : "", defaultValue : false},
		"position" : {type : "sap.viz.ui5.types.legend.Common_position", group : "", defaultValue : sap.viz.ui5.types.legend.Common_position.right, deprecated: true},
		"type" : {type : "sap.viz.ui5.types.legend.Common_type", group : "", defaultValue : sap.viz.ui5.types.legend.Common_type.ColorLegend, deprecated: true},
		"alignment" : {type : "sap.viz.ui5.types.legend.Common_alignment", group : "", defaultValue : sap.viz.ui5.types.legend.Common_alignment.start, deprecated: true},
		"drawingEffect" : {type : "sap.viz.ui5.types.legend.Common_drawingEffect", group : "", defaultValue : sap.viz.ui5.types.legend.Common_drawingEffect.normal}
	},
	aggregations : {
		"title" : {type : "sap.viz.ui5.types.legend.Common_title", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.legend.Common with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.legend.Common.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the legend
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.legend.Common#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common#setVisible
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * Set the format string for the legend. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.
 *
 * Default value is <code>null</code>
 *
 * @return {string} the value of property <code>formatString</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {string} sFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#setFormatString
 * @function
 */


/**
 * Getter for property <code>isHierarchical</code>.
 * Set whether the legend is hierarchical. This is only supported if the legend is located to the right of the chart.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isHierarchical</code>
 * @public
 * @name sap.viz.ui5.types.legend.Common#getIsHierarchical
 * @function
 */

/**
 * Setter for property <code>isHierarchical</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsHierarchical  new value for property <code>isHierarchical</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common#setIsHierarchical
 * @function
 */


/**
 * Getter for property <code>isScrollable</code>.
 * Set whether the legend is scrollable. If this value is set to 'false', and there is not enough room to show the whole legend, an ellipsis (...) indicates the missing legend items.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isScrollable</code>
 * @public
 * @name sap.viz.ui5.types.legend.Common#getIsScrollable
 * @function
 */

/**
 * Setter for property <code>isScrollable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsScrollable  new value for property <code>isScrollable</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common#setIsScrollable
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * It is a deprecated property. Please use "legendGroup.layout.position" property to set legend position.
 *
 * Default value is <code>right</code>
 *
 * @return {sap.viz.ui5.types.legend.Common_position} the value of property <code>position</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is <code>right</code> 
 *
 * @param {sap.viz.ui5.types.legend.Common_position} oPosition  new value for property <code>position</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#setPosition
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Set legend type for Bubble charts. Non-bubble charts are not supported.
 *
 * Default value is <code>ColorLegend</code>
 *
 * @return {sap.viz.ui5.types.legend.Common_type} the value of property <code>type</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>ColorLegend</code> 
 *
 * @param {sap.viz.ui5.types.legend.Common_type} oType  new value for property <code>type</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#setType
 * @function
 */


/**
 * Getter for property <code>alignment</code>.
 * Set the alignment of the legend
 *
 * Default value is <code>start</code>
 *
 * @return {sap.viz.ui5.types.legend.Common_alignment} the value of property <code>alignment</code>
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#getAlignment
 * @function
 */

/**
 * Setter for property <code>alignment</code>.
 *
 * Default value is <code>start</code> 
 *
 * @param {sap.viz.ui5.types.legend.Common_alignment} oAlignment  new value for property <code>alignment</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.12. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.types.legend.Common#setAlignment
 * @function
 */


/**
 * Getter for property <code>drawingEffect</code>.
 * Set the drawing effect for colors in the legend. If this value is set to 'glossy', colors are glossy. If this value is set to 'normal', colors are matte.
 *
 * Default value is <code>normal</code>
 *
 * @return {sap.viz.ui5.types.legend.Common_drawingEffect} the value of property <code>drawingEffect</code>
 * @public
 * @name sap.viz.ui5.types.legend.Common#getDrawingEffect
 * @function
 */

/**
 * Setter for property <code>drawingEffect</code>.
 *
 * Default value is <code>normal</code> 
 *
 * @param {sap.viz.ui5.types.legend.Common_drawingEffect} oDrawingEffect  new value for property <code>drawingEffect</code>
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common#setDrawingEffect
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Settings for the legend title
 * 
 * @return {sap.viz.ui5.types.legend.Common_title}
 * @public
 * @name sap.viz.ui5.types.legend.Common#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.legend.Common_title} oTitle
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.types.legend.Common} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common#destroyTitle
 * @function
 */

// Start of sap/viz/ui5/types/legend/Common.js
sap.viz.ui5.types.legend.Common.prototype.getTitle = function() {
  return this._getOrCreate("title");
}

}; // end of sap/viz/ui5/types/legend/Common.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.types.legend.Common_title') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.types.legend.Common_title.
jQuery.sap.declare("sap.viz.ui5.types.legend.Common_title");




/**
 * Constructor for a new ui5/types/legend/Common_title.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getText text} : string (default: 'null')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseStructuredType#constructor sap.viz.ui5.core.BaseStructuredType}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Settings for the legend title
 * @extends sap.viz.ui5.core.BaseStructuredType
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.types.legend.Common_title
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseStructuredType.extend("sap.viz.ui5.types.legend.Common_title", { metadata : {

	library : "sap.viz",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : false},
		"text" : {type : "string", group : "", defaultValue : 'null'}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.types.legend.Common_title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.types.legend.Common_title.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set the visibility of the legend title
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.viz.ui5.types.legend.Common_title#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.viz.ui5.types.legend.Common_title} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common_title#setVisible
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Set the text of the legend title
 *
 * Default value is <code>null</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.viz.ui5.types.legend.Common_title#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>null</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.viz.ui5.types.legend.Common_title} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.types.legend.Common_title#setText
 * @function
 */

// Start of sap/viz/ui5/types/legend/Common_title.js

}; // end of sap/viz/ui5/types/legend/Common_title.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.VizContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.VizContainer.
jQuery.sap.declare("sap.viz.ui5.VizContainer");




/**
 * Constructor for a new ui5/VizContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVizType vizType} : string</li>
 * <li>{@link #getVizCss vizCss} : string</li>
 * <li>{@link #getVizProperties vizProperties} : object</li>
 * <li>{@link #getEnableMorphing enableMorphing} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getVizData vizData} : sap.viz.ui5.data.Dataset</li>
 * <li>{@link #getAnalysisObjectsForPicker analysisObjectsForPicker} : sap.viz.ui5.controls.common.feeds.AnalysisObject[]</li>
 * <li>{@link #getFeeds feeds} : sap.viz.ui5.controls.common.feeds.FeedItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.VizContainer#event:feedsChanged feedsChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.VizContainer#event:vizTypeChanged vizTypeChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.VizContainer#event:vizDefinitionChanged vizDefinitionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.VizContainer#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.VizContainer#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.VizContainer#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.VizContainer#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.VizContainer#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.controls.common.BaseControl#constructor sap.viz.ui5.controls.common.BaseControl}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Controls ui5/VizContainer
 * @extends sap.viz.ui5.controls.common.BaseControl
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.19.0
 * @experimental Since version 1.19.0. 
 * API is not finished yet and might change completely
 * @name sap.viz.ui5.VizContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.controls.common.BaseControl.extend("sap.viz.ui5.VizContainer", { metadata : {

	publicMethods : [
		// methods
		"vizUpdate", "vizSelection"
	],
	library : "sap.viz",
	properties : {
		"vizType" : {type : "string", group : "Misc", defaultValue : null},
		"vizCss" : {type : "string", group : "Misc", defaultValue : null},
		"vizProperties" : {type : "object", group : "Misc", defaultValue : null},
		"enableMorphing" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"vizData" : {type : "sap.viz.ui5.data.Dataset", multiple : false}, 
		"analysisObjectsForPicker" : {type : "sap.viz.ui5.controls.common.feeds.AnalysisObject", multiple : true, singularName : "analysisObjectsForPicker"}, 
		"feeds" : {type : "sap.viz.ui5.controls.common.feeds.FeedItem", multiple : true, singularName : "feed"}
	},
	events : {
		"feedsChanged" : {}, 
		"vizTypeChanged" : {}, 
		"vizDefinitionChanged" : {}, 
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {}, 
		"hideTooltip" : {}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.VizContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.VizContainer.extend
 * @function
 */

sap.viz.ui5.VizContainer.M_EVENTS = {'feedsChanged':'feedsChanged','vizTypeChanged':'vizTypeChanged','vizDefinitionChanged':'vizDefinitionChanged','selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for property <code>vizType</code>.
 * Type for visualization.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>vizType</code>
 * @public
 * @name sap.viz.ui5.VizContainer#getVizType
 * @function
 */

/**
 * Setter for property <code>vizType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sVizType  new value for property <code>vizType</code>
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#setVizType
 * @function
 */


/**
 * Getter for property <code>vizCss</code>.
 * Css for visualization.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>vizCss</code>
 * @public
 * @name sap.viz.ui5.VizContainer#getVizCss
 * @function
 */

/**
 * Setter for property <code>vizCss</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sVizCss  new value for property <code>vizCss</code>
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#setVizCss
 * @function
 */


/**
 * Getter for property <code>vizProperties</code>.
 * Properties for visualization.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>vizProperties</code>
 * @public
 * @name sap.viz.ui5.VizContainer#getVizProperties
 * @function
 */

/**
 * Setter for property <code>vizProperties</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oVizProperties  new value for property <code>vizProperties</code>
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#setVizProperties
 * @function
 */


/**
 * Getter for property <code>enableMorphing</code>.
 * Enable morphing for visualization.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>enableMorphing</code>
 * @public
 * @name sap.viz.ui5.VizContainer#getEnableMorphing
 * @function
 */

/**
 * Setter for property <code>enableMorphing</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bEnableMorphing  new value for property <code>enableMorphing</code>
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#setEnableMorphing
 * @function
 */


/**
 * Getter for aggregation <code>vizData</code>.<br/>
 * Dataset for chart.
 * 
 * @return {sap.viz.ui5.data.Dataset}
 * @public
 * @name sap.viz.ui5.VizContainer#getVizData
 * @function
 */


/**
 * Setter for the aggregated <code>vizData</code>.
 * @param {sap.viz.ui5.data.Dataset} oVizData
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#setVizData
 * @function
 */
	

/**
 * Destroys the vizData in the aggregation 
 * named <code>vizData</code>.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#destroyVizData
 * @function
 */


/**
 * Getter for aggregation <code>analysisObjectsForPicker</code>.<br/>
 * Available sap.viz.ui5.controls.common.feeds.AnalysisObject for object picker popup UI
 * 
 * @return {sap.viz.ui5.controls.common.feeds.AnalysisObject[]}
 * @public
 * @name sap.viz.ui5.VizContainer#getAnalysisObjectsForPicker
 * @function
 */


/**
 * Inserts a analysisObjectsForPicker into the aggregation named <code>analysisObjectsForPicker</code>.
 *
 * @param {sap.viz.ui5.controls.common.feeds.AnalysisObject}
 *          oAnalysisObjectsForPicker the analysisObjectsForPicker to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the analysisObjectsForPicker should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the analysisObjectsForPicker is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the analysisObjectsForPicker is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#insertAnalysisObjectsForPicker
 * @function
 */

/**
 * Adds some analysisObjectsForPicker <code>oAnalysisObjectsForPicker</code> 
 * to the aggregation named <code>analysisObjectsForPicker</code>.
 *
 * @param {sap.viz.ui5.controls.common.feeds.AnalysisObject}
 *            oAnalysisObjectsForPicker the analysisObjectsForPicker to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#addAnalysisObjectsForPicker
 * @function
 */

/**
 * Removes an analysisObjectsForPicker from the aggregation named <code>analysisObjectsForPicker</code>.
 *
 * @param {int | string | sap.viz.ui5.controls.common.feeds.AnalysisObject} vAnalysisObjectsForPicker the analysisObjectsForPicker to remove or its index or id
 * @return {sap.viz.ui5.controls.common.feeds.AnalysisObject} the removed analysisObjectsForPicker or null
 * @public
 * @name sap.viz.ui5.VizContainer#removeAnalysisObjectsForPicker
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>analysisObjectsForPicker</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.viz.ui5.controls.common.feeds.AnalysisObject[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.viz.ui5.VizContainer#removeAllAnalysisObjectsForPicker
 * @function
 */

/**
 * Checks for the provided <code>sap.viz.ui5.controls.common.feeds.AnalysisObject</code> in the aggregation named <code>analysisObjectsForPicker</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.viz.ui5.controls.common.feeds.AnalysisObject}
 *            oAnalysisObjectsForPicker the analysisObjectsForPicker whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.viz.ui5.VizContainer#indexOfAnalysisObjectsForPicker
 * @function
 */
	

/**
 * Destroys all the analysisObjectsForPicker in the aggregation 
 * named <code>analysisObjectsForPicker</code>.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#destroyAnalysisObjectsForPicker
 * @function
 */


/**
 * Getter for aggregation <code>feeds</code>.<br/>
 * All feeds for chart.
 * 
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem[]}
 * @public
 * @name sap.viz.ui5.VizContainer#getFeeds
 * @function
 */


/**
 * Inserts a feed into the aggregation named <code>feeds</code>.
 *
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem}
 *          oFeed the feed to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the feed should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the feed is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the feed is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#insertFeed
 * @function
 */

/**
 * Adds some feed <code>oFeed</code> 
 * to the aggregation named <code>feeds</code>.
 *
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem}
 *            oFeed the feed to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#addFeed
 * @function
 */

/**
 * Removes an feed from the aggregation named <code>feeds</code>.
 *
 * @param {int | string | sap.viz.ui5.controls.common.feeds.FeedItem} vFeed the feed to remove or its index or id
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem} the removed feed or null
 * @public
 * @name sap.viz.ui5.VizContainer#removeFeed
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>feeds</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.viz.ui5.VizContainer#removeAllFeeds
 * @function
 */

/**
 * Checks for the provided <code>sap.viz.ui5.controls.common.feeds.FeedItem</code> in the aggregation named <code>feeds</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem}
 *            oFeed the feed whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.viz.ui5.VizContainer#indexOfFeed
 * @function
 */
	

/**
 * Destroys all the feeds in the aggregation 
 * named <code>feeds</code>.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#destroyFeeds
 * @function
 */


/**
 * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding panel, drag and drop object onto VizFrame, or switch chart type by UI operation.
 * Application should listen to "feedsChanged" event to get the corresponding data and set it back to VizFrame to to update the visualization with the new data.
 *
 * @name sap.viz.ui5.VizContainer#feedsChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem[]} oControlEvent.getParameters.feeds An array of changed feeds.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'feedsChanged' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding panel, drag and drop object onto VizFrame, or switch chart type by UI operation.
 * Application should listen to "feedsChanged" event to get the corresponding data and set it back to VizFrame to to update the visualization with the new data.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachFeedsChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'feedsChanged' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachFeedsChanged
 * @function
 */

/**
 * Fire event feedsChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'feeds' of type <code>sap.viz.ui5.controls.common.feeds.FeedItem[]</code> An array of changed feeds.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireFeedsChanged
 * @function
 */


/**
 * Dispatches "vizTypeChanged" event when viz type was changed
 *
 * @name sap.viz.ui5.VizContainer#vizTypeChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'vizTypeChanged' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Dispatches "vizTypeChanged" event when viz type was changed
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachVizTypeChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'vizTypeChanged' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachVizTypeChanged
 * @function
 */

/**
 * Fire event vizTypeChanged to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireVizTypeChanged
 * @function
 */


/**
 * Dispatches "vizDefinitionChanged" event when viz definition was changed.
 *
 * @name sap.viz.ui5.VizContainer#vizDefinitionChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'vizDefinitionChanged' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Dispatches "vizDefinitionChanged" event when viz definition was changed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachVizDefinitionChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'vizDefinitionChanged' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachVizDefinitionChanged
 * @function
 */

/**
 * Fire event vizDefinitionChanged to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireVizDefinitionChanged
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.VizContainer#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.VizContainer#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireDeselectData
 * @function
 */


/**
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}}
 *
 * @name sap.viz.ui5.VizContainer#showTooltip
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //data of one group
 * name:"...",val:[{
 * //data of one row
 * color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."}}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireShowTooltip
 * @function
 */


/**
 * Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.VizContainer#hideTooltip
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.VizContainer#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.VizContainer</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.VizContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.VizContainer#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.VizContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.VizContainer#fireInitialized
 * @function
 */


/**
 * Update VizContainer according to a JSON object, it can update css, properties, feeds and data model.
 *
 * @name sap.viz.ui5.VizContainer#vizUpdate
 * @function
 * @param {object} oOJson
 *         A JSON object contains combination of css, properties, feeds and data model.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Selections for the chart instance of the VizContainer.
 *
 * @name sap.viz.ui5.VizContainer#vizSelection
 * @function
 * @param {object[]} aAPoints
 *         Some data points of the chart
 * @param {object} oOAction
 *         A flag 'clearSelection', whether to clear previous selection, by default the selection will be incremental selection
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/viz/ui5/VizContainer.js
jQuery.sap.require('sap.viz.libs.sap-viz'); // unlisted dependency retained


jQuery.sap.require('sap.viz.ui5.container.libs.sap-viz-controls-vizcontainer'); // unlisted dependency retained





jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.viz.ui5.container.libs.css", "/sap.viz.controls.css"));

sap.viz.ui5.VizContainer.prototype.init = function() {
	sap.viz.ui5.controls.common.BaseControl.prototype.init.apply(this,
			arguments);

	this._uiConfig = {
		'layout' : 'horizontal',
		'enableMorphing' : true
	};

	this._vizFrame = null;
	this._vizBuilder = null;
	this._switchBar = null;

	this._vSplitter$ = null;

	this._clearVariables();
};

sap.viz.ui5.VizContainer.prototype.exit = function() {
	sap.viz.ui5.controls.common.BaseControl.prototype.exit.apply(this,
			arguments);

	this._clearVariables();

	this.setVizData(null);
};

sap.viz.ui5.VizContainer.prototype._clearVariables = function() {
	this._vizFrame$ = null;
	this._vizBuilder$ = null;
	this._switchBar$ = null;

	this._clearRequestedProperties();
};
sap.viz.ui5.VizContainer.prototype._clearRequestedProperties = function() {
	this._requestedVizType = 'viz/column';
	this._requestedVizCss = null;
	this._requestedVizProperties = null;

	this._requestedOptions = null;
};

sap.viz.ui5.VizContainer.prototype.setUiConfig = function(
		oUiConfig) {
	this._mergeConfig(oUiConfig);
};

sap.viz.ui5.VizContainer.prototype._mergeConfig = function(oUiConfig) {
	oUiConfig = oUiConfig || {};
	if (oUiConfig.layout === 'vertical' || oUiConfig.layout === 'horizontal') {
		this._uiConfig.layout = oUiConfig.layout;
	}
	this._uiConfig.enableMorphing = oUiConfig.enableMorphing !== false;
};

sap.viz.ui5.VizContainer.prototype.getFeeds = function() {
	var feeds = [];
	if (this._vizFrame && this._vizFrame.feeds()) {
		feeds = sap.viz.ui5.controls.common.feeds.FeedItem
				.toFeeds(this._vizFrame.feeds());
	} else {
		feeds = this.getAggregation('feeds');
	}
	return feeds;
};

sap.viz.ui5.VizContainer.prototype.getVizType = function() {
	if (this._vizFrame) {
		return this._vizFrame.vizType();
	} else {
		return this._requestedVizType;
	}
};
/**
 * Setter for property vizType. A string of supported viz type: viz/column,
 * viz/stacked_column, viz/dual_column, viz/line, viz/area, viz/combination,
 * viz/dual_line, viz/dual_combination, viz/pie, viz/donut, viz/scatter,
 * viz/bubble, viz/heatmap, viz/treemap.
 * 
 * @param {string}
 *            sVizType
 * @returns {sap.viz.ui5.VizContainer}
 * @public
 * @function sap.viz.ui5.VizContainer.prototype.setVizType
 */
sap.viz.ui5.VizContainer.prototype.setVizType = function(sVizType) {
	if (this._vizFrame) {
		this._vizFrame.vizType(sVizType);
	} else {
		this._requestedVizType = sVizType;
	}
	return this;
};
sap.viz.ui5.VizContainer.prototype.getVizCss = function() {
	if (this._vizFrame) {
		return this._vizFrame.vizCss();
	} else {
		return this._requestedVizCss;
	}
};
sap.viz.ui5.VizContainer.prototype.setVizCss = function(sVizCss) {
	if (this._vizFrame) {
		this._vizFrame.vizCss(sVizCss);
	} else {
		this._requestedVizCss = sVizCss;
	}
	return this;
};

sap.viz.ui5.VizContainer.prototype.getVizProperties = function() {
	if (this._vizFrame) {
		return this._vizFrame.vizProperties();
	} else {
		return this._requestedVizProperties;
	}
};
/**
 * Properties for visualization. Example:
 * 
 * <pre>
 *  var vizContainer = new sap.viz.ui5.VizContainer(...);
 *  var properties = {
 *      'dataLabel' : {'visible' : true },
 *      'legend' : { &quot;visible&quot; : true },
 *      'direction' : 'horizontal',
 *      'stacking' : 'normal'
 * };
 * vizContainer.setVizProperties(properties);
 * </pre>
 * 
 * @param {object}
 *            oVizProperties
 * @returns {sap.viz.ui5.VizContainer}
 * @public
 * @function sap.viz.ui5.VizContainer.prototype.setVizProperties
 */
sap.viz.ui5.VizContainer.prototype.setVizProperties = function(oVizProperties) {
	if (this._vizFrame) {
		this._vizFrame.vizProperties(oVizProperties);
	} else {
		this._requestedVizProperties = oVizProperties;
	}
	return this;
};

sap.viz.ui5.VizContainer.prototype.getEnableMorphing = function() {
	if (this._vizFrame) {
		return this._vizFrame.enableMorphing();
	} else {
		return this._uiConfig.enableMorphing;
	}
};
/**
 * Setter for property enableMorphing. If set true, a tween animation will play
 * when chart changed.
 * 
 * @param {boolean}
 *            bEnableMorphing
 * @returns {sap.viz.ui5.VizContainer}
 * @public
 * @function sap.viz.ui5.VizContainer.prototype.setEnableMorphing
 */
sap.viz.ui5.VizContainer.prototype.setEnableMorphing = function(bEnableMorphing) {
	if (this._vizFrame) {
		this._vizFrame.enableMorphing(bEnableMorphing);
	} else {
		this._uiConfig.enableMorphing = bEnableMorphing;
	}
	return this;
};
/**
 * Selections for visualization. Example:
 * 
 * <pre>
 *  var vizContainer = new sap.viz.ui5.VizContainer(...);
 *  var points = [{
 *      data : {
 *      	&quot;Country&quot; : &quot;China&quot;,
 *          &quot;Year&quot; : &quot;2001&quot;,
 *          &quot;Product&quot; : &quot;Car&quot;,
 *          &quot;Profit&quot; : 25
 *      }}, {
 *      data : {
 *      	&quot;Country&quot; : &quot;China&quot;,
 *          &quot;Year&quot; : &quot;2001&quot;,
 *          &quot;Product&quot; : &quot;Trunk&quot;,
 *          &quot;Profit&quot; : 34
 *      }}];
 *  var action = {
 *  	clearSelection : true
 *  };
 * vizContainer.vizSelection(points, action);
 * </pre>
 * 
 * @param {object[]}
 *            aPoints some data points of the chart
 * @param {object}
 *            oAction whether to clear previous selection, by default the
 *            selection will be incremental selection
 * @returns {sap.viz.ui5.VizContainer}
 * @public
 * @function sap.viz.ui5.VizContainer.prototype.vizSelection
 */
sap.viz.ui5.VizContainer.prototype.vizSelection = function(aPoints, oAction) {
	if (this._vizFrame) {
		var result = this._vizFrame.vizSelection.apply(this._vizFrame,
				arguments);
		if (result === this._vizFrame) {
			result = this;
		}
		return result;
	} else {
		return null;
	}
};
/**
 * Update VizContainer according to a JSON object, it can update css,
 * properties, feeds and data model. Example:
 * 
 * <pre>
 * var vizContainer = new sap.viz.ui5.VizContainer(...);
 * var vizData = new sap.viz.ui5.data.FlattenedDataset({
 *     'dimensions' : [{
 *         axis: 1,
 *         name: &quot;Country&quot;,
 *         value: &quot;{Country}&quot;
 *         },{
 *         axis: 2,
 *         name: &quot;City&quot;
 *         value: &quot;{City}&quot;  
 *      }],
 *      'measures' : [{
 *          group: 1,
 *          name: &quot;Quantity sold&quot;,
 *          value: &quot;{Quantity sold}&quot;
 *       }],
 *       'data' : {
 *           'path' : &quot;/rawData&quot;
 *       }
 * });
 * var cssString = 'position:absolute;left:0px;top:0px;';
 * var properties = {
 *     'dataLabel' : {'visible' : true },
 *     'legend' : {&quot;visible&quot; : true},
 *     'direction' : 'horizontal',
 *     'stacking' : 'normal'
 * };
 * var FeedItem = sap.viz.ui5.controls.common.feeds.FeedItem;
 * var feeds = [
 *     new FeedItem({'uid' : 'primaryValues', 
 *                   'type' : 'Measure',
 *                   'values' []}),
 *     new FeedItem({'uid' : 'regionColor', 
 *                   'type' : 'Dimension',
 *                   'values' []})];  
 * vizContainer.vizUpdate({
 *               'data' : vizData,
 *               'css' : cssString,
 *               'properties' : properties, 
 *               'feeds' : feeds
 *           });
 * </pre>
 * 
 * @param {object}
 *            oOptions a JSON object contains combination of css, properties,
 *            feeds and data model.
 * @returns {sap.viz.ui5.VizContainer}
 * @public
 * @function sap.viz.ui5.VizContainer.prototype.vizUpdate
 */
sap.viz.ui5.VizContainer.prototype.vizUpdate = function(oOptions) {
	if (this._vizFrame) {
		if (oOptions.data || oOptions.feeds) {
			this._requestedOptions = this._requestedOptions || {};
		}

		if (this._requestedOptions) {
			// Save common keyword in options, release these options when
			// aggregations trigger render
			var requestedOptions = this._requestedOptions;
			requestedOptions.css = requestedOptions.css || oOptions.css;
			requestedOptions.properties = requestedOptions.properties
					|| oOptions.properties;

			if (oOptions.data) {
				this.setVizData(oOptions.data);
			}
			if (oOptions.feeds) {
				this._resetFeeds(oOptions.feeds);
			}
		} else {
			this._vizFrame.vizUpdate(oOptions);
		}
	}
};

sap.viz.ui5.VizContainer.prototype._resetFeeds = function(aFeeds) {
	this.destroyFeeds();

	// update feeds in sequence of aaindexs
	sap.viz.ui5.controls.common.helpers.VizControlsHelper.updateFeedsByAAIndex(
			this.getVizType(), aFeeds);
	
	if (aFeeds && aFeeds.length) {
		for (var i = 0; i < aFeeds.length; i++) {
			this.addFeed(aFeeds[i]);
		}
	}
	return this;
};
sap.viz.ui5.VizContainer.prototype._setAnalysisObjectsForPicker = function(
		aAnalysisObjects) {
	this.destroyAnalysisObjectsForPicker();
	if (aAnalysisObjects && aAnalysisObjects.length) {
		for (var i = 0; i < aAnalysisObjects.length; i++) {
			this.addAnalysisObjectsForPicker(aAnalysisObjects[i]);
		}
	}
	return this;
};

sap.viz.ui5.VizContainer.prototype._createVizFrame = function(dom) {
	var VizFrame = sap.viz.controls.frame.VizFrame;
	var GlobalConfig = sap.viz.controls.common.config.GlobalConfig;

	var vizFrameConfig = GlobalConfig
			.defaultUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FRAME);
	vizFrameConfig.enableFilterMenu = false;
	vizFrameConfig.enableFilterBar = false;
	vizFrameConfig.enableSettingButton = false;
	vizFrameConfig.enableFullScreenButton = false;
	vizFrameConfig.controls.chart.enableMorphing = this._uiConfig.enableMorphing;
	vizFrameConfig.controls.chart.enableTrellis = false;
	vizFrameConfig.controls.contextMenu.menu = [ [ "direction", "stacking" ],
			[ "legend", "datalabels" ] ];
	var vizFrame = new VizFrame(dom, vizFrameConfig);

	vizFrame.addEventListener('feedsChanged', jQuery.proxy(function(e) {
		this._resetFeeds(this.getFeeds());
		this.fireEvent("feedsChanged", {
			'feeds' : this.getFeeds()
		});
	}, this));

	vizFrame.addEventListener('vizTypeChanged', jQuery.proxy(function(e) {
		this.fireEvent("vizTypeChanged");
	}, this));

	vizFrame.addEventListener('vizDefinitionChanged', jQuery.proxy(function(e) {
		this.fireEvent("vizDefinitionChanged");
	}, this));

	vizFrame.vizOn('selectData', jQuery.proxy(function(e) {
		this.fireEvent("selectData", e);
	}, this));
	vizFrame.vizOn('deselectData', jQuery.proxy(function(e) {
		this.fireEvent("deselectData", e);
	}, this));
	vizFrame.vizOn('showTooltip', jQuery.proxy(function(e) {
		this.fireEvent("showTooltip", e);
	}, this));
	vizFrame.vizOn('hideTooltip', jQuery.proxy(function(e) {
		this.fireEvent("hideTooltip", e);
	}, this));
	vizFrame.vizOn('initialized', jQuery.proxy(function(e) {
		this.fireEvent("initialized", e);
	}, this));

	var options = vizFrame.getDefaultIncompleteOptions(this.getVizType());

	var feeds = this.getAggregation('feeds');
	if (feeds) {
		options.feeds = sap.viz.ui5.controls.common.helpers.VizControlsHelper
				.getFeedInstances(feeds);
	}
	var data = sap.viz.ui5.controls.common.helpers.VizControlsHelper
			.getFakedDataInstance(this.getVizType(), this.getVizData(), feeds);
	if (data) {
		options.data = data;
	}
	if (this.getVizCss()) {
		options.css = this.getVizCss();
	}
	if (this.getVizProperties()) {
		options.properties = this.getVizProperties();
	}
	this._clearRequestedProperties();
	vizFrame.createViz(options);
	return vizFrame;
};
/**
 * Create children views.
 * 
 * @private
 */
sap.viz.ui5.VizContainer.prototype._createChildren = function() {
	var app$ = this._app$;
	var cssPrefix = 'ui5-viz-controls';
	var GlobalConfig = sap.viz.controls.common.config.GlobalConfig;

	// VizFrame
	this._vizFrame$ = jQuery(document.createElement('div')).appendTo(app$)
			.addClass(cssPrefix + '-viz-frame');
	this._vizFrame = this._createVizFrame(this._vizFrame$[0]);

	if (this._uiConfig.layout === 'horizontal') {
		// VizBuilder
		var vizBuilderConfig = GlobalConfig
				.defaultUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_BUILDER);
		vizBuilderConfig.controls.feedingPanel.enableTrellis = false;
		vizBuilderConfig.controls.switchBar.groups = sap.viz.ui5.controls.common.helpers.VizControlsHelper
				.getSwitchBarGroups();

		this._vizBuilder$ = jQuery(document.createElement('div'))
				.appendTo(app$).addClass(cssPrefix + '-viz-builder');
		this._vizBuilder = new sap.viz.controls.builder.VizBuilder(
				this._vizBuilder$[0], vizBuilderConfig);
		this._vizBuilder.connect(this._vizFrame.vizUid());
		// Splitter
		this._vSplitter$ = jQuery(document.createElement('div')).appendTo(app$)
				.addClass(cssPrefix + '-vertical-splitter');
	} else if (this._uiConfig.layout === 'vertical') {
		// SwitchBar
		var switchBarConfig = GlobalConfig
				.defaultUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_SWITCHBAR);
		switchBarConfig.groups = sap.viz.ui5.controls.common.helpers.VizControlsHelper
				.getSwitchBarGroups();

		this._switchBar$ = jQuery(document.createElement('div')).appendTo(app$);
		this._switchBar = new sap.viz.controls.switchbar.SwitchBar(
				this._switchBar$[0], switchBarConfig);
		this._switchBar.connect(this._vizFrame.vizUid());
	}

	this._registerControl('sap.viz.controls.frame.VizFrame', this._vizFrame);
	if (this._vizBuilder) {
		this._registerControl('sap.viz.controls.builder.VizBuilder',
				this._vizBuilder);
	}
	if (this._switchBar) {
		this._registerControl('sap.viz.controls.switchbar.SwitchBar',
				this._switchBar);
	}

	this._validateAOs();
	this._validateSize();
};

sap.viz.ui5.VizContainer.prototype._updateChildren = function() {
	var options = {};
	if (this._requestedOptions) {
		if (this._requestedOptions.css) {
			options.css = this._requestedOptions.css;
		}
		if (this._requestedOptions.properties) {
			options.properties = this._requestedOptions.properties;
		}
		this._requestedOptions = null;
	}
	options.data = sap.viz.ui5.controls.common.helpers.VizControlsHelper
			.getFakedDataInstance(this.getVizType(), this.getVizData(), this
					.getAggregation('feeds'));
	options.feeds = sap.viz.ui5.controls.common.helpers.VizControlsHelper
			.getFeedInstances(this.getAggregation('feeds'));

	this._vizFrame.vizUpdate(options);

	this._validateAOs();
};

sap.viz.ui5.VizContainer.prototype._validateAOs = function() {
	if (this._vizBuilder) {
		var aoInstaces = sap.viz.ui5.controls.common.feeds.AnalysisObject
				.toInstances(this.getAnalysisObjectsForPicker());
		this._vizBuilder.analysisObjectsForPicker(aoInstaces);
	}
};

// need to validateSize in case the host(browser/control) size change.
sap.viz.ui5.VizContainer.prototype._validateSize = function() {
	var size = {
		'width' : this.$().width(),
		'height' : this.$().height()
	};
	if (this._uiConfig.layout === 'horizontal') {
		this._app$.css({
			'min-width' : '560px',
			// TODO Plus 1 for upper border, maybe it should fix in viz.controls
			'min-height' : '601px'
		});
	} else if (this._uiConfig.layout === 'vertical') {
		this._app$.css({
			'min-width' : '300px',
			'min-height' : '654px'
		});
	}

	this.$().css({
		'overflow' : 'hidden'
	});
	// this._app$.css({
	// 'width' : size.width,
	// 'height' : size.height,
	// 'overflow': 'hidden'
	// });
	var appSize = {
		'width' : this._app$.width(),
		'height' : this._app$.height()
	}

	if (this._uiConfig.layout === 'horizontal' && this._vizFrame) {
		var buiderWidth = this._vizBuilder$.width();

		this._vizFrame.size({
			'width' : appSize.width - buiderWidth,
			'height' : appSize.height
		});
		this._vizBuilder.size({
			'width' : buiderWidth,
			// TODO: Minus 1 for upper border, maybe it should fix in
			// viz.controls
			'height' : appSize.height - 1
		});
		this._vizFrame$.css({
			'left' : '0px',
			'top' : '0px'
		});
		this._vizBuilder$.css({
			'left' : appSize.width - buiderWidth + 'px',
			'top' : '0px'
		});
		this._vSplitter$.css({
			'left' : appSize.width - buiderWidth + 'px',
			'top' : '0px',
			'height' : appSize.height + 'px'
		});
	} else if (this._uiConfig.layout === 'vertical' && this._vizFrame) {
		var switchBarWidth = 388;
		var switchBarHeight = 54;
		this._vizFrame.size({
			'width' : appSize.width,
			'height' : appSize.height - switchBarHeight
		});
		this._switchBar.size({
			'width' : switchBarWidth,
			'height' : switchBarHeight
		});
		this._vizFrame$.css({
			'left' : '0px',
			'top' : switchBarHeight + 'px'
		});
		this._switchBar$.css({
			'left' : (appSize.width - switchBarWidth) / 2 + 'px',
			'top' : (switchBarHeight - 36) / 2 + 'px'
		});
	}
	this.$().css({
		'overflow' : 'auto'
	});
};

}; // end of sap/viz/ui5/VizContainer.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.Popover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.controls.Popover.
jQuery.sap.declare("sap.viz.ui5.controls.Popover");




/**
 * Constructor for a new ui5/controls/Popover.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCustomDataControl customDataControl} : any</li>
 * <li>{@link #getActionItems actionItems} : object[]</li>
 * <li>{@link #getFormatString formatString} : any</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.controls.common.BaseControl#constructor sap.viz.ui5.controls.common.BaseControl}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Viz Chart Popover
 * @extends sap.viz.ui5.controls.common.BaseControl
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.22.0
 * @experimental Since version 1.22.0. 
 * API is not finished yet and might change completely
 * @name sap.viz.ui5.controls.Popover
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.controls.common.BaseControl.extend("sap.viz.ui5.controls.Popover", { metadata : {

	publicMethods : [
		// methods
		"connect"
	],
	library : "sap.viz",
	properties : {
		"customDataControl" : {type : "any", group : "", defaultValue : null},
		"actionItems" : {type : "object[]", group : "", defaultValue : null},
		"formatString" : {type : "any", group : "", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.controls.Popover with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.controls.Popover.extend
 * @function
 */


/**
 * Getter for property <code>customDataControl</code>.
 * A callback function let user customize Popover's content panel.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>customDataControl</code>
 * @public
 * @name sap.viz.ui5.controls.Popover#getCustomDataControl
 * @function
 */

/**
 * Setter for property <code>customDataControl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oCustomDataControl  new value for property <code>customDataControl</code>
 * @return {sap.viz.ui5.controls.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.Popover#setCustomDataControl
 * @function
 */


/**
 * Getter for property <code>actionItems</code>.
 * The items of this list or rows of Action List in Home Page inside the Popover.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>actionItems</code>
 * @public
 * @name sap.viz.ui5.controls.Popover#getActionItems
 * @function
 */

/**
 * Setter for property <code>actionItems</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aActionItems  new value for property <code>actionItems</code>
 * @return {sap.viz.ui5.controls.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.Popover#setActionItems
 * @function
 */


/**
 * Getter for property <code>formatString</code>.
 * The patterns used to format each measure displayed in the Popover.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>formatString</code>
 * @public
 * @name sap.viz.ui5.controls.Popover#getFormatString
 * @function
 */

/**
 * Setter for property <code>formatString</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oFormatString  new value for property <code>formatString</code>
 * @return {sap.viz.ui5.controls.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.Popover#setFormatString
 * @function
 */


/**
 * Connect Chart's Popover with VizFrame.
 *
 * @name sap.viz.ui5.controls.Popover#connect
 * @function
 * @param {string} sVizFrameId
 *         Set Uid of VizFrame.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/viz/ui5/controls/Popover.js
jQuery.sap.require('sap.viz.ui5.controls.libs.sap-viz-controls'); // unlisted dependency retained

jQuery.sap.declare("sap.viz.ui5.controls.Popover");
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained

        
sap.viz.ui5.controls.Popover.prototype.init = function() {
  sap.viz.ui5.controls.common.BaseControl.prototype.init.apply(this, arguments);

  this._Popover = undefined;
  this._uid = undefined;
};

sap.viz.ui5.controls.Popover.prototype.exit = function() {
  sap.viz.ui5.controls.common.BaseControl.prototype.exit.apply(this, arguments);
  this._Popover = undefined;
  this._uid = undefined;
};

/**
 * Connect chart Popover with VizFrame. Chart Popover is only supported for VizFrame with 'fiori' type. 
 * It must be called by application. 
 * 
 * Example:
 * <pre>
 * var vizFrame = new sap.viz.ui5.controls.VizFrame({
 * 	'vizType' : 'bar',
 *  'uiConfig' : {
 *     'applicationSet': 'fiori'
 *   }
 * });
 * var vizPopover = new sap.viz.ui5.controls.Popover({});
 * vizPopover.connect(vizFrame.getVizUid());
 * </pre>
 * 
 * @param 
 * 	 {string} uid
 * @public
 * @function sap.viz.ui5.controls.Popover.prototype.connect
 */
sap.viz.ui5.controls.Popover.prototype.connect = function(uid){
  this._uid = uid;
  if(!this._Popover){
    this._createPopover();
  }
  this._Popover.connect(uid);
};

sap.viz.ui5.controls.Popover.prototype.setFormatString = function(fStr) {
	this.setProperty("formatString", fStr);
	if(this._Popover){
		this._Popover.setFormatString(fStr);
	} else {
		this._createPopover();
	}
	return this;
};

sap.viz.ui5.controls.Popover.prototype.setCustomDataControl = function(con){
	this.setProperty('customDataControl', con);
	if(this._Popover){
		this._Popover.setCustomDataControl(con);
	}else{
		this._createPopover();
	}
	return this;
};

sap.viz.ui5.controls.Popover.prototype.setActionItems = function(actionItems){
	this.setProperty('actionItems', actionItems);
	if(this._Popover){
		this._Popover.setActionItems(actionItems);
	}else{
		this._createPopover();
	}
	return this;
};

sap.viz.ui5.controls.Popover.prototype._createPopover = function(){
  this._Popover = new sap.viz.controls.popover.PopOver({
    actionItems : this.getActionItems(),
    customDataControl : this.getCustomDataControl(),
    formatString : this.getFormatString()
  });
  
  this._registerControl('sap.viz.controls.popover.PopOver', this._Popover);
 };

}; // end of sap/viz/ui5/controls/Popover.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.controls.VizFrame') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.controls.VizFrame.
jQuery.sap.declare("sap.viz.ui5.controls.VizFrame");




/**
 * Constructor for a new ui5/controls/VizFrame.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVizType vizType} : string</li>
 * <li>{@link #getVizProperties vizProperties} : object</li>
 * <li>{@link #getVizScales vizScales} : object</li>
 * <li>{@link #getLegendVisible legendVisible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDataset dataset} : sap.viz.ui5.data.Dataset</li>
 * <li>{@link #getFeeds feeds} : sap.viz.ui5.controls.common.feeds.FeedItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.controls.VizFrame#event:renderComplete renderComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.controls.VizFrame#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.controls.VizFrame#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.controls.common.BaseControl#constructor sap.viz.ui5.controls.common.BaseControl}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * VizFrame is a viz control that manages a visualization’s initialization, layout, feeding, customization and interactions.
 * @extends sap.viz.ui5.controls.common.BaseControl
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.22.0
 * @name sap.viz.ui5.controls.VizFrame
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.controls.common.BaseControl.extend("sap.viz.ui5.controls.VizFrame", { metadata : {

	publicMethods : [
		// methods
		"getVizUid", "vizUpdate", "vizSelection", "getResponsiveLegend", "getLegendVisible", "setLegendVisible", "zoom"
	],
	library : "sap.viz",
	properties : {
		"vizType" : {type : "string", group : "Misc", defaultValue : null},
		"vizProperties" : {type : "object", group : "Misc", defaultValue : null},
		"vizScales" : {type : "object", group : "Misc", defaultValue : null},
		"legendVisible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
		"dataset" : {type : "sap.viz.ui5.data.Dataset", multiple : false}, 
		"feeds" : {type : "sap.viz.ui5.controls.common.feeds.FeedItem", multiple : true, singularName : "feed"}
	},
	events : {
		"renderComplete" : {}, 
		"selectData" : {}, 
		"deselectData" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.controls.VizFrame with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.controls.VizFrame.extend
 * @function
 */

sap.viz.ui5.controls.VizFrame.M_EVENTS = {'renderComplete':'renderComplete','selectData':'selectData','deselectData':'deselectData'};


/**
 * Getter for property <code>vizType</code>.
 * Type for viz frame. User can pass 'chartType' or 'info/chartType'. For example both 'bar' and 'info/bar' will create a info bar chart.
 * Supported chart type: column, bar, stacked_bar, stacked_column, line, combination, bullet, bubble, time_bubble, pie,
 * scatter, vertical_bullet, dual_stacked_bar, 100_stacked_bar, 100_dual_stacked_bar, dual_stacked_column, 100_stacked_column,
 * 100_dual_stacked_column, stacked_combination, horizontal_stacked_combination, dual_stacked_combination, dual_horizontal_stacked_combination
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>vizType</code>
 * @public
 * @name sap.viz.ui5.controls.VizFrame#getVizType
 * @function
 */

/**
 * Setter for property <code>vizType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sVizType  new value for property <code>vizType</code>
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#setVizType
 * @function
 */


/**
 * Getter for property <code>vizProperties</code>.
 * Chart properties, refer to chart property doc for more details.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>vizProperties</code>
 * @public
 * @name sap.viz.ui5.controls.VizFrame#getVizProperties
 * @function
 */

/**
 * Setter for property <code>vizProperties</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oVizProperties  new value for property <code>vizProperties</code>
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#setVizProperties
 * @function
 */


/**
 * Getter for property <code>vizScales</code>.
 * Chart scales, refer to chart property doc for more details.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>vizScales</code>
 * @public
 * @since 1.25
 * @name sap.viz.ui5.controls.VizFrame#getVizScales
 * @function
 */

/**
 * Setter for property <code>vizScales</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oVizScales  new value for property <code>vizScales</code>
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @since 1.25
 * @name sap.viz.ui5.controls.VizFrame#setVizScales
 * @function
 */


/**
 * Getter for property <code>legendVisible</code>.
 * Set chart's legend properties.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>legendVisible</code>
 * @public
 * @name sap.viz.ui5.controls.VizFrame#getLegendVisible
 * @function
 */

/**
 * Setter for property <code>legendVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLegendVisible  new value for property <code>legendVisible</code>
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#setLegendVisible
 * @function
 */


/**
 * Getter for aggregation <code>dataset</code>.<br/>
 * Dataset for chart.
 * 
 * @return {sap.viz.ui5.data.Dataset}
 * @public
 * @name sap.viz.ui5.controls.VizFrame#getDataset
 * @function
 */


/**
 * Setter for the aggregated <code>dataset</code>.
 * @param {sap.viz.ui5.data.Dataset} oDataset
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#setDataset
 * @function
 */
	

/**
 * Destroys the dataset in the aggregation 
 * named <code>dataset</code>.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#destroyDataset
 * @function
 */


/**
 * Getter for aggregation <code>feeds</code>.<br/>
 * All feeds for chart.
 * 
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem[]}
 * @public
 * @name sap.viz.ui5.controls.VizFrame#getFeeds
 * @function
 */


/**
 * Inserts a feed into the aggregation named <code>feeds</code>.
 *
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem}
 *          oFeed the feed to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the feed should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the feed is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the feed is inserted at 
 *             the last position        
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#insertFeed
 * @function
 */

/**
 * Adds some feed <code>oFeed</code> 
 * to the aggregation named <code>feeds</code>.
 *
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem}
 *            oFeed the feed to add; if empty, nothing is inserted
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#addFeed
 * @function
 */

/**
 * Removes an feed from the aggregation named <code>feeds</code>.
 *
 * @param {int | string | sap.viz.ui5.controls.common.feeds.FeedItem} vFeed the feed to remove or its index or id
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem} the removed feed or null
 * @public
 * @name sap.viz.ui5.controls.VizFrame#removeFeed
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>feeds</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.viz.ui5.controls.common.feeds.FeedItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.viz.ui5.controls.VizFrame#removeAllFeeds
 * @function
 */

/**
 * Checks for the provided <code>sap.viz.ui5.controls.common.feeds.FeedItem</code> in the aggregation named <code>feeds</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.viz.ui5.controls.common.feeds.FeedItem}
 *            oFeed the feed whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.viz.ui5.controls.VizFrame#indexOfFeed
 * @function
 */
	

/**
 * Destroys all the feeds in the aggregation 
 * named <code>feeds</code>.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#destroyFeeds
 * @function
 */


/**
 * Event fires when the rendering ends.
 *
 * @name sap.viz.ui5.controls.VizFrame#renderComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'renderComplete' event of this <code>sap.viz.ui5.controls.VizFrame</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.controls.VizFrame</code>.<br/> itself. 
 *  
 * Event fires when the rendering ends.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.controls.VizFrame</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#attachRenderComplete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'renderComplete' event of this <code>sap.viz.ui5.controls.VizFrame</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#detachRenderComplete
 * @function
 */

/**
 * Fire event renderComplete to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.controls.VizFrame#fireRenderComplete
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in.
 *
 * @name sap.viz.ui5.controls.VizFrame#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.controls.VizFrame</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.controls.VizFrame</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.controls.VizFrame</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.controls.VizFrame</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.controls.VizFrame#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in
 *
 * @name sap.viz.ui5.controls.VizFrame#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.controls.VizFrame</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.controls.VizFrame</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.controls.VizFrame</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.controls.VizFrame</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.controls.VizFrame#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.controls.VizFrame} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.controls.VizFrame#fireDeselectData
 * @function
 */


/**
 * Uid for viz frame. It supports other controls to connect to a viz instance.
 *
 * @name sap.viz.ui5.controls.VizFrame#getVizUid
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Update viz frame according to a JSON object, it can update css, properties, feeds and data model.
 *
 * @name sap.viz.ui5.controls.VizFrame#vizUpdate
 * @function
 * @param {object} oOJson
 *         A JSON object contains combination of css, properties, feeds and data model.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Selections for the chart instance of the viz frame.
 *
 * @name sap.viz.ui5.controls.VizFrame#vizSelection
 * @function
 * @param {object[]} aAPoints
 *         Some data points of the chart
 * @param {object} oOAction
 *         A flag 'clearSelection', whether to clear previous selection, by default the selection will be incremental selection
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Get ResponsiveLegend Control. (For fiori application set only. It has been deprecated since 1.28.)
 *
 * @name sap.viz.ui5.controls.VizFrame#getResponsiveLegend
 * @function
 * @type void
 * @public
 * @deprecated Since version 1.28. 
 * This API has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Return current legend group visibility.
 *
 * @name sap.viz.ui5.controls.VizFrame#getLegendVisible
 * @function
 * @type boolean
 * @public
 * @since 1.28
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Will respect the setting for all available legends.
 *
 * @name sap.viz.ui5.controls.VizFrame#setLegendVisible
 * @function
 * @param {boolean} bLegendVisible
 *         Set legend visibility.
 * @type object
 * @public
 * @since 1.28
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Will zoom in or out the chart plot area.
 *
 * @name sap.viz.ui5.controls.VizFrame#zoom
 * @function
 * @param {object} oConfig
 *         A configuration object, contains a "direction" attribute with value "in" or "out" indicating zoom to enlarge or shrink respectively. e.g. {direction: "in"}
 * @type void
 * @public
 * @since 1.28
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/viz/ui5/controls/VizFrame.js
jQuery.sap.require('sap.viz.ui5.controls.libs.sap-viz-controls'); // unlisted dependency retained






jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.viz.ui5.controls.libs.resources.css", "/sap.viz.controls.css"));

sap.viz.ui5.controls.VizFrame.prototype.init = function() {
    sap.viz.ui5.controls.common.BaseControl.prototype.init.apply(this, arguments);
    this._vizFrame = null;

    this._onThemeChanged = jQuery.proxy(this._applyTheme, this);
    sap.ui.getCore().attachThemeChanged(this._onThemeChanged);
    this._clearVariables();
    this._requestedVizType = 'info/column';
    this.data("sap-ui-fastnavgroup", "true", true/*Write into DOM*/);
};

sap.viz.ui5.controls.VizFrame.prototype.applySettings = function() {
    sap.ui.core.Control.prototype.applySettings.apply(this, arguments);

    if (!this._vizFrame) {
        this._createVizFrame();
    }
};

sap.viz.ui5.controls.VizFrame.prototype.exit = function() {
    sap.viz.ui5.controls.common.BaseControl.prototype.exit.apply(this, arguments);

    sap.ui.getCore().detachThemeChanged(this._onThemeChanged);
    this._clearVariables();
};

sap.viz.ui5.controls.VizFrame.prototype._clearVariables = function() {
    this._vizFrame$ = null;
    this._vizCreated = false;

    this._clearRequestedProperties();

    this._cachedDataset = null;
};

sap.viz.ui5.controls.VizFrame.prototype._clearRequestedProperties = function() {
    this._requestedVizType = null;
    this._requestedVizProperties = null;
    this._requestedVizScales = null;
    
    var feeds = this.getAggregation('feeds');
    if (feeds && this._vizFrame && this._vizCreated) {
        var vizType = this._getVizType();
        var innerFeeds = this._vizFrame.feeds();
        feeds.forEach(function(feed) {
            // Sync id
            feed.setProperty('uid', sap.viz.api.serialization.feedsIdToBindingId(vizType, feed.getUid()) || feed.getUid(), true);
            // Sync analysis objects as values
            var analysisOjbects = feed.getAnalysisObjects();
            var values = [], resetValues = false;
            innerFeeds.forEach(function(innerFeed) {
                if(feed.getUid() === innerFeed.id()) {
                    resetValues = resetValues || (feed.getValues() ? feed.getValues().length : 0) !== innerFeed.values().length;
                    innerFeed.values().forEach(function(innerAnalysisObject, index) {
                        resetValues = resetValues || analysisOjbects[index].getUid() !== innerAnalysisObject.id();
                        values.push(innerAnalysisObject.id());
                    });
                }
            }.bind(this));
            if (resetValues) {
                feed.setProperty('values', values, true);
            }
        }.bind(this));
    }
};

sap.viz.ui5.controls.VizFrame.prototype.getVizUid = function() {
    if (this._vizFrame) {
        return this._vizFrame.vizUid();
    } else {
        return null;
    }
};

/**
 * Setter for property uiConfig. uiConfig could only set via settings parameter
 * of constructor.
 *
 * uiConfig from base type could config the instance. Supported uiConfig
 * keyword: applicationSet
 *
 * Example:
 *
 * <pre>
 * var vizFrame = new sap.viz.ui5.controls.VizFrame({
 * 	'vizType' : 'bar',
 * 	'uiConfig' : {
 * 		'applicationSet' : 'fiori'
 * 	}
 * });
 * </pre>
 *
 * @param {object}
 *            oUiConfig
 * @returns {sap.viz.ui5.controls.VizFrame}
 * @public
 * @function sap.viz.ui5.controls.VizFrame.prototype.setUiConfig
 */
sap.viz.ui5.controls.VizFrame.prototype.setUiConfig = function(oUiConfig) {
    sap.viz.ui5.controls.common.BaseControl.prototype.setUiConfig.apply(this, arguments);

};
sap.viz.ui5.controls.VizFrame.prototype.getVizType = function() {
    var sVizType = this._getVizType();

    if (sVizType.indexOf('info/') === 0) {
        sVizType = sVizType.substr('info/'.length);
    }

    return sVizType;
};

sap.viz.ui5.controls.VizFrame.prototype._getVizType = function() {
    var sVizType;
    if (this._vizFrame && this._vizFrame.vizType()) {
        sVizType = this._requestedVizType || this._vizFrame.vizType();
    } else {
        sVizType = this._requestedVizType;
    }

    sVizType = sVizType || '';
    sVizType = sVizType.replace('/trellis_', '/');
    return sVizType;
};

/**
 * Setter for property vizType. vizType could only set via settings parameter in Constructor.
 * vizType is a string of supported chart type or extension chart type.
 *  
 * Supported chart types: bubble, combination, column, bar, line, stacked_bar, stacked_column, bullet, vertical_bullet, timebubble. 
 * User can pass 'chartType' or 'info/chartType' for these supported chart types. 
 * 
 * Example:
 * <pre>
 * var vizFrame = new sap.viz.ui5.controls.VizFrame({
 * 	'vizType' : 'bar'
 * });
 * </pre>
 * 
 * For extension chart type, user should load extension js file manually at first.
 * 
 * Example:
 * <pre>
 * var vizFrame = new sap.viz.ui5.controls.VizFrame({
 * 	'vizType' : 'myextension'
 * });
 * </pre>
 * 
 * @param {string}
 *            sVizType
 * @returns {sap.viz.ui5.controls.VizFrame}
 * @public
 * @function sap.viz.ui5.controls.VizFrame.prototype.setVizType
 */
sap.viz.ui5.controls.VizFrame.prototype.setVizType = function(sVizType) {
    var prefix = 'info/';

    if (sap.viz.ui5.controls.VizFrame._isNativeVizType(prefix + sVizType)) {
        // Add prefix automatically
        sVizType = prefix + sVizType;
    }

    if (this._vizFrame && this._vizCreated && !this._pendingRerendering) {
        try {
            this._vizFrame.vizType(sVizType);
        } catch (e) {
            this._requestedVizType = sVizType;
        }
    } else {
        this._requestedVizType = sVizType;
    }
    return this;
};

sap.viz.ui5.controls.VizFrame.prototype.getVizProperties = function() {
    if (this._vizFrame) {
        return this._mergeProperties(this._mergeProperties({}, this._vizFrame.vizProperties() || {}), this._requestedVizProperties || {});
    } else {
        return this._requestedVizProperties;
    }
};

sap.viz.ui5.controls.VizFrame.prototype.getVizScales = function() {
    if (this._vizFrame) {
        return this._vizFrame.vizScales() || this._requestedVizScales;
    } else {
        return this._requestedVizScales;
    }
};

/**
 * Zoom the chart plot.
 *
 * Example:
 * <pre>
 *  var vizFrame = new sap.viz.ui5.controls.VizFrame(...);
 *  vizFrame.zoom({direction: "in"});
 * </pre>
 *
 * @param {object}
 *            contains a "direction" attribute with value "in" or "out" indicating zoom to enlarge or shrink respectively
 * @public
 * @function sap.viz.ui5.controls.VizFrame.prototype.zoom
 */
sap.viz.ui5.controls.VizFrame.prototype.zoom = function(cfg) {
    if (this._vizFrame) {
        this._vizFrame.zoom({
            target: "plotArea",
            direction: cfg.direction
        });
    }
};

/**
 * Properties for viz frame.
 *
 * Example:
 *
 * <pre>
 *  var vizFrame = new sap.viz.ui5.controls.VizFrame(...);
 *  var properties = {
 *      'legend' : { 'visible'; : true }
 * };
 * vizFrame.setVizProperties(properties);
 * </pre>
 *
 * @param {object}
 *            oVizProperties
 * @returns {sap.viz.ui5.controls.VizFrame}
 * @public
 * @function sap.viz.ui5.controls.VizFrame.prototype.setVizProperties
 */
sap.viz.ui5.controls.VizFrame.prototype.setVizProperties = function(oVizProperties) {
    if (this._vizFrame && this._vizCreated && !this._pendingRerendering) {
        try {
            this._vizFrame.vizProperties(oVizProperties);
        } catch (e) {
            this._requestedVizProperties = oVizProperties;
        }
    } else {
        this._requestedVizProperties = this._mergeProperties(this._requestedVizProperties || {}, oVizProperties || {});
        this.invalidate();
    }
    return this;
};

/**
 * Scales for viz frame. 
 *
 * Example:
 *
 * <pre>
 *  var vizFrame = new sap.viz.ui5.controls.VizFrame(...);
 *  var scales = [{
 *      'feed': 'color',
 *      'palette': ['#ff0000']
 * }];
 * vizFrame.setVizScales(scales);
 * </pre>
 *
 * @param {object}
 *            oVizScales
 * @returns {sap.viz.ui5.controls.VizFrame}
 * @public
 * @function sap.viz.ui5.controls.VizFrame.prototype.setVizScales
 */
sap.viz.ui5.controls.VizFrame.prototype.setVizScales = function(oVizScales) {
    if (this._vizFrame && this._vizCreated && !this._pendingRerendering) {
        try {
            this._vizFrame.vizScales(oVizScales);
        } catch (e) {
            this._requestedVizScales = oVizScales;
        }
    } else {
        this._requestedVizScales = jQuery.extend(true, this._requestedVizScales || {}, oVizScales || {});
        this.invalidate();
    }
    return this;
};

/**
 * @public
 */
sap.viz.ui5.controls.VizFrame.prototype.getLegendVisible = function(){
    return this.getVizProperties().legendGroup.computedVisibility;
};

/**
 * @public
 */
sap.viz.ui5.controls.VizFrame.prototype.setLegendVisible = function(visibility){
    this.setVizProperties({
        'legend': {
            'visible' : visibility
        },
        'sizeLegend': {
            'visible' : visibility
        }
    });
    
    return this;
};

/**
 * Selections for viz frame. Example:
 *
 * <pre>
 *  var vizFrame = new sap.viz.ui5.controls.VizFrame(...);
 *  var points = [{
 *      data : {
 *          "Country" : "China",
 *          "Year" : "2001",
 *          "Product" : "Car",
 *          "Profit" : 25
 *      }}, {
 *      data : {
 *      	"Country" : "China",
 *          "Year" : "2001",
 *          "Product" : "Trunk",
 *          "Profit" : 34
 *      }}];
 *  var action = {
 *  	clearSelection : true
 *  };
 * vizFrame.vizSelection(points, action);
 * </pre>
 *
 * @param {object[]}
 *            aPoints some data points of the chart
 * @param {object}
 *            oAction whether to clear previous selection, by default the
 *            selection will be incremental selection
 * @returns {sap.viz.ui5.controls.VizFrame}
 * @public
 * @function sap.viz.ui5.controls.VizFrame.prototype.vizSelection
 */
sap.viz.ui5.controls.VizFrame.prototype.vizSelection = function(aPoints, oAction) {
    if (this._vizFrame && this._vizCreated) {
        try {
            var result = this._vizFrame.vizSelection.apply(this._vizFrame, arguments);
            if (result === this._vizFrame) {
                result = this;
            }
        } catch (e) {
            return null;
        }
        return result;
    } else {
        return null;
    }
};

/**
 * Update viz frame according to a JSON object, it can update css, properties,
 * feeds and data model. Example:
 *
 * <pre>
 * var vizFrame = new sap.viz.ui5.controls.VizFrame(...);
 * var data = {
 *     'path' : "/rawData"
 * };
 * var properties = {
 *     'legend' : {'visible' : true},
 * };
 * var FeedItem = sap.viz.ui5.controls.common.feeds.FeedItem;
 * var feeds = [
 *     new FeedItem({'uid' : 'primaryValues',
 *                   'type' : 'Measure',
 *                   'values' []}),
 *     new FeedItem({'uid' : 'regionColor',
 *                   'type' : 'Dimension',
 *                   'values' []})];
 * vizFrame.vizUpdate({
 *               'data' : data,
 *               'properties' : properties,
 *               'feeds' : feeds
 *           });
 * </pre>
 *
 * @param {object}
 *            oOptions a JSON object contains combination of properties, feeds
 *            and data model.
 * @returns {sap.viz.ui5.controls.VizFrame}
 * @public
 * @function sap.viz.ui5.controls.VizFrame.prototype.vizUpdate
 */
sap.viz.ui5.controls.VizFrame.prototype.vizUpdate = function(oOptions) {
    if (this._vizFrame) {
        if (oOptions.data || oOptions.feeds) {
            // Create requested cache when aggregation changed
            if (oOptions.properties) {
                this._requestedVizProperties = this._mergeProperties(this._requestedVizProperties || {}, oOptions.properties || {});
            }
            if (oOptions.properties) {
                this._requestedVizScales = jQuery.extend(true, this._requestedVizScales || {}, oOptions.scales || {});
            }

            if (oOptions.data) {
                this.setDataset(oOptions.data);
            }
            if (oOptions.feeds) {
                this._setFeeds(oOptions.feeds);
            }
        } else {
            // Call _vizFrame.vizUpdate directly when aggregation not changed
            this._vizFrame.vizUpdate(oOptions);
        }
    }
};

sap.viz.ui5.controls.VizFrame.prototype.getResponsiveLegend = function(){
    if(this._vizFrame){
        return sap.viz.ui5.controls.ResponsiveLegend.createInstance(this._vizFrame.responsiveLegend());
    }
};

sap.viz.ui5.controls.VizFrame.prototype._createVizFrame = function(options) {
    this._applyTheme();

    var VizFrame = sap.viz.controls.frame.VizFrame;
    var GlobalConfig = sap.viz.controls.common.config.GlobalConfig;

    var cssPrefix = 'ui5-viz-controls';
    this._vizFrame$ = jQuery(document.createElement('div'));
    this._vizFrame$.addClass(cssPrefix + '-viz-frame');

    var vizFrameConfig = GlobalConfig.defaultUIConfig(GlobalConfig.DEFAULT_UICONFIG_TYPE_FRAME);
    vizFrameConfig.enableContextMenu = false;
    vizFrameConfig.enableFilterMenu = false;
    vizFrameConfig.enableFilterBar = false;
    vizFrameConfig.enableTitleEditor = false;
    vizFrameConfig.enableSettingButton = false;
    vizFrameConfig.enableFullScreenButton = false;
    vizFrameConfig.enablePlayControl = false;
    vizFrameConfig.controls.chart.enableAxisSplitter = false;
    vizFrameConfig.controls.chart.enableMorphing = false;
    vizFrameConfig.controls.chart.enableTrellis = true;
    vizFrameConfig.controls.contextMenu.menu = [["direction", "stacking"], ["legend", "datalabels"]];

    var uiConfig = this.getUiConfig();
    if (uiConfig) {
        if (uiConfig.applicationSet === 'fiori') {
            vizFrameConfig.enableResponsiveLegend = true;
        	vizFrameConfig.controls.chart.defaultLabelFormatString = null;
        	// Gerneral default properties
            this._mergeProperties(vizFrameConfig.controls.chart.defaultProperties || {}, {
                'tooltip' : {
                    'visible' : false
                },
                'general' : {
                    'groupData' : true
                },
                'plotArea' : {
                    // @formatter:off
                    'colorPalette' : ['sapUiChartPaletteQualitativeHue1',
                                      'sapUiChartPaletteQualitativeHue2',
                                      'sapUiChartPaletteQualitativeHue3',
                                      'sapUiChartPaletteQualitativeHue4',
                                      'sapUiChartPaletteQualitativeHue5',
                                      'sapUiChartPaletteQualitativeHue6',
                                      'sapUiChartPaletteQualitativeHue7',
                                      'sapUiChartPaletteQualitativeHue8',
                                      'sapUiChartPaletteQualitativeHue9',
                                      'sapUiChartPaletteQualitativeHue10',
                                      'sapUiChartPaletteQualitativeHue11'],
                    'primaryValuesColorPalette': ['sapUiChartPaletteSequentialHue1Light1', 
                                        'sapUiChartPaletteSequentialHue1', 
                                        'sapUiChartPaletteSequentialHue1Dark1'],
                    'secondaryValuesColorPalette': ['sapUiChartPaletteSequentialHue2Light1', 
                                        'sapUiChartPaletteSequentialHue2', 
                                        'sapUiChartPaletteSequentialHue2Dark1'],
                    // @formatter:on
                    'isFixedDataPointSize' : true,
                    'dataLabel' : {
                        'hideWhenOverlap' : true,
                        'respectShapeWidth' : true,
                        'style' : {
                            'color' : null
                        }
                    },
                    'dataPointSize' : {
                        'min' : (sap.ui.Device.system.tablet || sap.ui.Device.system.phone) ? 48 : 24,
                        'max' : 96
                    }
                },
                'interaction' : {
                    'behaviorType' : 'sFinBehavior',
                    'selectability' : {
                        'mode' : 'multiple'
                    },
                    'zoom': {
                    	'enablement': 'enabled',
                    	'direction': 'categoryAxis'
                    },
                    'enableKeyboard': true
                },
                'categoryAxis' : {
                    'label' : {
                        'angle' : 45,
                        'rotation' : 'auto'
                    }
                },
                'legendGroup' : {
                    'layout' : {
                        'position' : 'auto',
                        'respectPlotPosition' : false
                    },
                    'forceToShow' : true,
                },
                'legend' : {
                    'isScrollable' : true
                }
            });
            // Specific default properties
            for (var type in vizFrameConfig.controls.chart.specificProperties) {
                var specific = vizFrameConfig.controls.chart.specificProperties[type];
                for (var key in specific) {
                    if (specific[key].gridline) {
                        specific[key].gridline.visible = true;
                    }
                }
            }
        }
    }
    // sap.ui.core.RenderManager.preserveContent
    jQuery(this._app$).attr("data-sap-ui-preserve", true);
    var vizFrame = this._vizFrame = new VizFrame(this._vizFrame$.get(0), vizFrameConfig);
    this._registerControl('sap.viz.controls.frame.VizFrame', this._vizFrame);

    vizFrame.vizOn('selectData', jQuery.proxy(function(e) {
        this.fireEvent("selectData", e);
    }, this));
    vizFrame.vizOn('deselectData', jQuery.proxy(function(e) {
        this.fireEvent("deselectData", e);
    }, this));
    vizFrame.vizOn('initialized', jQuery.proxy(function(e) {
        this.fireEvent("renderComplete", e);
    }, this));

    return vizFrame;
};

sap.viz.ui5.controls.VizFrame.prototype._updateVizFrame = function() {
    var options = {
        'type' : this._getVizType()
    };
    // data & feeds
    var data = this._getVizDataset();
    var feeds = this.getAggregation('feeds');
    if (data && feeds) {
        options.data = data;
        options.feeds = sap.viz.ui5.controls.common.helpers.VizControlsHelper.getFeedInstances(feeds)
    }
    // properties
    if (this._requestedVizProperties) {
        options.properties = this._requestedVizProperties;
    }
    // properties
    if (this._requestedVizScales) {
        options.scales = this._requestedVizScales;
    }    
    // Merger the theme properties and user setting properties;
    options.properties = jQuery.extend(true, sap.viz.ui5.theming.Util.readCSSParameters(this._getVizType()), options.properties || {});

    if (!this._vizCreated) {
        if (options.data && options.feeds) {
            this._vizCreated = true;
            this._vizFrame.createViz(options);
            this._clearRequestedProperties();
        }
    } else {
        this._vizFrame.vizUpdate(options);
        this._clearRequestedProperties();
    }
    
    if (data && data.type === 'sap.viz.api.data.FlatTableDataset' && data.data() && data.data().data.length === 0) {
        this._vizFrame.showMessage('');
    }
};

sap.viz.ui5.controls.VizFrame.prototype._getVizDataset = function() {
    var ds = this.getDataset();
    if (ds) {
        if (this._isExtension()) {
            sap.viz.ui5.controls.common.helpers.VizControlsHelper.updateAxis(ds.getDimensions(), this._getVizType(), this.getAggregation('feeds'));
            return ds.getVIZDataset();
        } else {
            return ds.getVIZFlatDataset();
        }
    } else {
        return null;
    }
};

sap.viz.ui5.controls.VizFrame.prototype._createChildren = function() {
    this._vizFrame$.appendTo(this._app$);
    this._updateVizFrame();
};

sap.viz.ui5.controls.VizFrame.prototype._updateChildren = function() {
    this._updateVizFrame();
};

sap.viz.ui5.controls.VizFrame.prototype._setFeeds = function(aFeeds) {
    this.destroyFeeds();
    if (aFeeds && aFeeds.length) {
        for (var i = 0; i < aFeeds.length; i++) {
            this.addFeed(aFeeds[i]);
        }
    }
    return this;
};

sap.viz.ui5.controls.VizFrame.prototype._applyTheme = function() {
};

sap.viz.ui5.controls.VizFrame.prototype._validateSize = function() {
    if (!this._app$ || !this.$()) {
        return;
    }

    var appSize = {
        'width' : this.$().width(),
        'height' : this.$().height()
    };

    if (this._vizFrame) {
    	var size = this._vizFrame.size();
    	if (!size || size.width !== appSize.width || size.height !== appSize.height) {
	        this._vizFrame.size({
	            'width' : appSize.width,
	            'height' : appSize.height
	        });
    	}
    } else {
        this._vizFrame$.css({
            'width' : appSize.width + 'px',
            'height' : appSize.height + 'px'
        });
    }
};

sap.viz.ui5.controls.VizFrame.prototype._isExtension = function() {
    return !sap.viz.ui5.controls.VizFrame._isNativeVizType(this._getVizType());
};
sap.viz.ui5.controls.VizFrame._isNativeVizType = function(vizType) {
    // @formatter:off
    return jQuery.inArray(vizType,
            [ 'info/column', 'info/bar', 'info/stacked_bar',
              'info/stacked_column', 'info/line', 'info/combination',
              'info/bullet', 'info/bubble', 'info/time_bubble', 
              "info/pie", "info/scatter", "info/vertical_bullet", 
              "info/dual_stacked_bar", "info/100_stacked_bar", "info/100_dual_stacked_bar", 
              "info/dual_stacked_column", "info/100_stacked_column", "info/100_dual_stacked_column", 
              "info/stacked_combination", "info/horizontal_stacked_combination", "info/dual_stacked_combination", 
              "info/dual_horizontal_stacked_combination"]) !== -1;
    // @formatter:on
};
sap.viz.ui5.controls.VizFrame.prototype._mergeProperties = function(target, properties) {
    return jQuery.extend(true, target, properties);
};

}; // end of sap/viz/ui5/controls/VizFrame.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.core.BaseChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.core.BaseChart.
jQuery.sap.declare("sap.viz.ui5.core.BaseChart");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui5/core/BaseChart.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '640px')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '480px')</li>
 * <li>{@link #getCss css} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDataset dataset} : sap.viz.ui5.data.Dataset</li>
 * <li>{@link #getNoData noData} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.core.BaseChart#event:beforeCreateViz beforeCreateViz} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An abstract base class for all VIZ charts
 * @extends sap.ui.core.Control
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.core.BaseChart
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.viz.ui5.core.BaseChart", { metadata : {

	"abstract" : true,
	library : "sap.viz",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '640px'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '480px'},
		"css" : {type : "string", group : "Appearance", defaultValue : null}
	},
	aggregations : {
		"dataset" : {type : "sap.viz.ui5.data.Dataset", multiple : false}, 
		"noData" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"beforeCreateViz" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.core.BaseChart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.core.BaseChart.extend
 * @function
 */

sap.viz.ui5.core.BaseChart.M_EVENTS = {'beforeCreateViz':'beforeCreateViz'};


/**
 * Getter for property <code>width</code>.
 * Width of the Chart as a CSS size.
 *
 * Default value is <code>640px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.viz.ui5.core.BaseChart#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>640px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the Chart as a CSS size.
 *
 * Default value is <code>480px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.viz.ui5.core.BaseChart#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>480px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#setHeight
 * @function
 */


/**
 * Getter for property <code>css</code>.
 * CSS style of Chart.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>css</code>
 * @public
 * @name sap.viz.ui5.core.BaseChart#getCss
 * @function
 */

/**
 * Setter for property <code>css</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCss  new value for property <code>css</code>
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#setCss
 * @function
 */


/**
 * Getter for aggregation <code>dataset</code>.<br/>
 * Dataset for this chart
 * 
 * @return {sap.viz.ui5.data.Dataset}
 * @public
 * @name sap.viz.ui5.core.BaseChart#getDataset
 * @function
 */


/**
 * Setter for the aggregated <code>dataset</code>.
 * @param {sap.viz.ui5.data.Dataset} oDataset
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#setDataset
 * @function
 */
	

/**
 * Destroys the dataset in the aggregation 
 * named <code>dataset</code>.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#destroyDataset
 * @function
 */


/**
 * Getter for aggregation <code>noData</code>.<br/>
 * Control tree to display when there is no data available
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.viz.ui5.core.BaseChart#getNoData
 * @function
 */


/**
 * Setter for the aggregated <code>noData</code>.
 * @param {sap.ui.core.Control} oNoData
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#setNoData
 * @function
 */
	

/**
 * Destroys the noData in the aggregation 
 * named <code>noData</code>.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#destroyNoData
 * @function
 */


/**
 * Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value for the parameter with the same name of the createViz call.
 *
 * @name sap.viz.ui5.core.BaseChart#beforeCreateViz
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.usrOptions Value for the parameter with the same name of the createViz call.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeCreateViz' event of this <code>sap.viz.ui5.core.BaseChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.core.BaseChart</code>.<br/> itself. 
 *  
 * Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value for the parameter with the same name of the createViz call.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.core.BaseChart</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#attachBeforeCreateViz
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeCreateViz' event of this <code>sap.viz.ui5.core.BaseChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.core.BaseChart#detachBeforeCreateViz
 * @function
 */

/**
 * Fire event beforeCreateViz to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'usrOptions' of type <code>object</code> Value for the parameter with the same name of the createViz call.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.core.BaseChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.core.BaseChart#fireBeforeCreateViz
 * @function
 */

// Start of sap/viz/ui5/core/BaseChart.js
jQuery.sap.require('sap.viz.libs.sap-viz'); // unlisted dependency retained



jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.viz.ui5.core.BaseChart.prototype._getSapVizCSS = function() {
  //@Alex Su: To be compatible with the less mode, the way is to load a css file by an ajax request and use less.Parser to parse it on fly.
  var sCSSText,sCSSUrl,sCSSContent;
  var oLink = jQuery.sap.domById("sap-ui-theme-sap.viz");
  if ( oLink ) {
    sCSSUrl = oLink.href;
    sCSSText = jQuery.sap.syncGetText(sCSSUrl+ "?", undefined, undefined);
    if (!sCSSText){
      sCSSText = "";
    }
  } 
  if (this.getCss()){
  	sCSSContent = sCSSText + this.getCss();
  }
  return sCSSContent;
};

sap.viz.ui5.core.BaseChart.prototype._getMergedChartOptions = function (){
  var usrOptions = this._getOptions();
  //work around for axis line and grid line, will be removed in next push
  var gridlineColor = sap.ui.core.theming.Parameters.get('sapVizChartAxisGridlineColor');
  var axislineColor = sap.ui.core.theming.Parameters.get('sapVizChartAxisColor');
  var cssOptions = {
      xAxis:{
        gridline:{
          color:gridlineColor
        }
      },
      yAxis:{
        gridline:{
          color:gridlineColor
        }
      }
  };
  var chartType = this.getVIZChartType();
  switch (chartType){
  case "viz/dual_bar":
    cssOptions.yAxis.color = axislineColor;
    break;
  case "viz/dual_combination":
  case "viz/dual_line":
  case "viz/dual_stacked_column":
  case "viz/100_dual_stacked_column":
  case "viz/dual_column":
    cssOptions.xAxis.color = axislineColor;
    break;
  default:
    cssOptions.xAxis.color = axislineColor;
    cssOptions.yAxis.color = axislineColor;
    break;
  }
  return jQuery.extend(true, cssOptions, usrOptions);
};

sap.viz.ui5.core.BaseChart.prototype._unregisterListener = function (){
  if ( this._sResizeListenerId ) {
    sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
    delete this._sResizeListenerId;
  }  
};

sap.viz.ui5.core.BaseChart.prototype._registerListener = function (){
  this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this) );
};

sap.viz.ui5.core.BaseChart.prototype._renderChart = function (){
  //TODO How to define feeding API?
  if ( !sap.viz.__svg_support || !this.getDataset() || !this.getDataset().getVIZDataset() ) {
    return;
  }

  // properly clean up an existing VIZ instance
  if ( this._oVIZInstance ) {
    this._oVIZInstance.destroy();
    delete this._oVIZInstance;
  }
  
  var cssSettings = this._getSapVizCSS();

  var chartOptions = this._getMergedChartOptions();
  
  // collect the options for the new VIZ instance
  var oUsrOptions = {
    type : this.getVIZChartType(),
    data : this.getDataset().getVIZDataset(),
    container : this.getDomRef(),
    options : chartOptions,
    css : cssSettings
   };

  // fire event to allow apps to enhance the options. This might change the options!
  this.fireBeforeCreateViz({
    usrOptions : oUsrOptions
  });
  
  // create a VIZ chart out of it
  this._oVIZInstance = sap.viz.core.createViz(oUsrOptions); 

  // attach event listeners to the VIZ instance
  var that = this;
  jQuery.sap.forIn(this._mVIZHandler, function(sName, fnHandler) {
    that._oVIZInstance.on(sName + sap.viz.ui5.core.BaseChart.EVENT_SUFFIX, fnHandler);
  });

  
};

sap.viz.ui5.core.BaseChart.prototype.init = function() {
	//sap.ui.core.Control.prototype.init.call(this);
	sap.viz._initializeVIZ();
	this._mVIZHandler = {};
};

sap.viz.ui5.core.BaseChart.prototype.exit = function() {
	// unregister from resize handler
  this._unregisterListener();
  // properly clean up an existing VIZ instance
	if ( this._oVIZInstance ) {
		this._oVIZInstance.destroy();
		delete this._oVIZInstance;
	}
};

sap.viz.ui5.core.BaseChart.prototype.onBeforeRendering = function() {
  this._unregisterListener();
};

sap.viz.ui5.core.BaseChart.prototype.onAfterRendering = function() {
  this._renderChart();
  this._registerListener();
};

sap.viz.ui5.core.BaseChart.prototype.onresize = function(o) {
	// retrieve new size and set it for the viz charts
	var size = {width : this.$().width(), height: this.$().height()};
	if ( this.getDomRef() && this._oVIZInstance ) {
		this._oVIZInstance.size(size);
	}
};

/**
 * Set chart's default selection.
 * 
 * @param {object[]} Array of default selection info
 * @deprecated Since 1.19.
 * Please use selection API {sap.viz.ui5.core.BaseChart.prototype.selection}.
 * @public
 */
sap.viz.ui5.core.BaseChart.prototype.setDefaultSelection = function(selectionInfos) {
  // retrieve new size and set it for the viz charts
  var ds = this.getDataset();
  if(ds){
    var vizds = this.getDataset().getVIZDataset();
    if(vizds){
      vizds.info({
        'type' : 'defaultSelection',
        'value' : selectionInfos
      });
      if(this._oVIZInstance){
        this._oVIZInstance.data(vizds);
      }
    }
  }
};

sap.viz.ui5.core.BaseChart.prototype.onThemeChanged = function (o){
  if (! this.getDomRef()){
    return;
  } 
  this._renderChart();
};

sap.viz.ui5.core.BaseChart.prototype.onLocalizationChanged = function (o){
  if (! this.getDomRef()){
    return;
  } 
  this._renderChart();
};

sap.viz.ui5.core.BaseChart.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple) {
	if ( sAggregationName === "interaction" ) {
		// can convert types in the following case
		// - if a chart receives a controller.Interaction (e.g. via XMLView using old namespaces)
		oObject = sap.viz.ui5.core.BaseStructuredType._convertAggregatedObject.call(this, sAggregationName, oObject, bMultiple);
	}
	return sap.ui.core.Control.prototype.validateAggregation.call(this, sAggregationName, oObject, bMultiple);
};

sap.viz.ui5.core.BaseChart.EVENT_SUFFIX = ".sap.viz.ui5.core";
sap.viz.ui5.core.BaseChart.prototype._getOrCreate = sap.viz.ui5.core.BaseStructuredType.prototype._getOrCreate;

sap.viz.ui5.core.BaseChart.prototype._getOptions = sap.viz.ui5.core.BaseStructuredType.prototype._getOptions;

sap.viz.ui5.core.BaseChart.prototype._attachVIZEvent = function(sName, oData, fnHandler, oListener) {
	var that=this;
	if ( !this.hasListeners(sName) ) {
		this._mVIZHandler[sName] = function(o) {
			that.fireEvent(sName, o);
		}
		if ( this._oVIZInstance ) {
			this._oVIZInstance.on(sName + sap.viz.ui5.core.BaseChart.EVENT_SUFFIX, this._mVIZHandler[sName]);
		}
	}
	sap.ui.core.Control.prototype.attachEvent.apply(this, arguments);
	return this;
};

sap.viz.ui5.core.BaseChart.prototype._detachVIZEvent = function(sName, oData, fnHandler, oListener) {
	sap.ui.core.Control.prototype.detachEvent.apply(this, arguments);
	if ( !this.hasListeners(sName) ) {
		if ( this._oVIZInstance ) {
			this._oVIZInstance.on(sName + sap.viz.ui5.core.BaseChart.EVENT_SUFFIX, null);
		}
		delete this._mVIZHandler[sName];
	}
  return this;
};

sap.viz.ui5.core.BaseChart.prototype.getVIZInstance = function() {
	return this._oVIZInstance || null;
};

/**
 * Get/Set selected data points. 
 * To get selection, please use selection() or selection(Options). 
 * To set selection, please use selection(selectionPoint), or selection(selectionPoint, Options)
 * 
 * 
 * @param {object[]} [selectionPoint]
 *       Array of Objects with either data or ctx should be set Points. Each point is
 *<pre>
 * {
 *    data: {key: "value", ...},//optional
 *    ctx:  [{mi: 0, ...}, {...}, ...], // optional. It takes higher priority when both parameters of 'data' and 'ctx' are used. 
 * }
 *</pre>
 *       Either data or ctx should be set.
 * @param {object} options
 *       selection options.
 *       Parameters used in getting data points from selection 
 *<pre> 
 *       {
 *           "withDataCtx": Boolean, // optional. Default value is false.
 *           "withInfo": Boolean, // optional. Default value is false. 
 *       }
 *</pre>
 *       Parameters used to set data points to be selected   
 *<pre>
 *       {
 *           "selectionMode": "inclusive" or "exclusive" // optional. Default value keeps the same as the selection mode 
 *                                                       // set by chart property of "interaction -> selectablity -> mode".
 *                                                       // It takes higher priority when both parameters of 'clearSelection' 
 *                                                       // and 'selectionMode' are used. 
 *           "clearSelection": Boolean // Optional, deprecated parameter. 'selectionMode' is to replace this parameter. 
 *                                     // Use 'clearSelection' for backward-compatibility only.
 *       }
 *</pre>
 * @returns {object[]} | {boolean} 
 *      Array of Points(for getting selection). Each point is
 *<pre>
 *      {
 *          "data": {key: 'value', ...},
 *          "ctx":  [{mi: 0, ...}, {...}, ...], // optional. Depends on "withDataCtx".
 *          "info":  [{type: 'additionalData', ...}, {...}, ...], // optional. Depends on "withInfo".
 *      }
 *</pre>
 *      or Boolean (for setting selection)
 *           True means setting selection is successful.
 *           False means setting selection is unsuccessful.
 * @public
 */
sap.viz.ui5.core.BaseChart.prototype.selection = function(selectionPoint, options){
  if(this._oVIZInstance){
    return this._oVIZInstance.selection.apply(this._oVIZInstance, arguments);
  }
};

}; // end of sap/viz/ui5/core/BaseChart.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Area') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Area.
jQuery.sap.declare("sap.viz.ui5.Area");




/**
 * Constructor for a new ui5/Area.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Area#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Area
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Area
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Area", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Area", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Area with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Area.extend
 * @function
 */

sap.viz.ui5.Area.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Area#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Area#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Area#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Area#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Area#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Area#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Area#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Area#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Area#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Area#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Area#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * 
 * @return {sap.viz.ui5.types.Area}
 * @public
 * @name sap.viz.ui5.Area#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Area} oPlotArea
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Area#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Area</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Area#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Area#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Area</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Area#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Area#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Area#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Area</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Area#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Area</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Area</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Area#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Area.js
sap.viz.ui5.Area.prototype.getVIZChartType = function() {
  return "viz/area";
};

sap.viz.ui5.Area.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Area.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Area.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Area.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Area.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Area.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Area.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Area.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Area.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Area.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Area.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Area.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Area.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Area.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Area.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Area100') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Area100.
jQuery.sap.declare("sap.viz.ui5.Area100");




/**
 * Constructor for a new ui5/Area100.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Area100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Area100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Area100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Area100
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Area100", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Area", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Area100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Area100.extend
 * @function
 */

sap.viz.ui5.Area100.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Area100#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Area100#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Area100#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Area100#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Area100#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Area100#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Area100#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Area100#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Area100#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Area100#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Area100#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * 
 * @return {sap.viz.ui5.types.Area}
 * @public
 * @name sap.viz.ui5.Area100#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Area} oPlotArea
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Area100#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Area100#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Area100#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Area100#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Area100#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area100#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area100#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area100#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Area100#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area100#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area100#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Area100#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Area100#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Area100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Area100</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Area100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Area100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Area100#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Area100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Area100#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Area100.js
sap.viz.ui5.Area100.prototype.getVIZChartType = function() {
  return "viz/100_area";
};

sap.viz.ui5.Area100.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Area100.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Area100.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Area100.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Area100.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Area100.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Area100.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Area100.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Area100.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Area100.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Area100.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Area100.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Area100.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Area100.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Area100.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Bar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Bar.
jQuery.sap.declare("sap.viz.ui5.Bar");




/**
 * Constructor for a new ui5/Bar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Bar#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bar#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Bar
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Bar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Bar", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Bar", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Bar.extend
 * @function
 */

sap.viz.ui5.Bar.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Bar#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Bar#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Bar#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Bar#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Bar#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Bar#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Bar#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Bar#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Bar#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Bar#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Bar#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bar
 * 
 * @return {sap.viz.ui5.types.Bar}
 * @public
 * @name sap.viz.ui5.Bar#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Bar} oPlotArea
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Bar#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bar#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Bar#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bar#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Bar#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bar#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bar#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bar#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Bar#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bar#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bar#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bar#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Bar#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Bar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bar</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Bar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bar#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bar#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Bar.js
sap.viz.ui5.Bar.prototype.getVIZChartType = function() {
  return "viz/bar";
};

sap.viz.ui5.Bar.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Bar.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Bar.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Bar.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Bar.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Bar.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Bar.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Bar.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Bar.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Bar.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Bar.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Bar.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Bar.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Bar.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Bar.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Bubble') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Bubble.
jQuery.sap.declare("sap.viz.ui5.Bubble");




/**
 * Constructor for a new ui5/Bubble.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getSizeLegend sizeLegend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bubble</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Bubble#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bubble#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Bubble
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Bubble
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Bubble", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"sizeLegend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Bubble", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Bubble with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Bubble.extend
 * @function
 */

sap.viz.ui5.Bubble.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Bubble#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Bubble#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Bubble#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Bubble#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>sizeLegend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Bubble#getSizeLegend
 * @function
 */


/**
 * Setter for the aggregated <code>sizeLegend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oSizeLegend
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setSizeLegend
 * @function
 */
	

/**
 * Destroys the sizeLegend in the aggregation 
 * named <code>sizeLegend</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroySizeLegend
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Bubble#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Bubble#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Bubble#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Bubble#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Bubble#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bubble
 * 
 * @return {sap.viz.ui5.types.Bubble}
 * @public
 * @name sap.viz.ui5.Bubble#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Bubble} oPlotArea
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Bubble#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Bubble#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#destroyInteraction
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Bubble#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bubble#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Bubble#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bubble#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Bubble#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bubble#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bubble#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bubble#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Bubble#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bubble#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bubble#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bubble#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Bubble#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Bubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bubble</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Bubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bubble#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bubble} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bubble#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Bubble.js
sap.viz.ui5.Bubble.prototype.getVIZChartType = function() {
  return "viz/bubble";
};

sap.viz.ui5.Bubble.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Bubble.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Bubble.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Bubble.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Bubble.prototype.getSizeLegend = function() {
  return this._getOrCreate("sizeLegend");
}
sap.viz.ui5.Bubble.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Bubble.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Bubble.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Bubble.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Bubble.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Bubble.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Bubble.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Bubble.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Bubble.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Bubble.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Bubble.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Bullet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Bullet.
jQuery.sap.declare("sap.viz.ui5.Bullet");




/**
 * Constructor for a new ui5/Bullet.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bullet</li>
 * <li>{@link #getXAxis2 xAxis2} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Bullet#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bullet#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bullet#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bullet#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Bullet#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Bullet
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Bullet
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Bullet", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Bullet", multiple : false}, 
		"xAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Bullet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Bullet.extend
 * @function
 */

sap.viz.ui5.Bullet.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Bullet#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Bullet#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Bullet#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Bullet#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Bullet#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Bullet#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Bullet#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bullet
 * 
 * @return {sap.viz.ui5.types.Bullet}
 * @public
 * @name sap.viz.ui5.Bullet#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Bullet} oPlotArea
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>xAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Bullet#getXAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis2
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setXAxis2
 * @function
 */
	

/**
 * Destroys the xAxis2 in the aggregation 
 * named <code>xAxis2</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyXAxis2
 * @function
 */


/**
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Bullet#getYAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis2
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#setYAxis2
 * @function
 */
	

/**
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#destroyYAxis2
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Bullet#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Bullet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bullet</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bullet</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Bullet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bullet#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Bullet#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Bullet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bullet</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bullet</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Bullet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bullet#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Bullet#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Bullet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bullet</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bullet</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bullet#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Bullet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bullet#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bullet#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Bullet#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Bullet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bullet</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bullet</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bullet#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Bullet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bullet#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Bullet#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Bullet#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Bullet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Bullet</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Bullet</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Bullet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Bullet#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Bullet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Bullet#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Bullet.js
sap.viz.ui5.Bullet.prototype.getVIZChartType = function() {
  return "viz/bullet";
};

sap.viz.ui5.Bullet.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Bullet.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Bullet.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Bullet.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Bullet.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Bullet.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Bullet.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Bullet.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Bullet.prototype.getXAxis2 = function() {
  return this._getOrCreate("xAxis2");
}
sap.viz.ui5.Bullet.prototype.getYAxis2 = function() {
  return this._getOrCreate("yAxis2");
}
sap.viz.ui5.Bullet.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Bullet.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Bullet.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Column') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Column.
jQuery.sap.declare("sap.viz.ui5.Column");




/**
 * Constructor for a new ui5/Column.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.VerticalBar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Column#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Column#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Column
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Column
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Column", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.VerticalBar", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Column with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Column.extend
 * @function
 */

sap.viz.ui5.Column.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Column#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Column#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Column#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Column#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Column#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Column#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Column#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Column#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Column#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Column#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Column#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.verticalbar
 * 
 * @return {sap.viz.ui5.types.VerticalBar}
 * @public
 * @name sap.viz.ui5.Column#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.VerticalBar} oPlotArea
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Column#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Column</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Column#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Column#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Column</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Column#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Column#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Column#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Column#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Column#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Column#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Column#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Column</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Column#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Column#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Column#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Column</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Column</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Column</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Column</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Column#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Column} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Column#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Column.js
sap.viz.ui5.Column.prototype.getVIZChartType = function() {
  return "viz/column";
};

sap.viz.ui5.Column.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Column.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Column.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Column.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Column.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Column.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Column.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Column.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Column.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Column.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Column.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Column.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Column.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Column.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Column.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Combination') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Combination.
jQuery.sap.declare("sap.viz.ui5.Combination");




/**
 * Constructor for a new ui5/Combination.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Combination</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Combination#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Combination#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Combination
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Combination
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Combination", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Combination", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Combination with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Combination.extend
 * @function
 */

sap.viz.ui5.Combination.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Combination#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Combination#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Combination#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Combination#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Combination#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Combination#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Combination#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Combination#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Combination#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Combination#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Combination#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.combination
 * 
 * @return {sap.viz.ui5.types.Combination}
 * @public
 * @name sap.viz.ui5.Combination#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Combination} oPlotArea
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Combination#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Combination#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Combination#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Combination#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Combination#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Combination#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Combination#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Combination#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Combination#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Combination#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Combination#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Combination#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Combination#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Combination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Combination</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Combination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Combination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Combination#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Combination} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Combination#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Combination.js
sap.viz.ui5.Combination.prototype.getVIZChartType = function() {
  return "viz/combination";
};

sap.viz.ui5.Combination.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Combination.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Combination.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Combination.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Combination.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Combination.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Combination.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Combination.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Combination.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Combination.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Combination.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Combination.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Combination.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Combination.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Combination.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Donut') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Donut.
jQuery.sap.declare("sap.viz.ui5.Donut");




/**
 * Constructor for a new ui5/Donut.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Pie</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataTransform dataTransform} : sap.viz.ui5.types.Datatransform</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Donut#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Donut#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Donut
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Donut
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Donut", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Pie", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"dataTransform" : {type : "sap.viz.ui5.types.Datatransform", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Donut with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Donut.extend
 * @function
 */

sap.viz.ui5.Donut.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Donut#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Donut#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Donut#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Donut#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Donut#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.pie
 * 
 * @return {sap.viz.ui5.types.Pie}
 * @public
 * @name sap.viz.ui5.Donut#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Pie} oPlotArea
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Donut#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Donut#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Donut#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>dataTransform</code>.<br/>
 * Module sap.viz.modules.datatransform
 * 
 * @return {sap.viz.ui5.types.Datatransform}
 * @public
 * @name sap.viz.ui5.Donut#getDataTransform
 * @function
 */


/**
 * Setter for the aggregated <code>dataTransform</code>.
 * @param {sap.viz.ui5.types.Datatransform} oDataTransform
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#setDataTransform
 * @function
 */
	

/**
 * Destroys the dataTransform in the aggregation 
 * named <code>dataTransform</code>.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#destroyDataTransform
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Donut#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Donut#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Donut#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Donut#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Donut#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Donut#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Donut#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Donut#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Donut#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Donut#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Donut#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Donut#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Donut#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Donut</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Donut</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Donut</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Donut</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Donut#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Donut} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Donut#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Donut.js
sap.viz.ui5.Donut.prototype.getVIZChartType = function() {
  return "viz/donut";
};

sap.viz.ui5.Donut.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Donut.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Donut.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Donut.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Donut.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Donut.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Donut.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Donut.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Donut.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Donut.prototype.getDataTransform = function() {
  return this._getOrCreate("dataTransform");
}
sap.viz.ui5.Donut.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Donut.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Donut.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.DualBar.
jQuery.sap.declare("sap.viz.ui5.DualBar");




/**
 * Constructor for a new ui5/DualBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bar</li>
 * <li>{@link #getXAxis2 xAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualBar#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualBar#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/DualBar
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.DualBar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.DualBar", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Bar", multiple : false}, 
		"xAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.DualBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.DualBar.extend
 * @function
 */

sap.viz.ui5.DualBar.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.DualBar#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.DualBar#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.DualBar#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.DualBar#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.DualBar#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.DualBar#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.DualBar#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.DualBar#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualBar#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualBar#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.DualBar#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bar
 * 
 * @return {sap.viz.ui5.types.Bar}
 * @public
 * @name sap.viz.ui5.DualBar#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Bar} oPlotArea
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>xAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualBar#getXAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis2
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#setXAxis2
 * @function
 */
	

/**
 * Destroys the xAxis2 in the aggregation 
 * named <code>xAxis2</code>.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#destroyXAxis2
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.DualBar#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualBar#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.DualBar#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualBar#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.DualBar#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualBar#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualBar#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualBar#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.DualBar#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualBar#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualBar#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualBar#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.DualBar#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualBar</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualBar</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualBar#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualBar#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/DualBar.js
sap.viz.ui5.DualBar.prototype.getVIZChartType = function() {
  return "viz/dual_bar";
};

sap.viz.ui5.DualBar.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.DualBar.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.DualBar.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.DualBar.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.DualBar.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.DualBar.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.DualBar.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.DualBar.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.DualBar.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.DualBar.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.DualBar.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.DualBar.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.DualBar.prototype.getXAxis2 = function() {
  return this._getOrCreate("xAxis2");
}
sap.viz.ui5.DualBar.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.DualBar.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/DualBar.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualColumn') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.DualColumn.
jQuery.sap.declare("sap.viz.ui5.DualColumn");




/**
 * Constructor for a new ui5/DualColumn.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.VerticalBar</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualColumn#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualColumn#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/DualColumn
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.DualColumn
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.DualColumn", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.VerticalBar", multiple : false}, 
		"yAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.DualColumn with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.DualColumn.extend
 * @function
 */

sap.viz.ui5.DualColumn.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.DualColumn#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.DualColumn#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.DualColumn#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.DualColumn#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.DualColumn#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.DualColumn#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.DualColumn#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.DualColumn#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualColumn#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualColumn#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.DualColumn#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.verticalbar
 * 
 * @return {sap.viz.ui5.types.VerticalBar}
 * @public
 * @name sap.viz.ui5.DualColumn#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.VerticalBar} oPlotArea
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualColumn#getYAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis2
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#setYAxis2
 * @function
 */
	

/**
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#destroyYAxis2
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.DualColumn#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualColumn#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.DualColumn#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualColumn#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.DualColumn#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualColumn#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualColumn#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualColumn#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.DualColumn#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualColumn#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualColumn#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualColumn#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.DualColumn#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualColumn#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualColumn#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/DualColumn.js
sap.viz.ui5.DualColumn.prototype.getVIZChartType = function() {
  return "viz/dual_column";
};

sap.viz.ui5.DualColumn.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.DualColumn.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.DualColumn.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.DualColumn.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.DualColumn.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.DualColumn.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.DualColumn.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.DualColumn.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.DualColumn.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.DualColumn.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.DualColumn.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.DualColumn.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.DualColumn.prototype.getYAxis2 = function() {
  return this._getOrCreate("yAxis2");
}
sap.viz.ui5.DualColumn.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.DualColumn.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/DualColumn.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualCombination') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.DualCombination.
jQuery.sap.declare("sap.viz.ui5.DualCombination");




/**
 * Constructor for a new ui5/DualCombination.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Combination</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualCombination#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualCombination#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/DualCombination
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.DualCombination
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.DualCombination", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Combination", multiple : false}, 
		"yAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.DualCombination with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.DualCombination.extend
 * @function
 */

sap.viz.ui5.DualCombination.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.DualCombination#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.DualCombination#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.DualCombination#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.DualCombination#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.DualCombination#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.DualCombination#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.DualCombination#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.DualCombination#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualCombination#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualCombination#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.DualCombination#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.combination
 * 
 * @return {sap.viz.ui5.types.Combination}
 * @public
 * @name sap.viz.ui5.DualCombination#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Combination} oPlotArea
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualCombination#getYAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis2
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#setYAxis2
 * @function
 */
	

/**
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#destroyYAxis2
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.DualCombination#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualCombination#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.DualCombination#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualCombination#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.DualCombination#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualCombination#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualCombination#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualCombination#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.DualCombination#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualCombination#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualCombination#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualCombination#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.DualCombination#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualCombination</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualCombination</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualCombination#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualCombination} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualCombination#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/DualCombination.js
sap.viz.ui5.DualCombination.prototype.getVIZChartType = function() {
  return "viz/dual_combination";
};

sap.viz.ui5.DualCombination.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.DualCombination.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.DualCombination.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.DualCombination.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.DualCombination.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.DualCombination.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.DualCombination.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.DualCombination.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.DualCombination.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.DualCombination.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.DualCombination.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.DualCombination.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.DualCombination.prototype.getYAxis2 = function() {
  return this._getOrCreate("yAxis2");
}
sap.viz.ui5.DualCombination.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.DualCombination.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/DualCombination.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.DualLine.
jQuery.sap.declare("sap.viz.ui5.DualLine");




/**
 * Constructor for a new ui5/DualLine.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Line</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualLine#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualLine#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/DualLine
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.DualLine
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.DualLine", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Line", multiple : false}, 
		"yAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.DualLine with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.DualLine.extend
 * @function
 */

sap.viz.ui5.DualLine.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.DualLine#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.DualLine#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.DualLine#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.DualLine#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.DualLine#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.DualLine#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.DualLine#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.DualLine#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualLine#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualLine#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.DualLine#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.line
 * 
 * @return {sap.viz.ui5.types.Line}
 * @public
 * @name sap.viz.ui5.DualLine#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Line} oPlotArea
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualLine#getYAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis2
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#setYAxis2
 * @function
 */
	

/**
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#destroyYAxis2
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.DualLine#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualLine#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.DualLine#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualLine#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.DualLine#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualLine#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualLine#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualLine#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.DualLine#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualLine#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualLine#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualLine#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.DualLine#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualLine</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualLine</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualLine</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualLine</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualLine#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualLine} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualLine#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/DualLine.js
sap.viz.ui5.DualLine.prototype.getVIZChartType = function() {
  return "viz/dual_line";
};

sap.viz.ui5.DualLine.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.DualLine.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.DualLine.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.DualLine.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.DualLine.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.DualLine.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.DualLine.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.DualLine.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.DualLine.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.DualLine.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.DualLine.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.DualLine.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.DualLine.prototype.getYAxis2 = function() {
  return this._getOrCreate("yAxis2");
}
sap.viz.ui5.DualLine.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.DualLine.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/DualLine.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualStackedColumn') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.DualStackedColumn.
jQuery.sap.declare("sap.viz.ui5.DualStackedColumn");




/**
 * Constructor for a new ui5/DualStackedColumn.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/DualStackedColumn
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.DualStackedColumn
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.DualStackedColumn", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.StackedVerticalBar", multiple : false}, 
		"yAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.DualStackedColumn with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.DualStackedColumn.extend
 * @function
 */

sap.viz.ui5.DualStackedColumn.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * 
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.StackedVerticalBar} oPlotArea
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualStackedColumn#getYAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis2
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#setYAxis2
 * @function
 */
	

/**
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#destroyYAxis2
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.DualStackedColumn#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualStackedColumn#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.DualStackedColumn#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualStackedColumn#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.DualStackedColumn#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.DualStackedColumn#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.DualStackedColumn#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualStackedColumn#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/DualStackedColumn.js
sap.viz.ui5.DualStackedColumn.prototype.getVIZChartType = function() {
  return "viz/dual_stacked_column";
};

sap.viz.ui5.DualStackedColumn.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.DualStackedColumn.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.DualStackedColumn.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.DualStackedColumn.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.DualStackedColumn.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.DualStackedColumn.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.DualStackedColumn.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.DualStackedColumn.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.DualStackedColumn.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.DualStackedColumn.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.DualStackedColumn.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.DualStackedColumn.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.DualStackedColumn.prototype.getYAxis2 = function() {
  return this._getOrCreate("yAxis2");
}
sap.viz.ui5.DualStackedColumn.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/DualStackedColumn.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.DualStackedColumn100') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.DualStackedColumn100.
jQuery.sap.declare("sap.viz.ui5.DualStackedColumn100");




/**
 * Constructor for a new ui5/DualStackedColumn100.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li>
 * <li>{@link #getYAxis2 yAxis2} : sap.viz.ui5.types.Axis</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.DualStackedColumn100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/DualStackedColumn100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.DualStackedColumn100
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.DualStackedColumn100", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.StackedVerticalBar", multiple : false}, 
		"yAxis2" : {type : "sap.viz.ui5.types.Axis", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.DualStackedColumn100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.DualStackedColumn100.extend
 * @function
 */

sap.viz.ui5.DualStackedColumn100.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * 
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.StackedVerticalBar} oPlotArea
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>yAxis2</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#getYAxis2
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis2</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis2
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#setYAxis2
 * @function
 */
	

/**
 * Destroys the yAxis2 in the aggregation 
 * named <code>yAxis2</code>.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#destroyYAxis2
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.DualStackedColumn100#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualStackedColumn100#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.DualStackedColumn100#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualStackedColumn100#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.DualStackedColumn100#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn100#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn100#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn100#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.DualStackedColumn100#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn100#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn100#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.DualStackedColumn100#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.DualStackedColumn100#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.DualStackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.DualStackedColumn100#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.DualStackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.DualStackedColumn100#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/DualStackedColumn100.js
sap.viz.ui5.DualStackedColumn100.prototype.getVIZChartType = function() {
  return "viz/100_dual_stacked_column";
};

sap.viz.ui5.DualStackedColumn100.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.DualStackedColumn100.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.DualStackedColumn100.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.DualStackedColumn100.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.DualStackedColumn100.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.DualStackedColumn100.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.DualStackedColumn100.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.DualStackedColumn100.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.DualStackedColumn100.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.DualStackedColumn100.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.DualStackedColumn100.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.DualStackedColumn100.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.DualStackedColumn100.prototype.getYAxis2 = function() {
  return this._getOrCreate("yAxis2");
}
sap.viz.ui5.DualStackedColumn100.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.DualStackedColumn100.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/DualStackedColumn100.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Heatmap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Heatmap.
jQuery.sap.declare("sap.viz.ui5.Heatmap");




/**
 * Constructor for a new ui5/Heatmap.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Heatmap</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Heatmap#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Heatmap#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Heatmap
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Heatmap
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Heatmap", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Heatmap", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Heatmap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Heatmap.extend
 * @function
 */

sap.viz.ui5.Heatmap.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Heatmap#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Heatmap#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Heatmap#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Heatmap#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Heatmap#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Heatmap#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Heatmap#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Heatmap#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.heatmap
 * 
 * @return {sap.viz.ui5.types.Heatmap}
 * @public
 * @name sap.viz.ui5.Heatmap#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Heatmap} oPlotArea
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Heatmap#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Heatmap#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#destroyInteraction
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Heatmap#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Heatmap#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Heatmap#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Heatmap#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Heatmap#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Heatmap#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Heatmap#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Heatmap#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Heatmap#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Heatmap#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Heatmap#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Heatmap#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Heatmap#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Heatmap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Heatmap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Heatmap#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Heatmap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Heatmap#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Heatmap.js
sap.viz.ui5.Heatmap.prototype.getVIZChartType = function() {
  return "viz/heatmap";
};

sap.viz.ui5.Heatmap.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Heatmap.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Heatmap.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Heatmap.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Heatmap.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Heatmap.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Heatmap.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Heatmap.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Heatmap.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Heatmap.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Heatmap.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Heatmap.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Heatmap.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Heatmap.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.HorizontalArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.HorizontalArea.
jQuery.sap.declare("sap.viz.ui5.HorizontalArea");




/**
 * Constructor for a new ui5/HorizontalArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/HorizontalArea
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.HorizontalArea
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.HorizontalArea", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Area", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.HorizontalArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.HorizontalArea.extend
 * @function
 */

sap.viz.ui5.HorizontalArea.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * 
 * @return {sap.viz.ui5.types.Area}
 * @public
 * @name sap.viz.ui5.HorizontalArea#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Area} oPlotArea
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.HorizontalArea#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.HorizontalArea#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.HorizontalArea#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.HorizontalArea#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.HorizontalArea#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.HorizontalArea#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.HorizontalArea#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.HorizontalArea#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/HorizontalArea.js
sap.viz.ui5.HorizontalArea.prototype.getVIZChartType = function() {
  return "viz/horizontal_area";
};

sap.viz.ui5.HorizontalArea.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.HorizontalArea.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.HorizontalArea.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.HorizontalArea.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.HorizontalArea.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.HorizontalArea.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.HorizontalArea.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.HorizontalArea.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.HorizontalArea.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.HorizontalArea.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.HorizontalArea.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.HorizontalArea.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.HorizontalArea.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/HorizontalArea.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.HorizontalArea100') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.HorizontalArea100.
jQuery.sap.declare("sap.viz.ui5.HorizontalArea100");




/**
 * Constructor for a new ui5/HorizontalArea100.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.HorizontalArea100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/HorizontalArea100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.HorizontalArea100
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.HorizontalArea100", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Area", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.HorizontalArea100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.HorizontalArea100.extend
 * @function
 */

sap.viz.ui5.HorizontalArea100.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.area
 * 
 * @return {sap.viz.ui5.types.Area}
 * @public
 * @name sap.viz.ui5.HorizontalArea100#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Area} oPlotArea
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.HorizontalArea100#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.HorizontalArea100#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.HorizontalArea100#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.HorizontalArea100#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.HorizontalArea100#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea100#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea100#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea100#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.HorizontalArea100#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea100#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea100#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.HorizontalArea100#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.HorizontalArea100#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.HorizontalArea100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.HorizontalArea100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.HorizontalArea100#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.HorizontalArea100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.HorizontalArea100#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/HorizontalArea100.js
sap.viz.ui5.HorizontalArea100.prototype.getVIZChartType = function() {
  return "viz/100_horizontal_area";
};

sap.viz.ui5.HorizontalArea100.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.HorizontalArea100.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.HorizontalArea100.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.HorizontalArea100.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.HorizontalArea100.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.HorizontalArea100.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.HorizontalArea100.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.HorizontalArea100.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.HorizontalArea100.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.HorizontalArea100.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.HorizontalArea100.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.HorizontalArea100.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.HorizontalArea100.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.HorizontalArea100.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/HorizontalArea100.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Line') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Line.
jQuery.sap.declare("sap.viz.ui5.Line");




/**
 * Constructor for a new ui5/Line.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Line</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Line#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Line#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Line
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Line
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Line", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Line", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Line with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Line.extend
 * @function
 */

sap.viz.ui5.Line.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Line#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Line#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Line#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Line#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Line#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Line#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Line#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Line#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Line#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Line#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Line#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.line
 * 
 * @return {sap.viz.ui5.types.Line}
 * @public
 * @name sap.viz.ui5.Line#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Line} oPlotArea
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Line#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Line</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Line#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Line#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Line</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Line#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Line#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Line#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Line#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Line#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Line#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Line#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Line</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Line#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Line#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Line#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Line</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Line</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Line</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Line</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Line#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Line} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Line#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Line.js
sap.viz.ui5.Line.prototype.getVIZChartType = function() {
  return "viz/line";
};

sap.viz.ui5.Line.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Line.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Line.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Line.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Line.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Line.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Line.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Line.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Line.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Line.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Line.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Line.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Line.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Line.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Line.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Pie') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Pie.
jQuery.sap.declare("sap.viz.ui5.Pie");




/**
 * Constructor for a new ui5/Pie.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Pie</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getDataTransform dataTransform} : sap.viz.ui5.types.Datatransform</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Pie#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Pie#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Pie
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Pie
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Pie", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Pie", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"dataTransform" : {type : "sap.viz.ui5.types.Datatransform", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Pie with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Pie.extend
 * @function
 */

sap.viz.ui5.Pie.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Pie#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Pie#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Pie#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Pie#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Pie#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.pie
 * 
 * @return {sap.viz.ui5.types.Pie}
 * @public
 * @name sap.viz.ui5.Pie#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Pie} oPlotArea
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Pie#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Pie#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Pie#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>dataTransform</code>.<br/>
 * Module sap.viz.modules.datatransform
 * 
 * @return {sap.viz.ui5.types.Datatransform}
 * @public
 * @name sap.viz.ui5.Pie#getDataTransform
 * @function
 */


/**
 * Setter for the aggregated <code>dataTransform</code>.
 * @param {sap.viz.ui5.types.Datatransform} oDataTransform
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#setDataTransform
 * @function
 */
	

/**
 * Destroys the dataTransform in the aggregation 
 * named <code>dataTransform</code>.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#destroyDataTransform
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Pie#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Pie#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Pie#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Pie#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Pie#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Pie#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Pie#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Pie#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Pie#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Pie#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Pie#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Pie#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Pie#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Pie</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Pie</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Pie</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Pie</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Pie#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Pie} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Pie#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Pie.js
sap.viz.ui5.Pie.prototype.getVIZChartType = function() {
  return "viz/pie";
};

sap.viz.ui5.Pie.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Pie.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Pie.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Pie.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Pie.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Pie.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Pie.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Pie.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Pie.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Pie.prototype.getDataTransform = function() {
  return this._getOrCreate("dataTransform");
}
sap.viz.ui5.Pie.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Pie.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Pie.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Scatter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Scatter.
jQuery.sap.declare("sap.viz.ui5.Scatter");




/**
 * Constructor for a new ui5/Scatter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Scatter</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getDataTransform dataTransform} : sap.viz.ui5.types.Datatransform</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Scatter#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Scatter#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Scatter
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Scatter
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Scatter", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Scatter", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"dataTransform" : {type : "sap.viz.ui5.types.Datatransform", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Scatter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Scatter.extend
 * @function
 */

sap.viz.ui5.Scatter.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Scatter#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Scatter#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Scatter#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Scatter#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Scatter#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Scatter#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Scatter#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.Scatter#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.Scatter#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.scatter
 * 
 * @return {sap.viz.ui5.types.Scatter}
 * @public
 * @name sap.viz.ui5.Scatter#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Scatter} oPlotArea
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Scatter#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Scatter#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>dataTransform</code>.<br/>
 * Module sap.viz.modules.datatransform
 * 
 * @return {sap.viz.ui5.types.Datatransform}
 * @public
 * @name sap.viz.ui5.Scatter#getDataTransform
 * @function
 */


/**
 * Setter for the aggregated <code>dataTransform</code>.
 * @param {sap.viz.ui5.types.Datatransform} oDataTransform
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#setDataTransform
 * @function
 */
	

/**
 * Destroys the dataTransform in the aggregation 
 * named <code>dataTransform</code>.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#destroyDataTransform
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Scatter#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Scatter#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Scatter#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Scatter#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Scatter#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Scatter#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Scatter#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Scatter#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Scatter#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Scatter#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Scatter#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Scatter#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Scatter#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Scatter</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Scatter</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Scatter</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Scatter</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Scatter#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Scatter} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Scatter#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Scatter.js
sap.viz.ui5.Scatter.prototype.getVIZChartType = function() {
  return "viz/scatter";
};

sap.viz.ui5.Scatter.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Scatter.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Scatter.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Scatter.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Scatter.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Scatter.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Scatter.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.Scatter.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.Scatter.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.Scatter.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Scatter.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Scatter.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Scatter.prototype.getDataTransform = function() {
  return this._getOrCreate("dataTransform");
}
sap.viz.ui5.Scatter.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Scatter.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Scatter.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.StackedColumn') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.StackedColumn.
jQuery.sap.declare("sap.viz.ui5.StackedColumn");




/**
 * Constructor for a new ui5/StackedColumn.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.StackedColumn#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/StackedColumn
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.StackedColumn
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.StackedColumn", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.StackedVerticalBar", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.StackedColumn with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.StackedColumn.extend
 * @function
 */

sap.viz.ui5.StackedColumn.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.StackedColumn#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.StackedColumn#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.StackedColumn#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.StackedColumn#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.StackedColumn#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.StackedColumn#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.StackedColumn#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.StackedColumn#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.StackedColumn#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.StackedColumn#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.StackedColumn#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * 
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * @name sap.viz.ui5.StackedColumn#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.StackedVerticalBar} oPlotArea
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.StackedColumn#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.StackedColumn#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.StackedColumn#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.StackedColumn#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.StackedColumn#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.StackedColumn#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.StackedColumn#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.StackedColumn</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.StackedColumn#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/StackedColumn.js
sap.viz.ui5.StackedColumn.prototype.getVIZChartType = function() {
  return "viz/stacked_column";
};

sap.viz.ui5.StackedColumn.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.StackedColumn.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.StackedColumn.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.StackedColumn.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.StackedColumn.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.StackedColumn.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.StackedColumn.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.StackedColumn.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.StackedColumn.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.StackedColumn.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.StackedColumn.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.StackedColumn.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.StackedColumn.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/StackedColumn.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.StackedColumn100') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.StackedColumn100.
jQuery.sap.declare("sap.viz.ui5.StackedColumn100");




/**
 * Constructor for a new ui5/StackedColumn100.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.StackedVerticalBar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.StackedColumn100#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/StackedColumn100
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.StackedColumn100
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.StackedColumn100", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.StackedVerticalBar", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.StackedColumn100 with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.StackedColumn100.extend
 * @function
 */

sap.viz.ui5.StackedColumn100.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyInteraction
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.stackedverticalbar
 * 
 * @return {sap.viz.ui5.types.StackedVerticalBar}
 * @public
 * @name sap.viz.ui5.StackedColumn100#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.StackedVerticalBar} oPlotArea
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#destroyPlotArea
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.StackedColumn100#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.StackedColumn100#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.StackedColumn100#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.StackedColumn100#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.StackedColumn100#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn100#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn100#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn100#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.StackedColumn100#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn100#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn100#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.StackedColumn100#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.StackedColumn100#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.StackedColumn100</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.StackedColumn100</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.StackedColumn100#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.StackedColumn100} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.StackedColumn100#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/StackedColumn100.js
sap.viz.ui5.StackedColumn100.prototype.getVIZChartType = function() {
  return "viz/100_stacked_column";
};

sap.viz.ui5.StackedColumn100.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.StackedColumn100.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.StackedColumn100.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.StackedColumn100.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.StackedColumn100.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.StackedColumn100.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.StackedColumn100.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.StackedColumn100.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.StackedColumn100.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.StackedColumn100.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.StackedColumn100.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.StackedColumn100.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.StackedColumn100.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.StackedColumn100.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/StackedColumn100.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.TimeBubble') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.TimeBubble.
jQuery.sap.declare("sap.viz.ui5.TimeBubble");




/**
 * Constructor for a new ui5/TimeBubble.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getSizeLegend sizeLegend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getXAxis xAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getYAxis yAxis} : sap.viz.ui5.types.Axis</li>
 * <li>{@link #getBackground background} : sap.viz.ui5.types.Background</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Bubble</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.TimeBubble#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.TimeBubble#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.TimeBubble#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.TimeBubble#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.TimeBubble#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/TimeBubble
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.TimeBubble
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.TimeBubble", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"sizeLegend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"xAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"yAxis" : {type : "sap.viz.ui5.types.Axis", multiple : false}, 
		"background" : {type : "sap.viz.ui5.types.Background", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Bubble", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.TimeBubble with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.TimeBubble.extend
 * @function
 */

sap.viz.ui5.TimeBubble.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.TimeBubble#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.TimeBubble#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.TimeBubble#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.TimeBubble#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>sizeLegend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.TimeBubble#getSizeLegend
 * @function
 */


/**
 * Setter for the aggregated <code>sizeLegend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oSizeLegend
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setSizeLegend
 * @function
 */
	

/**
 * Destroys the sizeLegend in the aggregation 
 * named <code>sizeLegend</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroySizeLegend
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.TimeBubble#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.TimeBubble#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>xAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.TimeBubble#getXAxis
 * @function
 */


/**
 * Setter for the aggregated <code>xAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oXAxis
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setXAxis
 * @function
 */
	

/**
 * Destroys the xAxis in the aggregation 
 * named <code>xAxis</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyXAxis
 * @function
 */


/**
 * Getter for aggregation <code>yAxis</code>.<br/>
 * Module sap.viz.modules.axis
 * 
 * @return {sap.viz.ui5.types.Axis}
 * @public
 * @name sap.viz.ui5.TimeBubble#getYAxis
 * @function
 */


/**
 * Setter for the aggregated <code>yAxis</code>.
 * @param {sap.viz.ui5.types.Axis} oYAxis
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setYAxis
 * @function
 */
	

/**
 * Destroys the yAxis in the aggregation 
 * named <code>yAxis</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyYAxis
 * @function
 */


/**
 * Getter for aggregation <code>background</code>.<br/>
 * Module sap.viz.modules.background
 * 
 * @return {sap.viz.ui5.types.Background}
 * @public
 * @name sap.viz.ui5.TimeBubble#getBackground
 * @function
 */


/**
 * Setter for the aggregated <code>background</code>.
 * @param {sap.viz.ui5.types.Background} oBackground
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setBackground
 * @function
 */
	

/**
 * Destroys the background in the aggregation 
 * named <code>background</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyBackground
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.bubble
 * 
 * @return {sap.viz.ui5.types.Bubble}
 * @public
 * @name sap.viz.ui5.TimeBubble#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Bubble} oPlotArea
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.TimeBubble#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.TimeBubble#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#destroyInteraction
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.TimeBubble#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.TimeBubble#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.TimeBubble#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.TimeBubble#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.TimeBubble#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.TimeBubble#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.TimeBubble#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.TimeBubble#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.TimeBubble#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.TimeBubble#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.TimeBubble#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.TimeBubble#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.TimeBubble#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.TimeBubble</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.TimeBubble</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.TimeBubble#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.TimeBubble} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.TimeBubble#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/TimeBubble.js
sap.viz.ui5.TimeBubble.prototype.getVIZChartType = function() {
  return "viz/time_bubble";
};

sap.viz.ui5.TimeBubble.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.TimeBubble.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.TimeBubble.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.TimeBubble.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.TimeBubble.prototype.getSizeLegend = function() {
  return this._getOrCreate("sizeLegend");
}
sap.viz.ui5.TimeBubble.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.TimeBubble.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.TimeBubble.prototype.getXAxis = function() {
  return this._getOrCreate("xAxis");
}
sap.viz.ui5.TimeBubble.prototype.getYAxis = function() {
  return this._getOrCreate("yAxis");
}
sap.viz.ui5.TimeBubble.prototype.getBackground = function() {
  return this._getOrCreate("background");
}
sap.viz.ui5.TimeBubble.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.TimeBubble.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.TimeBubble.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.TimeBubble.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.TimeBubble.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/TimeBubble.js
if ( !jQuery.sap.isDeclared('sap.viz.ui5.Treemap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.viz.ui5.Treemap.
jQuery.sap.declare("sap.viz.ui5.Treemap");




/**
 * Constructor for a new ui5/Treemap.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGeneral general} : sap.viz.ui5.types.RootContainer</li>
 * <li>{@link #getTitle title} : sap.viz.ui5.types.Title</li>
 * <li>{@link #getLegendGroup legendGroup} : sap.viz.ui5.types.Legend</li>
 * <li>{@link #getLegend legend} : sap.viz.ui5.types.legend.Common</li>
 * <li>{@link #getXyContainer xyContainer} : sap.viz.ui5.types.XYContainer</li>
 * <li>{@link #getDataLabel dataLabel} : sap.viz.ui5.types.Datalabel</li>
 * <li>{@link #getPlotArea plotArea} : sap.viz.ui5.types.Treemap</li>
 * <li>{@link #getToolTip toolTip} : sap.viz.ui5.types.Tooltip</li>
 * <li>{@link #getInteraction interaction} : sap.viz.ui5.types.controller.Interaction</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.viz.ui5.Treemap#event:selectData selectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:deselectData deselectData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:showTooltip showTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:hideTooltip hideTooltip} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.viz.ui5.Treemap#event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.viz.ui5.core.BaseChart#constructor sap.viz.ui5.core.BaseChart}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Chart ui5/Treemap
 * @extends sap.viz.ui5.core.BaseChart
 * @version 1.28.24
 *
 * @constructor
 * @public
 * @since 1.7.2
 * @experimental Since version 1.7.2. 
 * Charting API is not finished yet and might change completely
 * @name sap.viz.ui5.Treemap
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.viz.ui5.core.BaseChart.extend("sap.viz.ui5.Treemap", { metadata : {

	library : "sap.viz",
	aggregations : {
		"general" : {type : "sap.viz.ui5.types.RootContainer", multiple : false}, 
		"title" : {type : "sap.viz.ui5.types.Title", multiple : false}, 
		"legendGroup" : {type : "sap.viz.ui5.types.Legend", multiple : false}, 
		"legend" : {type : "sap.viz.ui5.types.legend.Common", multiple : false}, 
		"xyContainer" : {type : "sap.viz.ui5.types.XYContainer", multiple : false}, 
		"dataLabel" : {type : "sap.viz.ui5.types.Datalabel", multiple : false}, 
		"plotArea" : {type : "sap.viz.ui5.types.Treemap", multiple : false}, 
		"toolTip" : {type : "sap.viz.ui5.types.Tooltip", multiple : false}, 
		"interaction" : {type : "sap.viz.ui5.types.controller.Interaction", multiple : false}
	},
	events : {
		"selectData" : {}, 
		"deselectData" : {}, 
		"showTooltip" : {deprecated: true}, 
		"hideTooltip" : {deprecated: true}, 
		"initialized" : {}
	}
}});


/**
 * Creates a new subclass of class sap.viz.ui5.Treemap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.viz.ui5.Treemap.extend
 * @function
 */

sap.viz.ui5.Treemap.M_EVENTS = {'selectData':'selectData','deselectData':'deselectData','showTooltip':'showTooltip','hideTooltip':'hideTooltip','initialized':'initialized'};


/**
 * Getter for aggregation <code>general</code>.<br/>
 * Module sap.viz.modules.rootContainer
 * 
 * @return {sap.viz.ui5.types.RootContainer}
 * @public
 * @name sap.viz.ui5.Treemap#getGeneral
 * @function
 */


/**
 * Setter for the aggregated <code>general</code>.
 * @param {sap.viz.ui5.types.RootContainer} oGeneral
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setGeneral
 * @function
 */
	

/**
 * Destroys the general in the aggregation 
 * named <code>general</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyGeneral
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Module sap.viz.modules.title
 * 
 * @return {sap.viz.ui5.types.Title}
 * @public
 * @name sap.viz.ui5.Treemap#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.viz.ui5.types.Title} oTitle
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>legendGroup</code>.<br/>
 * Module sap.viz.modules.legend
 * 
 * @return {sap.viz.ui5.types.Legend}
 * @public
 * @name sap.viz.ui5.Treemap#getLegendGroup
 * @function
 */


/**
 * Setter for the aggregated <code>legendGroup</code>.
 * @param {sap.viz.ui5.types.Legend} oLegendGroup
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setLegendGroup
 * @function
 */
	

/**
 * Destroys the legendGroup in the aggregation 
 * named <code>legendGroup</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyLegendGroup
 * @function
 */


/**
 * Getter for aggregation <code>legend</code>.<br/>
 * Module sap.viz.modules.legend.common
 * 
 * @return {sap.viz.ui5.types.legend.Common}
 * @public
 * @name sap.viz.ui5.Treemap#getLegend
 * @function
 */


/**
 * Setter for the aggregated <code>legend</code>.
 * @param {sap.viz.ui5.types.legend.Common} oLegend
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setLegend
 * @function
 */
	

/**
 * Destroys the legend in the aggregation 
 * named <code>legend</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyLegend
 * @function
 */


/**
 * Getter for aggregation <code>xyContainer</code>.<br/>
 * Module sap.viz.modules.xycontainer
 * 
 * @return {sap.viz.ui5.types.XYContainer}
 * @public
 * @name sap.viz.ui5.Treemap#getXyContainer
 * @function
 */


/**
 * Setter for the aggregated <code>xyContainer</code>.
 * @param {sap.viz.ui5.types.XYContainer} oXyContainer
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setXyContainer
 * @function
 */
	

/**
 * Destroys the xyContainer in the aggregation 
 * named <code>xyContainer</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyXyContainer
 * @function
 */


/**
 * Getter for aggregation <code>dataLabel</code>.<br/>
 * Module sap.viz.modules.datalabel
 * 
 * @return {sap.viz.ui5.types.Datalabel}
 * @public
 * @name sap.viz.ui5.Treemap#getDataLabel
 * @function
 */


/**
 * Setter for the aggregated <code>dataLabel</code>.
 * @param {sap.viz.ui5.types.Datalabel} oDataLabel
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setDataLabel
 * @function
 */
	

/**
 * Destroys the dataLabel in the aggregation 
 * named <code>dataLabel</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyDataLabel
 * @function
 */


/**
 * Getter for aggregation <code>plotArea</code>.<br/>
 * Module sap.viz.modules.treemap
 * 
 * @return {sap.viz.ui5.types.Treemap}
 * @public
 * @name sap.viz.ui5.Treemap#getPlotArea
 * @function
 */


/**
 * Setter for the aggregated <code>plotArea</code>.
 * @param {sap.viz.ui5.types.Treemap} oPlotArea
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setPlotArea
 * @function
 */
	

/**
 * Destroys the plotArea in the aggregation 
 * named <code>plotArea</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyPlotArea
 * @function
 */


/**
 * Getter for aggregation <code>toolTip</code>.<br/>
 * Module sap.viz.chart.elements.Tooltip
 * 
 * @return {sap.viz.ui5.types.Tooltip}
 * @public
 * @name sap.viz.ui5.Treemap#getToolTip
 * @function
 */


/**
 * Setter for the aggregated <code>toolTip</code>.
 * @param {sap.viz.ui5.types.Tooltip} oToolTip
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setToolTip
 * @function
 */
	

/**
 * Destroys the toolTip in the aggregation 
 * named <code>toolTip</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyToolTip
 * @function
 */


/**
 * Getter for aggregation <code>interaction</code>.<br/>
 * Module sap.viz.modules.controller.interaction
 * 
 * @return {sap.viz.ui5.types.controller.Interaction}
 * @public
 * @name sap.viz.ui5.Treemap#getInteraction
 * @function
 */


/**
 * Setter for the aggregated <code>interaction</code>.
 * @param {sap.viz.ui5.types.controller.Interaction} oInteraction
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#setInteraction
 * @function
 */
	

/**
 * Destroys the interaction in the aggregation 
 * named <code>interaction</code>.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#destroyInteraction
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @name sap.viz.ui5.Treemap#selectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.<code>{name: "selectData",data:[{
 * //selected element's detail
 * target:"Dom Element",//an object pointed to corresponding dom element
 * data:[{val: "...",//value of this element
 * ctx:{type:"Dimension"||"Measure"||"MND",
 * //for Dimension
 * path:{aa:"...",di:"...",dii:"..."},
 * //for Measure
 * path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
 * //for MND
 * path:{mg:"...",mi:"..."}
 * //path: analysis path
 * //aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
 * //di: dimension index //zero based
 * //dii: dimension item index //zero based
 * //mg: measure group index // 0 for measure group 1,1 for measure group 2
 * //mi: measure index // measure index in measure group zero based
 * //dii_a1: each dii of di in analysis axis 1 index
 * //dii_a2: each dii of di in analysis axis 2 index
 * }},{
 * //for bubble, tagcloud and scatter, there will be more than one values in one selected element.
 * var:"...",ctx:"..."}]},{
 * //if under multi selection, there will be more than one selected elements
 * target:"...",data:["..."]}]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#attachSelectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#detachSelectData
 * @function
 */

/**
 * Fire event selectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Treemap#fireSelectData
 * @function
 */


/**
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @name sap.viz.ui5.Treemap#deselectData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deselectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 *  
 * Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.<code>{name: "deselectData",data:["---the same as selectedData---"]}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#attachDeselectData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deselectData' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#detachDeselectData
 * @function
 */

/**
 * Fire event deselectData to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Treemap#fireDeselectData
 * @function
 */


/**
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @name sap.viz.ui5.Treemap#showTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 *  
 * This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.<code>{name:"showTooltip",data:{body:[{
 * //All measures
 * name:"...",val:[{//measure value is an array containing only one item
 * value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
 * //this object specifies the plot area of the chart
 * height:"...",width:"...",x:"...",y:"..."},point:{
 * //this object specifies a point which affects the position of tooltip
 * x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Treemap#attachShowTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Treemap#detachShowTooltip
 * @function
 */

/**
 * Fire event showTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Treemap#fireShowTooltip
 * @function
 */


/**
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @name sap.viz.ui5.Treemap#hideTooltip
 * @event
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'hideTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 *  
 * This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Treemap#attachHideTooltip
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'hideTooltip' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Treemap#detachHideTooltip
 * @function
 */

/**
 * Fire event hideTooltip to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * @deprecated Since version 1.19. 
 * This Property has been deprecated. This interface will be removed from the SAPUI5 delivery in one of the next releases.
 * @name sap.viz.ui5.Treemap#fireHideTooltip
 * @function
 */


/**
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @name sap.viz.ui5.Treemap#initialized
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'initialized' event of this <code>sap.viz.ui5.Treemap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.viz.ui5.Treemap</code>.<br/> itself. 
 *  
 * Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.viz.ui5.Treemap</code>.<br/> itself.
 *
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#attachInitialized
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'initialized' event of this <code>sap.viz.ui5.Treemap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @public
 * @name sap.viz.ui5.Treemap#detachInitialized
 * @function
 */

/**
 * Fire event initialized to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.viz.ui5.Treemap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.viz.ui5.Treemap#fireInitialized
 * @function
 */

// Start of sap/viz/ui5/Treemap.js
sap.viz.ui5.Treemap.prototype.getVIZChartType = function() {
  return "viz/treemap";
};

sap.viz.ui5.Treemap.prototype.getGeneral = function() {
  return this._getOrCreate("general");
}
sap.viz.ui5.Treemap.prototype.getTitle = function() {
  return this._getOrCreate("title");
}
sap.viz.ui5.Treemap.prototype.getLegendGroup = function() {
  return this._getOrCreate("legendGroup");
}
sap.viz.ui5.Treemap.prototype.getLegend = function() {
  return this._getOrCreate("legend");
}
sap.viz.ui5.Treemap.prototype.getXyContainer = function() {
  return this._getOrCreate("xyContainer");
}
sap.viz.ui5.Treemap.prototype.getDataLabel = function() {
  return this._getOrCreate("dataLabel");
}
sap.viz.ui5.Treemap.prototype.getPlotArea = function() {
  return this._getOrCreate("plotArea");
}
sap.viz.ui5.Treemap.prototype.getToolTip = function() {
  return this._getOrCreate("toolTip");
}
sap.viz.ui5.Treemap.prototype.getInteraction = function() {
  return this._getOrCreate("interaction");
}
sap.viz.ui5.Treemap.prototype.attachSelectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("selectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.detachSelectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("selectData", fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.attachDeselectData = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("deselectData", oData, fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.detachDeselectData = function(fnHandler, oListener) {
  return this._detachVIZEvent("deselectData", fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.attachShowTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("showTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.detachShowTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("showTooltip", fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.attachHideTooltip = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("hideTooltip", oData, fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.detachHideTooltip = function(fnHandler, oListener) {
  return this._detachVIZEvent("hideTooltip", fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.attachInitialized = function(oData, fnHandler, oListener) {
  return this._attachVIZEvent("initialized", oData, fnHandler, oListener);
};

sap.viz.ui5.Treemap.prototype.detachInitialized = function(fnHandler, oListener) {
  return this._detachVIZEvent("initialized", fnHandler, oListener);
};


}; // end of sap/viz/ui5/Treemap.js
